
Zavrsni_rad_v1_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f1c  08004f1c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f24  08004f24  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000005c  08004f88  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004f88  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011107  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002940  00000000  00000000  000311d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00033b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbf  00000000  00000000  00034a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235fd  00000000  00000000  000355ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a81  00000000  00000000  00058bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3ee5  00000000  00000000  0006c66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043d0  00000000  00000000  00140554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00144924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004bdc 	.word	0x08004bdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004bdc 	.word	0x08004bdc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <SPI_CS_WRITE>:
#include "CC1101_E07_M1101D_SMA.h"

void SPI_CS_WRITE(bool state)	 // State machine za CS
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	if(state)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d005      	beq.n	80005d8 <SPI_CS_WRITE+0x1c>
	  {
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2120      	movs	r1, #32
 80005d0:	4806      	ldr	r0, [pc, #24]	; (80005ec <SPI_CS_WRITE+0x30>)
 80005d2:	f001 fc55 	bl	8001e80 <HAL_GPIO_WritePin>
	  }
	else
	  {
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
	  }
}
 80005d6:	e004      	b.n	80005e2 <SPI_CS_WRITE+0x26>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2120      	movs	r1, #32
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <SPI_CS_WRITE+0x30>)
 80005de:	f001 fc4f 	bl	8001e80 <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020400 	.word	0x40020400

080005f0 <manual_POR>:

void manual_POR()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
	uint8_t status = 0x00;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]
	char serialStatus[10];

	SPI_CS_WRITE(0);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffde 	bl	80005bc <SPI_CS_WRITE>
	delay_6_25ns(160);
 8000600:	20a0      	movs	r0, #160	; 0xa0
 8000602:	f001 f893 	bl	800172c <delay_6_25ns>
	SPI_CS_WRITE(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ffd8 	bl	80005bc <SPI_CS_WRITE>
	delay_6_25ns(6560);
 800060c:	f44f 50cd 	mov.w	r0, #6560	; 0x19a0
 8000610:	f001 f88c 	bl	800172c <delay_6_25ns>

	SPI_CS_WRITE(0);
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff ffd1 	bl	80005bc <SPI_CS_WRITE>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 800061a:	bf00      	nop
 800061c:	2104      	movs	r1, #4
 800061e:	4812      	ldr	r0, [pc, #72]	; (8000668 <manual_POR+0x78>)
 8000620:	f001 fc16 	bl	8001e50 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f8      	bne.n	800061c <manual_POR+0x2c>
	status = command_strobe(SRES);
 800062a:	2030      	movs	r0, #48	; 0x30
 800062c:	f000 f90a 	bl	8000844 <command_strobe>
 8000630:	4603      	mov	r3, r0
 8000632:	73fb      	strb	r3, [r7, #15]
	SPI_CS_WRITE(1);
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff ffc1 	bl	80005bc <SPI_CS_WRITE>

	snprintf(serialStatus, sizeof(serialStatus), "0x%02X\r\n", status);
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	1d38      	adds	r0, r7, #4
 800063e:	4a0b      	ldr	r2, [pc, #44]	; (800066c <manual_POR+0x7c>)
 8000640:	210a      	movs	r1, #10
 8000642:	f003 fdf3 	bl	800422c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fde1 	bl	8000210 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	1d39      	adds	r1, r7, #4
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <manual_POR+0x80>)
 800065a:	f003 fa72 	bl	8003b42 <HAL_UART_Transmit>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40020800 	.word	0x40020800
 800066c:	08004bf4 	.word	0x08004bf4
 8000670:	20000164 	.word	0x20000164

08000674 <cc1101_init>:

void cc1101_init(bool state)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	if(state)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <cc1101_init+0x16>
	{
		write_tx_cc1101_config();	// Konfiguracija tx cc1101 čipa
 8000684:	f000 f80d 	bl	80006a2 <write_tx_cc1101_config>
 8000688:	e001      	b.n	800068e <cc1101_init+0x1a>
	}
	else
	{
		write_rx_cc1101_config();	// Konfiguracija rx cc1101 čipa
 800068a:	f000 f87a 	bl	8000782 <write_rx_cc1101_config>
	}
	command_strobe(SFTX);		// Flush TX FIFO buffer
 800068e:	203b      	movs	r0, #59	; 0x3b
 8000690:	f000 f8d8 	bl	8000844 <command_strobe>
	command_strobe(SFRX);		// Flush RX FIFO buffer
 8000694:	203a      	movs	r0, #58	; 0x3a
 8000696:	f000 f8d5 	bl	8000844 <command_strobe>

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <write_tx_cc1101_config>:
	write_single_byte(TEST0, CC1101_POSTAVKA_TEST0);
}


void write_tx_cc1101_config()
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
	write_single_byte(PATABLE, 0x60);
 80006a6:	2160      	movs	r1, #96	; 0x60
 80006a8:	203e      	movs	r0, #62	; 0x3e
 80006aa:	f000 faeb 	bl	8000c84 <write_single_byte>
	write_single_byte(IOCFG0, CC1101_POSTAVKA_IOCFG0);
 80006ae:	2106      	movs	r1, #6
 80006b0:	2002      	movs	r0, #2
 80006b2:	f000 fae7 	bl	8000c84 <write_single_byte>
	write_single_byte(FIFOTHR, CC1101_POSTAVKA_FIFOTHR);
 80006b6:	2147      	movs	r1, #71	; 0x47
 80006b8:	2003      	movs	r0, #3
 80006ba:	f000 fae3 	bl	8000c84 <write_single_byte>
	write_single_byte(PKTLEN, CC1101_POSTAVKA_PKTLEN);
 80006be:	2105      	movs	r1, #5
 80006c0:	2006      	movs	r0, #6
 80006c2:	f000 fadf 	bl	8000c84 <write_single_byte>
	write_single_byte(PKTCTRL0, CC1101_POSTAVKA_PKTCTRL0);
 80006c6:	2144      	movs	r1, #68	; 0x44
 80006c8:	2008      	movs	r0, #8
 80006ca:	f000 fadb 	bl	8000c84 <write_single_byte>
	write_single_byte(FSCTRL1, CC1101_POSTAVKA_FSCTRL1);
 80006ce:	2106      	movs	r1, #6
 80006d0:	200b      	movs	r0, #11
 80006d2:	f000 fad7 	bl	8000c84 <write_single_byte>
	write_single_byte(FREQ2, CC1101_POSTAVKA_FREQ2);
 80006d6:	2110      	movs	r1, #16
 80006d8:	200d      	movs	r0, #13
 80006da:	f000 fad3 	bl	8000c84 <write_single_byte>
	write_single_byte(FREQ1, CC1101_POSTAVKA_FREQ1);
 80006de:	21a7      	movs	r1, #167	; 0xa7
 80006e0:	200e      	movs	r0, #14
 80006e2:	f000 facf 	bl	8000c84 <write_single_byte>
	write_single_byte(FREQ0, CC1101_POSTAVKA_FREQ0);
 80006e6:	2162      	movs	r1, #98	; 0x62
 80006e8:	200f      	movs	r0, #15
 80006ea:	f000 facb 	bl	8000c84 <write_single_byte>
	write_single_byte(MDMCFG4, CC1101_POSTAVKA_MDMCFG4);
 80006ee:	21f5      	movs	r1, #245	; 0xf5
 80006f0:	2010      	movs	r0, #16
 80006f2:	f000 fac7 	bl	8000c84 <write_single_byte>
	write_single_byte(MDMCFG3, CC1101_POSTAVKA_MDMCFG3);
 80006f6:	2183      	movs	r1, #131	; 0x83
 80006f8:	2011      	movs	r0, #17
 80006fa:	f000 fac3 	bl	8000c84 <write_single_byte>
	write_single_byte(MDMCFG2, CC1101_POSTAVKA_MDMCFG2);
 80006fe:	2191      	movs	r1, #145	; 0x91
 8000700:	2012      	movs	r0, #18
 8000702:	f000 fabf 	bl	8000c84 <write_single_byte>
	write_single_byte(MDMCFG1, CC1101_POSTAVKA_MDMCFG1);
 8000706:	2122      	movs	r1, #34	; 0x22
 8000708:	2013      	movs	r0, #19
 800070a:	f000 fabb 	bl	8000c84 <write_single_byte>
	write_single_byte(DEVIATN, CC1101_POSTAVKA_DEVIATN);
 800070e:	2115      	movs	r1, #21
 8000710:	2015      	movs	r0, #21
 8000712:	f000 fab7 	bl	8000c84 <write_single_byte>
	write_single_byte(MCSM0, CC1101_POSTAVKA_MCSM0);
 8000716:	2118      	movs	r1, #24
 8000718:	2018      	movs	r0, #24
 800071a:	f000 fab3 	bl	8000c84 <write_single_byte>
	write_single_byte(FOCCFG, CC1101_POSTAVKA_FOCCFG);
 800071e:	2116      	movs	r1, #22
 8000720:	2019      	movs	r0, #25
 8000722:	f000 faaf 	bl	8000c84 <write_single_byte>
	write_single_byte(WORCTRL, CC1101_POSTAVKA_WORCTRL);
 8000726:	21fb      	movs	r1, #251	; 0xfb
 8000728:	2020      	movs	r0, #32
 800072a:	f000 faab 	bl	8000c84 <write_single_byte>
	write_single_byte(FSCAL3, CC1101_POSTAVKA_FSCAL3);
 800072e:	21e9      	movs	r1, #233	; 0xe9
 8000730:	2023      	movs	r0, #35	; 0x23
 8000732:	f000 faa7 	bl	8000c84 <write_single_byte>
	write_single_byte(FSCAL2, CC1101_POSTAVKA_FSCAL2);
 8000736:	212a      	movs	r1, #42	; 0x2a
 8000738:	2024      	movs	r0, #36	; 0x24
 800073a:	f000 faa3 	bl	8000c84 <write_single_byte>
	write_single_byte(FSCAL1, CC1101_POSTAVKA_FSCAL1);
 800073e:	2100      	movs	r1, #0
 8000740:	2025      	movs	r0, #37	; 0x25
 8000742:	f000 fa9f 	bl	8000c84 <write_single_byte>
	write_single_byte(FSCAL0, CC1101_POSTAVKA_FSCAL0);
 8000746:	211f      	movs	r1, #31
 8000748:	2026      	movs	r0, #38	; 0x26
 800074a:	f000 fa9b 	bl	8000c84 <write_single_byte>
	write_single_byte(FSTEST, CC1101_POSTAVKA_FSTEST);
 800074e:	2159      	movs	r1, #89	; 0x59
 8000750:	2029      	movs	r0, #41	; 0x29
 8000752:	f000 fa97 	bl	8000c84 <write_single_byte>
	write_single_byte(PTEST, CC1101_POSTAVKA_PTEST);
 8000756:	217f      	movs	r1, #127	; 0x7f
 8000758:	202a      	movs	r0, #42	; 0x2a
 800075a:	f000 fa93 	bl	8000c84 <write_single_byte>
	write_single_byte(AGCTEST, CC1101_POSTAVKA_AGCTEST);
 800075e:	213f      	movs	r1, #63	; 0x3f
 8000760:	202b      	movs	r0, #43	; 0x2b
 8000762:	f000 fa8f 	bl	8000c84 <write_single_byte>
	write_single_byte(TEST2, CC1101_POSTAVKA_TEST2);
 8000766:	2181      	movs	r1, #129	; 0x81
 8000768:	202c      	movs	r0, #44	; 0x2c
 800076a:	f000 fa8b 	bl	8000c84 <write_single_byte>
	write_single_byte(TEST1, CC1101_POSTAVKA_TEST1);
 800076e:	2135      	movs	r1, #53	; 0x35
 8000770:	202d      	movs	r0, #45	; 0x2d
 8000772:	f000 fa87 	bl	8000c84 <write_single_byte>
	write_single_byte(TEST0, CC1101_POSTAVKA_TEST0);
 8000776:	2109      	movs	r1, #9
 8000778:	202e      	movs	r0, #46	; 0x2e
 800077a:	f000 fa83 	bl	8000c84 <write_single_byte>

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}

08000782 <write_rx_cc1101_config>:

void write_rx_cc1101_config()
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
	write_single_byte(PATABLE, 0x60);
 8000786:	2160      	movs	r1, #96	; 0x60
 8000788:	203e      	movs	r0, #62	; 0x3e
 800078a:	f000 fa7b 	bl	8000c84 <write_single_byte>
	write_single_byte(IOCFG0, CC1101_POSTAVKA_IOCFG0);
 800078e:	2106      	movs	r1, #6
 8000790:	2002      	movs	r0, #2
 8000792:	f000 fa77 	bl	8000c84 <write_single_byte>
	write_single_byte(FIFOTHR, CC1101_POSTAVKA_FIFOTHR);
 8000796:	2147      	movs	r1, #71	; 0x47
 8000798:	2003      	movs	r0, #3
 800079a:	f000 fa73 	bl	8000c84 <write_single_byte>
	write_single_byte(PKTLEN, CC1101_POSTAVKA_PKTLEN);
 800079e:	2105      	movs	r1, #5
 80007a0:	2006      	movs	r0, #6
 80007a2:	f000 fa6f 	bl	8000c84 <write_single_byte>
	write_single_byte(PKTCTRL0, CC1101_POSTAVKA_PKTCTRL0);
 80007a6:	2144      	movs	r1, #68	; 0x44
 80007a8:	2008      	movs	r0, #8
 80007aa:	f000 fa6b 	bl	8000c84 <write_single_byte>
	write_single_byte(FSCTRL1, CC1101_POSTAVKA_FSCTRL1);
 80007ae:	2106      	movs	r1, #6
 80007b0:	200b      	movs	r0, #11
 80007b2:	f000 fa67 	bl	8000c84 <write_single_byte>
	write_single_byte(FREQ2, CC1101_POSTAVKA_FREQ2);
 80007b6:	2110      	movs	r1, #16
 80007b8:	200d      	movs	r0, #13
 80007ba:	f000 fa63 	bl	8000c84 <write_single_byte>
	write_single_byte(FREQ1, CC1101_POSTAVKA_FREQ1);
 80007be:	21a7      	movs	r1, #167	; 0xa7
 80007c0:	200e      	movs	r0, #14
 80007c2:	f000 fa5f 	bl	8000c84 <write_single_byte>
	write_single_byte(FREQ0, CC1101_POSTAVKA_FREQ0);
 80007c6:	2162      	movs	r1, #98	; 0x62
 80007c8:	200f      	movs	r0, #15
 80007ca:	f000 fa5b 	bl	8000c84 <write_single_byte>
	write_single_byte(MDMCFG4, CC1101_POSTAVKA_MDMCFG4);
 80007ce:	21f5      	movs	r1, #245	; 0xf5
 80007d0:	2010      	movs	r0, #16
 80007d2:	f000 fa57 	bl	8000c84 <write_single_byte>
	write_single_byte(MDMCFG3, CC1101_POSTAVKA_MDMCFG3);
 80007d6:	2183      	movs	r1, #131	; 0x83
 80007d8:	2011      	movs	r0, #17
 80007da:	f000 fa53 	bl	8000c84 <write_single_byte>
	write_single_byte(MDMCFG2, CC1101_POSTAVKA_MDMCFG2);
 80007de:	2191      	movs	r1, #145	; 0x91
 80007e0:	2012      	movs	r0, #18
 80007e2:	f000 fa4f 	bl	8000c84 <write_single_byte>
	write_single_byte(DEVIATN, CC1101_POSTAVKA_DEVIATN);
 80007e6:	2115      	movs	r1, #21
 80007e8:	2015      	movs	r0, #21
 80007ea:	f000 fa4b 	bl	8000c84 <write_single_byte>
	write_single_byte(MCSM0, CC1101_POSTAVKA_MCSM0);
 80007ee:	2118      	movs	r1, #24
 80007f0:	2018      	movs	r0, #24
 80007f2:	f000 fa47 	bl	8000c84 <write_single_byte>
	write_single_byte(FOCCFG, CC1101_POSTAVKA_FOCCFG);
 80007f6:	2116      	movs	r1, #22
 80007f8:	2019      	movs	r0, #25
 80007fa:	f000 fa43 	bl	8000c84 <write_single_byte>
	write_single_byte(WORCTRL, CC1101_POSTAVKA_WORCTRL);
 80007fe:	21fb      	movs	r1, #251	; 0xfb
 8000800:	2020      	movs	r0, #32
 8000802:	f000 fa3f 	bl	8000c84 <write_single_byte>
	write_single_byte(FSCAL3, CC1101_POSTAVKA_FSCAL3);
 8000806:	21e9      	movs	r1, #233	; 0xe9
 8000808:	2023      	movs	r0, #35	; 0x23
 800080a:	f000 fa3b 	bl	8000c84 <write_single_byte>
	write_single_byte(FSCAL2, CC1101_POSTAVKA_FSCAL2);
 800080e:	212a      	movs	r1, #42	; 0x2a
 8000810:	2024      	movs	r0, #36	; 0x24
 8000812:	f000 fa37 	bl	8000c84 <write_single_byte>
	write_single_byte(FSCAL1, CC1101_POSTAVKA_FSCAL1);
 8000816:	2100      	movs	r1, #0
 8000818:	2025      	movs	r0, #37	; 0x25
 800081a:	f000 fa33 	bl	8000c84 <write_single_byte>
	write_single_byte(FSCAL0, CC1101_POSTAVKA_FSCAL0);
 800081e:	211f      	movs	r1, #31
 8000820:	2026      	movs	r0, #38	; 0x26
 8000822:	f000 fa2f 	bl	8000c84 <write_single_byte>
	write_single_byte(TEST2, CC1101_POSTAVKA_TEST2);
 8000826:	2181      	movs	r1, #129	; 0x81
 8000828:	202c      	movs	r0, #44	; 0x2c
 800082a:	f000 fa2b 	bl	8000c84 <write_single_byte>
	write_single_byte(TEST1, CC1101_POSTAVKA_TEST1);
 800082e:	2135      	movs	r1, #53	; 0x35
 8000830:	202d      	movs	r0, #45	; 0x2d
 8000832:	f000 fa27 	bl	8000c84 <write_single_byte>
	write_single_byte(TEST0, CC1101_POSTAVKA_TEST0);
 8000836:	2109      	movs	r1, #9
 8000838:	202e      	movs	r0, #46	; 0x2e
 800083a:	f000 fa23 	bl	8000c84 <write_single_byte>

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <command_strobe>:

uint8_t command_strobe(uint8_t addr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af02      	add	r7, sp, #8
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	delay_6_25ns(65534);					// Postavljen delay na pocetak, zbog mogucih krivih podataka od prijasnjeg strobe-a
 800084e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8000852:	f000 ff6b 	bl	800172c <delay_6_25ns>
	delay_6_25ns(65534);					// Sveukupno 816us
 8000856:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800085a:	f000 ff67 	bl	800172c <delay_6_25ns>
	HAL_StatusTypeDef SPI_status;
	uint8_t status;

	SPI_CS_WRITE(0);
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff feac 	bl	80005bc <SPI_CS_WRITE>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 8000864:	bf00      	nop
 8000866:	2104      	movs	r1, #4
 8000868:	480e      	ldr	r0, [pc, #56]	; (80008a4 <command_strobe+0x60>)
 800086a:	f001 faf1 	bl	8001e50 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1f8      	bne.n	8000866 <command_strobe+0x22>
	SPI_status = HAL_SPI_TransmitReceive(&hspi2, &addr, &status, 1, HAL_MAX_DELAY);
 8000874:	f107 020e 	add.w	r2, r7, #14
 8000878:	1df9      	adds	r1, r7, #7
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <command_strobe+0x64>)
 8000884:	f002 f9b9 	bl	8002bfa <HAL_SPI_TransmitReceive>
 8000888:	4603      	mov	r3, r0
 800088a:	73fb      	strb	r3, [r7, #15]
	SPI_CS_WRITE(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fe95 	bl	80005bc <SPI_CS_WRITE>
	hal_status(SPI_status);
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fae7 	bl	8000e68 <hal_status>

	return status;
 800089a:	7bbb      	ldrb	r3, [r7, #14]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40020800 	.word	0x40020800
 80008a8:	20000078 	.word	0x20000078

080008ac <read_status_reg>:

// TREBAM JOS ODVOJENE FUNKCIJE ZA TX I RX FIFO I PATABLE!
uint8_t read_status_reg(uint8_t addr, uint8_t *statusByte)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
	uint8_t statusReg = addr | burst_byte_read;
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	737b      	strb	r3, [r7, #13]
	uint8_t statusRegValue;
	uint8_t txDummy = 0x01;
 80008c2:	2301      	movs	r3, #1
 80008c4:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef SPI_status,SPI_status1;

	if(addr >= 0x30 && addr <= 0x3D)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b2f      	cmp	r3, #47	; 0x2f
 80008ca:	d939      	bls.n	8000940 <read_status_reg+0x94>
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b3d      	cmp	r3, #61	; 0x3d
 80008d0:	d836      	bhi.n	8000940 <read_status_reg+0x94>
	{
		SPI_CS_WRITE(0);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff fe72 	bl	80005bc <SPI_CS_WRITE>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 80008d8:	bf00      	nop
 80008da:	2104      	movs	r1, #4
 80008dc:	481b      	ldr	r0, [pc, #108]	; (800094c <read_status_reg+0xa0>)
 80008de:	f001 fab7 	bl	8001e50 <HAL_GPIO_ReadPin>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1f8      	bne.n	80008da <read_status_reg+0x2e>
		SPI_status = HAL_SPI_TransmitReceive(&hspi2, &statusReg, statusByte, 1, HAL_MAX_DELAY);
 80008e8:	f107 010d 	add.w	r1, r7, #13
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	4816      	ldr	r0, [pc, #88]	; (8000950 <read_status_reg+0xa4>)
 80008f8:	f002 f97f 	bl	8002bfa <HAL_SPI_TransmitReceive>
 80008fc:	4603      	mov	r3, r0
 80008fe:	73fb      	strb	r3, [r7, #15]
		delay_6_25ns(16);		//delay od 100ns
 8000900:	2010      	movs	r0, #16
 8000902:	f000 ff13 	bl	800172c <delay_6_25ns>
		SPI_status1 = HAL_SPI_TransmitReceive(&hspi2, &txDummy, &statusRegValue, 1, HAL_MAX_DELAY);
 8000906:	f107 020c 	add.w	r2, r7, #12
 800090a:	f107 010b 	add.w	r1, r7, #11
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2301      	movs	r3, #1
 8000916:	480e      	ldr	r0, [pc, #56]	; (8000950 <read_status_reg+0xa4>)
 8000918:	f002 f96f 	bl	8002bfa <HAL_SPI_TransmitReceive>
 800091c:	4603      	mov	r3, r0
 800091e:	73bb      	strb	r3, [r7, #14]
		delay_6_25ns(16);		//delay od 100ns
 8000920:	2010      	movs	r0, #16
 8000922:	f000 ff03 	bl	800172c <delay_6_25ns>
		SPI_CS_WRITE(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff fe48 	bl	80005bc <SPI_CS_WRITE>

		hal_status(SPI_status);
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fa9a 	bl	8000e68 <hal_status>
		hal_status(SPI_status1);
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fa96 	bl	8000e68 <hal_status>

		return statusRegValue;
 800093c:	7b3b      	ldrb	r3, [r7, #12]
 800093e:	e000      	b.n	8000942 <read_status_reg+0x96>
	}
	else
	{
		return 1;		// Error: 1, oznacava da je start addr u krivom rasponu
 8000940:	2301      	movs	r3, #1
	}
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020800 	.word	0x40020800
 8000950:	20000078 	.word	0x20000078

08000954 <receive_burst_byte_433>:

	return statusByte;
}

uint8_t receive_burst_byte_433(uint8_t *rxData)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b092      	sub	sp, #72	; 0x48
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	uint8_t statusByte;
	char status_message[50];
	uint8_t RX_FIFO = 0x3F;
 800095c:	233f      	movs	r3, #63	; 0x3f
 800095e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t statusRXByte1,statusRXByte2,statusRXByte3,statusRXByte4;
	uint8_t num_rxBytes,num_rxBytes1,num_rxBytes2;
	uint8_t marcstate1,marcstate2,rxfifo_OF1,rxfifo_OF2;


	command_strobe(SIDLE);			// IDLE
 8000962:	2036      	movs	r0, #54	; 0x36
 8000964:	f7ff ff6e 	bl	8000844 <command_strobe>
	command_strobe(SFRX);			// Flush RX FIFO
 8000968:	203a      	movs	r0, #58	; 0x3a
 800096a:	f7ff ff6b 	bl	8000844 <command_strobe>

	snprintf(status_message, sizeof(status_message), "Prosao sam IDLE & FLUSH\r\n");
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4ab8      	ldr	r2, [pc, #736]	; (8000c54 <receive_burst_byte_433+0x300>)
 8000974:	2132      	movs	r1, #50	; 0x32
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fc58 	bl	800422c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fc45 	bl	8000210 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29a      	uxth	r2, r3
 800098a:	f107 010c 	add.w	r1, r7, #12
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	48b1      	ldr	r0, [pc, #708]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000994:	f003 f8d5 	bl	8003b42 <HAL_UART_Transmit>

	num_rxBytes1 = read_status_reg(RXBYTES, &statusRXByte1);
 8000998:	f107 030b 	add.w	r3, r7, #11
 800099c:	4619      	mov	r1, r3
 800099e:	203b      	movs	r0, #59	; 0x3b
 80009a0:	f7ff ff84 	bl	80008ac <read_status_reg>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	rxfifo_OF1 = num_rxBytes1 & 0x80;
 80009aa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80009ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80009b2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	num_rxBytes1 = num_rxBytes1 & 0x7F;
 80009b6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80009ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	num_rxBytes = num_rxBytes1;
 80009c2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80009c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


	marcstate1 = read_status_reg(MARCSTATE, &statusRXByte2);
 80009ca:	f107 030a 	add.w	r3, r7, #10
 80009ce:	4619      	mov	r1, r3
 80009d0:	2035      	movs	r0, #53	; 0x35
 80009d2:	f7ff ff6b 	bl	80008ac <read_status_reg>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	marcstate1 = marcstate1 & 0x1F;
 80009dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80009e0:	f003 031f 	and.w	r3, r3, #31
 80009e4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

	//statusByte = command_strobe(SRX);			// Prebaci iz IDLE stanja u RX stanje
	//delay_6_25ns(2000);							// Vrijeme potrebno za tranziciju IDLE->RX + RX->IDLE
	//HAL_Delay(2000);				// Pošto je brzina 1.2kBaud, cca. 5 sekundi treba za +/-10 byte-a podataka.

	command_strobe(SRX);			// Prebaci iz IDLE stanja u RX stanje
 80009e8:	2034      	movs	r0, #52	; 0x34
 80009ea:	f7ff ff2b 	bl	8000844 <command_strobe>
	delay_6_25ns(2000);					// Vrijeme potrebno za tranziciju IDLE->RX + RX->IDLE
 80009ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009f2:	f000 fe9b 	bl	800172c <delay_6_25ns>

	while(num_rxBytes < 5)
 80009f6:	e038      	b.n	8000a6a <receive_burst_byte_433+0x116>
	{

		num_rxBytes2 = read_status_reg(RXBYTES, &statusRXByte3);
 80009f8:	f107 0309 	add.w	r3, r7, #9
 80009fc:	4619      	mov	r1, r3
 80009fe:	203b      	movs	r0, #59	; 0x3b
 8000a00:	f7ff ff54 	bl	80008ac <read_status_reg>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		rxfifo_OF2 = num_rxBytes2 & 0x80;
 8000a0a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000a0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a12:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		num_rxBytes2 = num_rxBytes2 & 0x7F;
 8000a16:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a1e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		num_rxBytes = num_rxBytes2;
 8000a22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		marcstate2 = read_status_reg(MARCSTATE, &statusRXByte4);
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	4619      	mov	r1, r3
 8000a30:	2035      	movs	r0, #53	; 0x35
 8000a32:	f7ff ff3b 	bl	80008ac <read_status_reg>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		marcstate2 = marcstate2 & 0x1F;
 8000a3c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		if(num_rxBytes>=2)
 8000a48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d90c      	bls.n	8000a6a <receive_burst_byte_433+0x116>
		{
			read_burst_byte(RX_FIFO, &statusByte, rxData, num_rxBytes);	//Napuni TX FIFO
 8000a50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a54:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000a58:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f000 f959 	bl	8000d14 <read_burst_byte>
			delay_6_25ns(1000);					// Vrijeme potrebno za tranziciju IDLE->RX + RX->IDLE
 8000a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a66:	f000 fe61 	bl	800172c <delay_6_25ns>
	while(num_rxBytes < 5)
 8000a6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d9c2      	bls.n	80009f8 <receive_burst_byte_433+0xa4>

		}
	}

	command_strobe(SIDLE);			// IDLE
 8000a72:	2036      	movs	r0, #54	; 0x36
 8000a74:	f7ff fee6 	bl	8000844 <command_strobe>
	HAL_Delay(1000);
 8000a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7c:	f000 ff4e 	bl	800191c <HAL_Delay>
	command_strobe(SFRX);			// Flush RX FIFO
 8000a80:	203a      	movs	r0, #58	; 0x3a
 8000a82:	f7ff fedf 	bl	8000844 <command_strobe>
	HAL_Delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f000 ff47 	bl	800191c <HAL_Delay>

	sprintf(status_message, "RXBYTES ChipStatus before: 0x%02X\r\n", statusRXByte1);
 8000a8e:	7afb      	ldrb	r3, [r7, #11]
 8000a90:	461a      	mov	r2, r3
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4971      	ldr	r1, [pc, #452]	; (8000c5c <receive_burst_byte_433+0x308>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 fbfb 	bl	8004294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fbb4 	bl	8000210 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	f107 010c 	add.w	r1, r7, #12
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	4868      	ldr	r0, [pc, #416]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000ab6:	f003 f844 	bl	8003b42 <HAL_UART_Transmit>

	sprintf(status_message, "RXFIFO OVERFLOW before: 0x%02X\r\n", rxfifo_OF1);
 8000aba:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4967      	ldr	r1, [pc, #412]	; (8000c60 <receive_burst_byte_433+0x30c>)
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 fbe5 	bl	8004294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fb9e 	bl	8000210 <strlen>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f107 010c 	add.w	r1, r7, #12
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	485d      	ldr	r0, [pc, #372]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000ae2:	f003 f82e 	bl	8003b42 <HAL_UART_Transmit>

	sprintf(status_message, "No. RXBYTES before: %d\r\n", num_rxBytes1);
 8000ae6:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	495d      	ldr	r1, [pc, #372]	; (8000c64 <receive_burst_byte_433+0x310>)
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 fbcf 	bl	8004294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fb88 	bl	8000210 <strlen>
 8000b00:	4603      	mov	r3, r0
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	f107 010c 	add.w	r1, r7, #12
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	4852      	ldr	r0, [pc, #328]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000b0e:	f003 f818 	bl	8003b42 <HAL_UART_Transmit>


	sprintf(status_message, "MARCSTATE before: 0x%02X\r\n", marcstate1);
 8000b12:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4953      	ldr	r1, [pc, #332]	; (8000c68 <receive_burst_byte_433+0x314>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fbb9 	bl	8004294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fb72 	bl	8000210 <strlen>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	f107 010c 	add.w	r1, r7, #12
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
 8000b38:	4847      	ldr	r0, [pc, #284]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000b3a:	f003 f802 	bl	8003b42 <HAL_UART_Transmit>

	sprintf(status_message, "MARCSTATE ChipStatus before: 0x%02X\r\n", statusRXByte2);
 8000b3e:	7abb      	ldrb	r3, [r7, #10]
 8000b40:	461a      	mov	r2, r3
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4949      	ldr	r1, [pc, #292]	; (8000c6c <receive_burst_byte_433+0x318>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fba3 	bl	8004294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fb5c 	bl	8000210 <strlen>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	f107 010c 	add.w	r1, r7, #12
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	483c      	ldr	r0, [pc, #240]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000b66:	f002 ffec 	bl	8003b42 <HAL_UART_Transmit>


	sprintf(status_message, "No. RXBYTES after: %d\r\n", num_rxBytes2);
 8000b6a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	493f      	ldr	r1, [pc, #252]	; (8000c70 <receive_burst_byte_433+0x31c>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 fb8d 	bl	8004294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb46 	bl	8000210 <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	f107 010c 	add.w	r1, r7, #12
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	4831      	ldr	r0, [pc, #196]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000b92:	f002 ffd6 	bl	8003b42 <HAL_UART_Transmit>

	sprintf(status_message, "RXFIFO OVERFLOW after: 0x%02X\r\n", rxfifo_OF2);
 8000b96:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4935      	ldr	r1, [pc, #212]	; (8000c74 <receive_burst_byte_433+0x320>)
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fb77 	bl	8004294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fb30 	bl	8000210 <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	f107 010c 	add.w	r1, r7, #12
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	4826      	ldr	r0, [pc, #152]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000bbe:	f002 ffc0 	bl	8003b42 <HAL_UART_Transmit>

	sprintf(status_message, "RXBYTES ChipStatus after: 0x%02X\r\n", statusRXByte3);
 8000bc2:	7a7b      	ldrb	r3, [r7, #9]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	492b      	ldr	r1, [pc, #172]	; (8000c78 <receive_burst_byte_433+0x324>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 fb61 	bl	8004294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fb1a 	bl	8000210 <strlen>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	f107 010c 	add.w	r1, r7, #12
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	481b      	ldr	r0, [pc, #108]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000bea:	f002 ffaa 	bl	8003b42 <HAL_UART_Transmit>

	sprintf(status_message, "MARCSTATE after: 0x%02X\r\n", marcstate2);
 8000bee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	4921      	ldr	r1, [pc, #132]	; (8000c7c <receive_burst_byte_433+0x328>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fb4b 	bl	8004294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fb04 	bl	8000210 <strlen>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f107 010c 	add.w	r1, r7, #12
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000c16:	f002 ff94 	bl	8003b42 <HAL_UART_Transmit>

	sprintf(status_message, "MARCSTATE ChipStatus after: 0x%02X\r\n", statusRXByte4);
 8000c1a:	7a3b      	ldrb	r3, [r7, #8]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4917      	ldr	r1, [pc, #92]	; (8000c80 <receive_burst_byte_433+0x32c>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fb35 	bl	8004294 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff faee 	bl	8000210 <strlen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	f107 010c 	add.w	r1, r7, #12
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <receive_burst_byte_433+0x304>)
 8000c42:	f002 ff7e 	bl	8003b42 <HAL_UART_Transmit>

	return num_rxBytes;
 8000c46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3748      	adds	r7, #72	; 0x48
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	08004c00 	.word	0x08004c00
 8000c58:	20000164 	.word	0x20000164
 8000c5c:	08004c1c 	.word	0x08004c1c
 8000c60:	08004c40 	.word	0x08004c40
 8000c64:	08004c64 	.word	0x08004c64
 8000c68:	08004c80 	.word	0x08004c80
 8000c6c:	08004c9c 	.word	0x08004c9c
 8000c70:	08004cc4 	.word	0x08004cc4
 8000c74:	08004cdc 	.word	0x08004cdc
 8000c78:	08004cfc 	.word	0x08004cfc
 8000c7c:	08004d20 	.word	0x08004d20
 8000c80:	08004d3c 	.word	0x08004d3c

08000c84 <write_single_byte>:

	return dataRx;
}

uint8_t write_single_byte(uint8_t addr, uint8_t txData)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	4613      	mov	r3, r2
 8000c92:	71bb      	strb	r3, [r7, #6]
	uint8_t statusByte;
	uint8_t txAddr = addr | single_byte_write;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	733b      	strb	r3, [r7, #12]
	uint8_t dataTx = txData;
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef SPI_status1,SPI_status2;

	SPI_CS_WRITE(0);
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fc8d 	bl	80005bc <SPI_CS_WRITE>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 8000ca2:	bf00      	nop
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	4819      	ldr	r0, [pc, #100]	; (8000d0c <write_single_byte+0x88>)
 8000ca8:	f001 f8d2 	bl	8001e50 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1f8      	bne.n	8000ca4 <write_single_byte+0x20>
	SPI_status1 = HAL_SPI_TransmitReceive(&hspi2, &txAddr, &statusByte, 1, HAL_MAX_DELAY);
 8000cb2:	f107 020d 	add.w	r2, r7, #13
 8000cb6:	f107 010c 	add.w	r1, r7, #12
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	4813      	ldr	r0, [pc, #76]	; (8000d10 <write_single_byte+0x8c>)
 8000cc4:	f001 ff99 	bl	8002bfa <HAL_SPI_TransmitReceive>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]
	delay_6_25ns(16);		//delay od 100ns
 8000ccc:	2010      	movs	r0, #16
 8000cce:	f000 fd2d 	bl	800172c <delay_6_25ns>
	SPI_status2 = HAL_SPI_TransmitReceive(&hspi2, &dataTx, &statusByte, 1, HAL_MAX_DELAY);
 8000cd2:	f107 020d 	add.w	r2, r7, #13
 8000cd6:	f107 010b 	add.w	r1, r7, #11
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <write_single_byte+0x8c>)
 8000ce4:	f001 ff89 	bl	8002bfa <HAL_SPI_TransmitReceive>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73bb      	strb	r3, [r7, #14]
	SPI_CS_WRITE(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff fc65 	bl	80005bc <SPI_CS_WRITE>

	hal_status(SPI_status1);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f8b7 	bl	8000e68 <hal_status>
	hal_status(SPI_status2);
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f8b3 	bl	8000e68 <hal_status>

	return statusByte;
 8000d02:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40020800 	.word	0x40020800
 8000d10:	20000078 	.word	0x20000078

08000d14 <read_burst_byte>:

void read_burst_byte(uint8_t startAddr, uint8_t *statusByte, uint8_t *rxData, uint8_t len)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0a4      	sub	sp, #144	; 0x90
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	4613      	mov	r3, r2
 8000d26:	73bb      	strb	r3, [r7, #14]
	char status_message[100];
	uint8_t txDummy = 0x01;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef SPI_status,SPI_status1;

	if(startAddr <= 0x2F || startAddr == 0x3E || startAddr == 0x3F)
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	2b2f      	cmp	r3, #47	; 0x2f
 8000d30:	d905      	bls.n	8000d3e <read_burst_byte+0x2a>
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	2b3e      	cmp	r3, #62	; 0x3e
 8000d36:	d002      	beq.n	8000d3e <read_burst_byte+0x2a>
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d3c:	d153      	bne.n	8000de6 <read_burst_byte+0xd2>
	{
		uint8_t addr = startAddr | burst_byte_read;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	75bb      	strb	r3, [r7, #22]

		SPI_CS_WRITE(0);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff fc37 	bl	80005bc <SPI_CS_WRITE>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 8000d4e:	bf00      	nop
 8000d50:	2104      	movs	r1, #4
 8000d52:	4841      	ldr	r0, [pc, #260]	; (8000e58 <read_burst_byte+0x144>)
 8000d54:	f001 f87c 	bl	8001e50 <HAL_GPIO_ReadPin>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f8      	bne.n	8000d50 <read_burst_byte+0x3c>
		SPI_status = HAL_SPI_TransmitReceive(&hspi2, &addr, statusByte, 1, HAL_MAX_DELAY);
 8000d5e:	f107 0116 	add.w	r1, r7, #22
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	483b      	ldr	r0, [pc, #236]	; (8000e5c <read_burst_byte+0x148>)
 8000d6e:	f001 ff44 	bl	8002bfa <HAL_SPI_TransmitReceive>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		delay_6_25ns(16);		//delay od 100ns
 8000d78:	2010      	movs	r0, #16
 8000d7a:	f000 fcd7 	bl	800172c <delay_6_25ns>
		if(len>64)
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	2b40      	cmp	r3, #64	; 0x40
 8000d82:	d901      	bls.n	8000d88 <read_burst_byte+0x74>
		{
			len=64;
 8000d84:	2340      	movs	r3, #64	; 0x40
 8000d86:	73bb      	strb	r3, [r7, #14]
		}
		for(int i=0; i < len; i++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d8e:	e021      	b.n	8000dd4 <read_burst_byte+0xc0>
		{
			SPI_status1 = HAL_SPI_TransmitReceive(&hspi2, &txDummy, &rxData[i], 1, HAL_MAX_DELAY);
 8000d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	441a      	add	r2, r3
 8000d98:	f107 0117 	add.w	r1, r7, #23
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	482d      	ldr	r0, [pc, #180]	; (8000e5c <read_burst_byte+0x148>)
 8000da6:	f001 ff28 	bl	8002bfa <HAL_SPI_TransmitReceive>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			if(i<(len-1))
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000db8:	429a      	cmp	r2, r3
 8000dba:	da03      	bge.n	8000dc4 <read_burst_byte+0xb0>
			{
				delay_6_25ns(16);		//delay od 100ns, cc1101 datasheet pg.30
 8000dbc:	2010      	movs	r0, #16
 8000dbe:	f000 fcb5 	bl	800172c <delay_6_25ns>
 8000dc2:	e002      	b.n	8000dca <read_burst_byte+0xb6>
			}
			else
			{
				delay_6_25ns(4);		//delay od 25ns
 8000dc4:	2004      	movs	r0, #4
 8000dc6:	f000 fcb1 	bl	800172c <delay_6_25ns>
		for(int i=0; i < len; i++)
 8000dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000dce:	3301      	adds	r3, #1
 8000dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000dd4:	7bbb      	ldrb	r3, [r7, #14]
 8000dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dbd8      	blt.n	8000d90 <read_burst_byte+0x7c>
			}
		}
		SPI_CS_WRITE(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff fbec 	bl	80005bc <SPI_CS_WRITE>
	{
 8000de4:	e002      	b.n	8000dec <read_burst_byte+0xd8>
	}
	else
	{
		*statusByte = 1;		// Error: 1, oznacava da je start addr u krivom rasponu
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
	}


	// UART PRINTOUT DEBUG
	if(len>64)
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	2b40      	cmp	r3, #64	; 0x40
 8000df0:	d924      	bls.n	8000e3c <read_burst_byte+0x128>
	{
		len=64;
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	73bb      	strb	r3, [r7, #14]
		for(int i=0; i < len; i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000dfa:	e01b      	b.n	8000e34 <read_burst_byte+0x120>
		{
			sprintf(status_message, "rxData: 0x%02X\r\n", rxData[i]);
 8000dfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	4915      	ldr	r1, [pc, #84]	; (8000e60 <read_burst_byte+0x14c>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 fa41 	bl	8004294 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000e12:	f107 0318 	add.w	r3, r7, #24
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff f9fa 	bl	8000210 <strlen>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	f107 0118 	add.w	r1, r7, #24
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
 8000e28:	480e      	ldr	r0, [pc, #56]	; (8000e64 <read_burst_byte+0x150>)
 8000e2a:	f002 fe8a 	bl	8003b42 <HAL_UART_Transmit>
		for(int i=0; i < len; i++)
 8000e2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e30:	3301      	adds	r3, #1
 8000e32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbdf      	blt.n	8000dfc <read_burst_byte+0xe8>
		}
	}
	hal_status(SPI_status);
 8000e3c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f811 	bl	8000e68 <hal_status>
	hal_status(SPI_status1);
 8000e46:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f80c 	bl	8000e68 <hal_status>

}
 8000e50:	bf00      	nop
 8000e52:	3788      	adds	r7, #136	; 0x88
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	20000078 	.word	0x20000078
 8000e60:	08004d64 	.word	0x08004d64
 8000e64:	20000164 	.word	0x20000164

08000e68 <hal_status>:
	hal_status(SPI_status);
	hal_status(SPI_status1);
}

void hal_status(HAL_StatusTypeDef SPIstatus)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b090      	sub	sp, #64	; 0x40
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	char status_message[50];
	switch(SPIstatus)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d827      	bhi.n	8000ec8 <hal_status+0x60>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <hal_status+0x18>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000e9f 	.word	0x08000e9f
 8000e88:	08000ead 	.word	0x08000ead
 8000e8c:	08000ebb 	.word	0x08000ebb
		{
			case HAL_OK:
				sprintf(status_message, "HAL OK.\r\n");
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <hal_status+0x68>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 f9fc 	bl	8004294 <siprintf>
				break;
 8000e9c:	e014      	b.n	8000ec8 <hal_status+0x60>
			case HAL_ERROR:
				sprintf(status_message, "HAL ERROR.\r\n");
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <hal_status+0x6c>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 f9f5 	bl	8004294 <siprintf>
				break;
 8000eaa:	e00d      	b.n	8000ec8 <hal_status+0x60>
			case HAL_BUSY:
				sprintf(status_message, "HAL BUSY.\r\n");
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4909      	ldr	r1, [pc, #36]	; (8000ed8 <hal_status+0x70>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 f9ee 	bl	8004294 <siprintf>
				break;
 8000eb8:	e006      	b.n	8000ec8 <hal_status+0x60>
			case HAL_TIMEOUT:
				sprintf(status_message, "HAL TIMEOUT.\r\n");
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	4907      	ldr	r1, [pc, #28]	; (8000edc <hal_status+0x74>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f003 f9e7 	bl	8004294 <siprintf>
				break;
 8000ec6:	bf00      	nop
		}
	//HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
}
 8000ec8:	bf00      	nop
 8000eca:	3740      	adds	r7, #64	; 0x40
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	08004d8c 	.word	0x08004d8c
 8000ed4:	08004d98 	.word	0x08004d98
 8000ed8:	08004da8 	.word	0x08004da8
 8000edc:	08004db4 	.word	0x08004db4

08000ee0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a36      	ldr	r2, [pc, #216]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_GPIO_Init+0xf8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2120      	movs	r1, #32
 8000f6a:	481c      	ldr	r0, [pc, #112]	; (8000fdc <MX_GPIO_Init+0xfc>)
 8000f6c:	f000 ff88 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2120      	movs	r1, #32
 8000f74:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <MX_GPIO_Init+0x100>)
 8000f76:	f000 ff83 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f80:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4814      	ldr	r0, [pc, #80]	; (8000fe4 <MX_GPIO_Init+0x104>)
 8000f92:	f000 fdc9 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f96:	2320      	movs	r3, #32
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <MX_GPIO_Init+0xfc>)
 8000fae:	f000 fdbb 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_GPIO_Init+0x100>)
 8000fca:	f000 fdad 	bl	8001b28 <HAL_GPIO_Init>

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0a4      	sub	sp, #144	; 0x90
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fc53 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f8d5 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f7ff ff73 	bl	8000ee0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000ffa:	f000 f955 	bl	80012a8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ffe:	f000 fb23 	bl	8001648 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001002:	f000 fbad 	bl	8001760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001006:	485f      	ldr	r0, [pc, #380]	; (8001184 <main+0x19c>)
 8001008:	f002 f8b4 	bl	8003174 <HAL_TIM_Base_Start>

//  uint8_t cnt = 0;
  uint8_t rxData[64];
  uint8_t status = 0x77;
 800100c:	2377      	movs	r3, #119	; 0x77
 800100e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint8_t RXBytesStatus;
  uint8_t numRXbytes;
  char serialStatus[50];
  char aTxBuffer[] = "ovdje1\r\n";
 8001012:	4a5d      	ldr	r2, [pc, #372]	; (8001188 <main+0x1a0>)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	ca07      	ldmia	r2, {r0, r1, r2}
 8001018:	c303      	stmia	r3!, {r0, r1}
 800101a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)aTxBuffer, strlen(aTxBuffer), HAL_MAX_DELAY);
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f8f6 	bl	8000210 <strlen>
 8001024:	4603      	mov	r3, r0
 8001026:	b29a      	uxth	r2, r3
 8001028:	1d39      	adds	r1, r7, #4
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	4857      	ldr	r0, [pc, #348]	; (800118c <main+0x1a4>)
 8001030:	f002 fd87 	bl	8003b42 <HAL_UART_Transmit>
  manual_POR();
 8001034:	f7ff fadc 	bl	80005f0 <manual_POR>
  cc1101_init(0);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff fb1b 	bl	8000674 <cc1101_init>

  status = command_strobe(SNOP);
 800103e:	203d      	movs	r0, #61	; 0x3d
 8001040:	f7ff fc00 	bl	8000844 <command_strobe>
 8001044:	4603      	mov	r3, r0
 8001046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  snprintf(serialStatus, sizeof(serialStatus), "0x%02X\r\n", status);
 800104a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800104e:	f107 0010 	add.w	r0, r7, #16
 8001052:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <main+0x1a8>)
 8001054:	2132      	movs	r1, #50	; 0x32
 8001056:	f003 f8e9 	bl	800422c <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f8d6 	bl	8000210 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	f107 0110 	add.w	r1, r7, #16
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	4846      	ldr	r0, [pc, #280]	; (800118c <main+0x1a4>)
 8001072:	f002 fd66 	bl	8003b42 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  char aTxBuffer[32];
//	  HAL_UART_Transmit(&huart2, (uint8_t*)aTxBuffer, strlen(aTxBuffer), HAL_MAX_DELAY);
	  HAL_Delay(2000);
 8001076:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800107a:	f000 fc4f 	bl	800191c <HAL_Delay>
	  RXBytesStatus = read_status_reg(RXBYTES, &status);
 800107e:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8001082:	4619      	mov	r1, r3
 8001084:	203b      	movs	r0, #59	; 0x3b
 8001086:	f7ff fc11 	bl	80008ac <read_status_reg>
 800108a:	4603      	mov	r3, r0
 800108c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  snprintf(serialStatus, sizeof(serialStatus), "RXBYTES_before: 0x%02X\r\n", RXBytesStatus);
 8001090:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001094:	f107 0010 	add.w	r0, r7, #16
 8001098:	4a3e      	ldr	r2, [pc, #248]	; (8001194 <main+0x1ac>)
 800109a:	2132      	movs	r1, #50	; 0x32
 800109c:	f003 f8c6 	bl	800422c <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f8b3 	bl	8000210 <strlen>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	f107 0110 	add.w	r1, r7, #16
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	4835      	ldr	r0, [pc, #212]	; (800118c <main+0x1a4>)
 80010b8:	f002 fd43 	bl	8003b42 <HAL_UART_Transmit>

	  for(int i=0; i < 64; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80010c2:	e00b      	b.n	80010dc <main+0xf4>
	  {
		  rxData[i]=0;
 80010c4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80010c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010cc:	4413      	add	r3, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i < 64; i++)
 80010d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010d6:	3301      	adds	r3, #1
 80010d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80010dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010e0:	2b3f      	cmp	r3, #63	; 0x3f
 80010e2:	ddef      	ble.n	80010c4 <main+0xdc>
	  }

	  numRXbytes = receive_burst_byte_433(rxData);
 80010e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fc33 	bl	8000954 <receive_burst_byte_433>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	  for(int i=0; i < 64; i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010fa:	e01f      	b.n	800113c <main+0x154>
	  {
		  sprintf(serialStatus, "RXDATA[%d]: 0x%02X\r\n", i,rxData[i]);
 80010fc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	f107 0010 	add.w	r0, r7, #16
 800110c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001110:	4921      	ldr	r1, [pc, #132]	; (8001198 <main+0x1b0>)
 8001112:	f003 f8bf 	bl	8004294 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f878 	bl	8000210 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	f107 0110 	add.w	r1, r7, #16
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	4817      	ldr	r0, [pc, #92]	; (800118c <main+0x1a4>)
 800112e:	f002 fd08 	bl	8003b42 <HAL_UART_Transmit>
	  for(int i=0; i < 64; i++)
 8001132:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001136:	3301      	adds	r3, #1
 8001138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800113c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001140:	2b3f      	cmp	r3, #63	; 0x3f
 8001142:	dddb      	ble.n	80010fc <main+0x114>
	  }

	  RXBytesStatus = read_status_reg(RXBYTES, &status);
 8001144:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8001148:	4619      	mov	r1, r3
 800114a:	203b      	movs	r0, #59	; 0x3b
 800114c:	f7ff fbae 	bl	80008ac <read_status_reg>
 8001150:	4603      	mov	r3, r0
 8001152:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  snprintf(serialStatus, sizeof(serialStatus), "RXBYTES_after: 0x%02X\r\n", RXBytesStatus);
 8001156:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800115a:	f107 0010 	add.w	r0, r7, #16
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <main+0x1b4>)
 8001160:	2132      	movs	r1, #50	; 0x32
 8001162:	f003 f863 	bl	800422c <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f850 	bl	8000210 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f107 0110 	add.w	r1, r7, #16
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <main+0x1a4>)
 800117e:	f002 fce0 	bl	8003b42 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001182:	e778      	b.n	8001076 <main+0x8e>
 8001184:	2000011c 	.word	0x2000011c
 8001188:	08004ec4 	.word	0x08004ec4
 800118c:	20000164 	.word	0x20000164
 8001190:	08004e6c 	.word	0x08004e6c
 8001194:	08004e78 	.word	0x08004e78
 8001198:	08004e94 	.word	0x08004e94
 800119c:	08004eac 	.word	0x08004eac

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	; 0x50
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2234      	movs	r2, #52	; 0x34
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 f890 	bl	80042d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <SystemClock_Config+0xd0>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a28      	ldr	r2, [pc, #160]	; (8001270 <SystemClock_Config+0xd0>)
 80011ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <SystemClock_Config+0xd0>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <SystemClock_Config+0xd4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a22      	ldr	r2, [pc, #136]	; (8001274 <SystemClock_Config+0xd4>)
 80011ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <SystemClock_Config+0xd4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001200:	2301      	movs	r3, #1
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001204:	2310      	movs	r3, #16
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2302      	movs	r3, #2
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001210:	2308      	movs	r3, #8
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001214:	23a0      	movs	r3, #160	; 0xa0
 8001216:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001218:	2302      	movs	r3, #2
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4618      	mov	r0, r3
 800122a:	f001 f9bf 	bl	80025ac <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001234:	f000 f832 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123c:	2302      	movs	r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001244:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001248:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2105      	movs	r1, #5
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe2c 	bl	8001eb4 <HAL_RCC_ClockConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001262:	f000 f81b 	bl	800129c <Error_Handler>
  }
}
 8001266:	bf00      	nop
 8001268:	3750      	adds	r7, #80	; 0x50
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800128a:	f000 fb27 	bl	80018dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40001000 	.word	0x40001000

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x8>
	...

080012a8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_SPI2_Init+0x64>)
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <MX_SPI2_Init+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_SPI2_Init+0x64>)
 80012b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_SPI2_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_SPI2_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_SPI2_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_SPI2_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_SPI2_Init+0x64>)
 80012d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_SPI2_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <MX_SPI2_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_SPI2_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_SPI2_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_SPI2_Init+0x64>)
 80012f4:	220a      	movs	r2, #10
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_SPI2_Init+0x64>)
 80012fa:	f001 fbf5 	bl	8002ae8 <HAL_SPI_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001304:	f7ff ffca 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000078 	.word	0x20000078
 8001310:	40003800 	.word	0x40003800

08001314 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <HAL_SPI_MspInit+0xe0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d15a      	bne.n	80013ec <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <HAL_SPI_MspInit+0xe4>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <HAL_SPI_MspInit+0xe4>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_SPI_MspInit+0xe4>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <HAL_SPI_MspInit+0xe4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <HAL_SPI_MspInit+0xe4>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <HAL_SPI_MspInit+0xe4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <HAL_SPI_MspInit+0xe4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <HAL_SPI_MspInit+0xe4>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <HAL_SPI_MspInit+0xe4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800138a:	2302      	movs	r3, #2
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800139a:	2307      	movs	r3, #7
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4815      	ldr	r0, [pc, #84]	; (80013fc <HAL_SPI_MspInit+0xe8>)
 80013a6:	f000 fbbf 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013aa:	2304      	movs	r3, #4
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ba:	2305      	movs	r3, #5
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <HAL_SPI_MspInit+0xe8>)
 80013c6:	f000 fbaf 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013dc:	2305      	movs	r3, #5
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <HAL_SPI_MspInit+0xec>)
 80013e8:	f000 fb9e 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40003800 	.word	0x40003800
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020400 	.word	0x40020400

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_MspInit+0x4c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <HAL_MspInit+0x4c>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_MspInit+0x4c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_MspInit+0x4c>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001442:	2007      	movs	r0, #7
 8001444:	f000 fb3b 	bl	8001abe <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_InitTick+0xe4>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a32      	ldr	r2, [pc, #200]	; (8001538 <HAL_InitTick+0xe4>)
 800146e:	f043 0310 	orr.w	r3, r3, #16
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <HAL_InitTick+0xe4>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001480:	f107 0210 	add.w	r2, r7, #16
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fe2c 	bl	80020e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800149a:	f000 fdfd 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 800149e:	6378      	str	r0, [r7, #52]	; 0x34
 80014a0:	e004      	b.n	80014ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014a2:	f000 fdf9 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 80014a6:	4603      	mov	r3, r0
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ae:	4a23      	ldr	r2, [pc, #140]	; (800153c <HAL_InitTick+0xe8>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	0c9b      	lsrs	r3, r3, #18
 80014b6:	3b01      	subs	r3, #1
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_InitTick+0xec>)
 80014bc:	4a21      	ldr	r2, [pc, #132]	; (8001544 <HAL_InitTick+0xf0>)
 80014be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <HAL_InitTick+0xec>)
 80014c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_InitTick+0xec>)
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_InitTick+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_InitTick+0xec>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_InitTick+0xec>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014e0:	4817      	ldr	r0, [pc, #92]	; (8001540 <HAL_InitTick+0xec>)
 80014e2:	f001 fdf7 	bl	80030d4 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d11b      	bne.n	800152c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014f4:	4812      	ldr	r0, [pc, #72]	; (8001540 <HAL_InitTick+0xec>)
 80014f6:	f001 fea5 	bl	8003244 <HAL_TIM_Base_Start_IT>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001500:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001504:	2b00      	cmp	r3, #0
 8001506:	d111      	bne.n	800152c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001508:	2036      	movs	r0, #54	; 0x36
 800150a:	f000 faff 	bl	8001b0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d808      	bhi.n	8001526 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2036      	movs	r0, #54	; 0x36
 800151a:	f000 fadb 	bl	8001ad4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_InitTick+0xf4>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e002      	b.n	800152c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800152c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001530:	4618      	mov	r0, r3
 8001532:	3738      	adds	r7, #56	; 0x38
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	431bde83 	.word	0x431bde83
 8001540:	200000d0 	.word	0x200000d0
 8001544:	40001000 	.word	0x40001000
 8001548:	20000004 	.word	0x20000004

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM6_DAC_IRQHandler+0x10>)
 80015aa:	f001 febb 	bl	8003324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200000d0 	.word	0x200000d0

080015b8 <_sbrk>:
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
 80015e8:	f002 fe7c 	bl	80042e4 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20020000 	.word	0x20020000
 8001618:	00000400 	.word	0x00000400
 800161c:	20000118 	.word	0x20000118
 8001620:	200002f8 	.word	0x200002f8

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <MX_TIM1_Init+0x98>)
 8001666:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <MX_TIM1_Init+0x9c>)
 8001668:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_TIM1_Init+0x98>)
 800166c:	229f      	movs	r2, #159	; 0x9f
 800166e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_TIM1_Init+0x98>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_TIM1_Init+0x98>)
 8001678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_TIM1_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_TIM1_Init+0x98>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_TIM1_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <MX_TIM1_Init+0x98>)
 8001692:	f001 fd1f 	bl	80030d4 <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800169c:	f7ff fdfe 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <MX_TIM1_Init+0x98>)
 80016ae:	f001 ff41 	bl	8003534 <HAL_TIM_ConfigClockSource>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016b8:	f7ff fdf0 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_TIM1_Init+0x98>)
 80016ca:	f002 f95d 	bl	8003988 <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016d4:	f7ff fde2 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000011c 	.word	0x2000011c
 80016e4:	40010000 	.word	0x40010000

080016e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_TIM_Base_MspInit+0x3c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d10d      	bne.n	8001716 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_TIM_Base_MspInit+0x40>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <HAL_TIM_Base_MspInit+0x40>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_TIM_Base_MspInit+0x40>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40010000 	.word	0x40010000
 8001728:	40023800 	.word	0x40023800

0800172c <delay_6_25ns>:
}

/* USER CODE BEGIN 1 */

void delay_6_25ns(uint16_t ns)			// Zbog clock postavki svaki count up je 1us
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);			// Postavi counter vrijednost na 0
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <delay_6_25ns+0x30>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < ns);	// Cekaj dok se izbroji do te vrijednosti
 800173e:	bf00      	nop
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <delay_6_25ns+0x30>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	429a      	cmp	r2, r3
 800174a:	d3f9      	bcc.n	8001740 <delay_6_25ns+0x14>
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000011c 	.word	0x2000011c

08001760 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f002 f986 	bl	8003aa8 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f7ff fd7b 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000164 	.word	0x20000164
 80017b0:	40004400 	.word	0x40004400

080017b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_UART_MspInit+0x84>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12b      	bne.n	800182e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_UART_MspInit+0x88>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_UART_MspInit+0x88>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_UART_MspInit+0x88>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_UART_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_UART_MspInit+0x88>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_UART_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800180e:	230c      	movs	r3, #12
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800181e:	2307      	movs	r3, #7
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_UART_MspInit+0x8c>)
 800182a:	f000 f97d 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40004400 	.word	0x40004400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <Reset_Handler>:
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800187c <LoopFillZerobss+0x12>
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <LoopFillZerobss+0x16>)
 800184a:	490e      	ldr	r1, [pc, #56]	; (8001884 <LoopFillZerobss+0x1a>)
 800184c:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <LoopFillZerobss+0x1e>)
 800184e:	2300      	movs	r3, #0
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:
 8001852:	58d4      	ldr	r4, [r2, r3]
 8001854:	50c4      	str	r4, [r0, r3]
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:
 8001858:	18c4      	adds	r4, r0, r3
 800185a:	428c      	cmp	r4, r1
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <LoopFillZerobss+0x22>)
 8001860:	4c0b      	ldr	r4, [pc, #44]	; (8001890 <LoopFillZerobss+0x26>)
 8001862:	2300      	movs	r3, #0
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:
 800186a:	42a2      	cmp	r2, r4
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>
 800186e:	f7ff fed9 	bl	8001624 <SystemInit>
 8001872:	f002 fd3d 	bl	80042f0 <__libc_init_array>
 8001876:	f7ff fbb7 	bl	8000fe8 <main>
 800187a:	4770      	bx	lr
 800187c:	20020000 	.word	0x20020000
 8001880:	20000000 	.word	0x20000000
 8001884:	2000005c 	.word	0x2000005c
 8001888:	08004f2c 	.word	0x08004f2c
 800188c:	2000005c 	.word	0x2000005c
 8001890:	200002f4 	.word	0x200002f4

08001894 <ADC_IRQHandler>:
 8001894:	e7fe      	b.n	8001894 <ADC_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_Init+0x40>)
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_Init+0x40>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x40>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 f8fc 	bl	8001abe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff fdc4 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fd9a 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008
 8001900:	200001a8 	.word	0x200001a8

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200001a8 	.word	0x200001a8

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff4c 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae6:	f7ff ff61 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001aea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	6978      	ldr	r0, [r7, #20]
 8001af2:	f7ff ffb1 	bl	8001a58 <NVIC_EncodePriority>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff80 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff54 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e165      	b.n	8001e10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8154 	bne.w	8001e0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d005      	beq.n	8001b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d130      	bne.n	8001bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 0201 	and.w	r2, r3, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d017      	beq.n	8001c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80ae 	beq.w	8001e0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_GPIO_Init+0x300>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	; (8001e28 <HAL_GPIO_Init+0x300>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <HAL_GPIO_Init+0x300>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cca:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4f      	ldr	r2, [pc, #316]	; (8001e30 <HAL_GPIO_Init+0x308>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d025      	beq.n	8001d42 <HAL_GPIO_Init+0x21a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4e      	ldr	r2, [pc, #312]	; (8001e34 <HAL_GPIO_Init+0x30c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d01f      	beq.n	8001d3e <HAL_GPIO_Init+0x216>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4d      	ldr	r2, [pc, #308]	; (8001e38 <HAL_GPIO_Init+0x310>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d019      	beq.n	8001d3a <HAL_GPIO_Init+0x212>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4c      	ldr	r2, [pc, #304]	; (8001e3c <HAL_GPIO_Init+0x314>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d013      	beq.n	8001d36 <HAL_GPIO_Init+0x20e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4b      	ldr	r2, [pc, #300]	; (8001e40 <HAL_GPIO_Init+0x318>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00d      	beq.n	8001d32 <HAL_GPIO_Init+0x20a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4a      	ldr	r2, [pc, #296]	; (8001e44 <HAL_GPIO_Init+0x31c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d007      	beq.n	8001d2e <HAL_GPIO_Init+0x206>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a49      	ldr	r2, [pc, #292]	; (8001e48 <HAL_GPIO_Init+0x320>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_GPIO_Init+0x202>
 8001d26:	2306      	movs	r3, #6
 8001d28:	e00c      	b.n	8001d44 <HAL_GPIO_Init+0x21c>
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	e00a      	b.n	8001d44 <HAL_GPIO_Init+0x21c>
 8001d2e:	2305      	movs	r3, #5
 8001d30:	e008      	b.n	8001d44 <HAL_GPIO_Init+0x21c>
 8001d32:	2304      	movs	r3, #4
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x21c>
 8001d36:	2303      	movs	r3, #3
 8001d38:	e004      	b.n	8001d44 <HAL_GPIO_Init+0x21c>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e002      	b.n	8001d44 <HAL_GPIO_Init+0x21c>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_GPIO_Init+0x21c>
 8001d42:	2300      	movs	r3, #0
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	f002 0203 	and.w	r2, r2, #3
 8001d4a:	0092      	lsls	r2, r2, #2
 8001d4c:	4093      	lsls	r3, r2
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d54:	4935      	ldr	r1, [pc, #212]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d86:	4a31      	ldr	r2, [pc, #196]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db0:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dda:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e04:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <HAL_GPIO_Init+0x324>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b0f      	cmp	r3, #15
 8001e14:	f67f ae96 	bls.w	8001b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40013800 	.word	0x40013800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020400 	.word	0x40020400
 8001e38:	40020800 	.word	0x40020800
 8001e3c:	40020c00 	.word	0x40020c00
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40021400 	.word	0x40021400
 8001e48:	40021800 	.word	0x40021800
 8001e4c:	40013c00 	.word	0x40013c00

08001e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e001      	b.n	8001e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e9c:	e003      	b.n	8001ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	041a      	lsls	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	619a      	str	r2, [r3, #24]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0cc      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d90c      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b65      	ldr	r3, [pc, #404]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d044      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d119      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f72:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e067      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f92:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f023 0203 	bic.w	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4934      	ldr	r1, [pc, #208]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa4:	f7ff fcae 	bl	8001904 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f7ff fcaa 	bl	8001904 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e04f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 020c 	and.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1eb      	bne.n	8001fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d20c      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f887 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490a      	ldr	r1, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f9fa 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023c00 	.word	0x40023c00
 8002070:	40023800 	.word	0x40023800
 8002074:	08004ed0 	.word	0x08004ed0
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_RCC_GetHCLKFreq+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000000 	.word	0x20000000

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800209c:	f7ff fff0 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0a9b      	lsrs	r3, r3, #10
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	4903      	ldr	r1, [pc, #12]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	08004ee0 	.word	0x08004ee0

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020c4:	f7ff ffdc 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0b5b      	lsrs	r3, r3, #13
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4903      	ldr	r1, [pc, #12]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	08004ee0 	.word	0x08004ee0

080020e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	220f      	movs	r2, #15
 80020f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_RCC_GetClockConfig+0x60>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 020f 	and.w	r2, r3, #15
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	601a      	str	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40023c00 	.word	0x40023c00

0800214c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002150:	b0ae      	sub	sp, #184	; 0xb8
 8002152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002172:	4bcb      	ldr	r3, [pc, #812]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b0c      	cmp	r3, #12
 800217c:	f200 8206 	bhi.w	800258c <HAL_RCC_GetSysClockFreq+0x440>
 8002180:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	080021bd 	.word	0x080021bd
 800218c:	0800258d 	.word	0x0800258d
 8002190:	0800258d 	.word	0x0800258d
 8002194:	0800258d 	.word	0x0800258d
 8002198:	080021c5 	.word	0x080021c5
 800219c:	0800258d 	.word	0x0800258d
 80021a0:	0800258d 	.word	0x0800258d
 80021a4:	0800258d 	.word	0x0800258d
 80021a8:	080021cd 	.word	0x080021cd
 80021ac:	0800258d 	.word	0x0800258d
 80021b0:	0800258d 	.word	0x0800258d
 80021b4:	0800258d 	.word	0x0800258d
 80021b8:	080023bd 	.word	0x080023bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4bb9      	ldr	r3, [pc, #740]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80021be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80021c2:	e1e7      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021c4:	4bb8      	ldr	r3, [pc, #736]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80021c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021ca:	e1e3      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021cc:	4bb4      	ldr	r3, [pc, #720]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d8:	4bb1      	ldr	r3, [pc, #708]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d071      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e4:	4bae      	ldr	r3, [pc, #696]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	2200      	movs	r2, #0
 80021ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80021f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002206:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800220a:	4622      	mov	r2, r4
 800220c:	462b      	mov	r3, r5
 800220e:	f04f 0000 	mov.w	r0, #0
 8002212:	f04f 0100 	mov.w	r1, #0
 8002216:	0159      	lsls	r1, r3, #5
 8002218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800221c:	0150      	lsls	r0, r2, #5
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4621      	mov	r1, r4
 8002224:	1a51      	subs	r1, r2, r1
 8002226:	6439      	str	r1, [r7, #64]	; 0x40
 8002228:	4629      	mov	r1, r5
 800222a:	eb63 0301 	sbc.w	r3, r3, r1
 800222e:	647b      	str	r3, [r7, #68]	; 0x44
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800223c:	4649      	mov	r1, r9
 800223e:	018b      	lsls	r3, r1, #6
 8002240:	4641      	mov	r1, r8
 8002242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002246:	4641      	mov	r1, r8
 8002248:	018a      	lsls	r2, r1, #6
 800224a:	4641      	mov	r1, r8
 800224c:	1a51      	subs	r1, r2, r1
 800224e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002250:	4649      	mov	r1, r9
 8002252:	eb63 0301 	sbc.w	r3, r3, r1
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002264:	4649      	mov	r1, r9
 8002266:	00cb      	lsls	r3, r1, #3
 8002268:	4641      	mov	r1, r8
 800226a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800226e:	4641      	mov	r1, r8
 8002270:	00ca      	lsls	r2, r1, #3
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	4603      	mov	r3, r0
 8002278:	4622      	mov	r2, r4
 800227a:	189b      	adds	r3, r3, r2
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
 800227e:	462b      	mov	r3, r5
 8002280:	460a      	mov	r2, r1
 8002282:	eb42 0303 	adc.w	r3, r2, r3
 8002286:	637b      	str	r3, [r7, #52]	; 0x34
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002294:	4629      	mov	r1, r5
 8002296:	024b      	lsls	r3, r1, #9
 8002298:	4621      	mov	r1, r4
 800229a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800229e:	4621      	mov	r1, r4
 80022a0:	024a      	lsls	r2, r1, #9
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022aa:	2200      	movs	r2, #0
 80022ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80022b8:	f7fe f802 	bl	80002c0 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022c6:	e067      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c8:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80022d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80022e2:	2300      	movs	r3, #0
 80022e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80022ea:	4622      	mov	r2, r4
 80022ec:	462b      	mov	r3, r5
 80022ee:	f04f 0000 	mov.w	r0, #0
 80022f2:	f04f 0100 	mov.w	r1, #0
 80022f6:	0159      	lsls	r1, r3, #5
 80022f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022fc:	0150      	lsls	r0, r2, #5
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4621      	mov	r1, r4
 8002304:	1a51      	subs	r1, r2, r1
 8002306:	62b9      	str	r1, [r7, #40]	; 0x28
 8002308:	4629      	mov	r1, r5
 800230a:	eb63 0301 	sbc.w	r3, r3, r1
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800231c:	4649      	mov	r1, r9
 800231e:	018b      	lsls	r3, r1, #6
 8002320:	4641      	mov	r1, r8
 8002322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002326:	4641      	mov	r1, r8
 8002328:	018a      	lsls	r2, r1, #6
 800232a:	4641      	mov	r1, r8
 800232c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002330:	4649      	mov	r1, r9
 8002332:	eb63 0b01 	sbc.w	fp, r3, r1
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002342:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800234a:	4692      	mov	sl, r2
 800234c:	469b      	mov	fp, r3
 800234e:	4623      	mov	r3, r4
 8002350:	eb1a 0303 	adds.w	r3, sl, r3
 8002354:	623b      	str	r3, [r7, #32]
 8002356:	462b      	mov	r3, r5
 8002358:	eb4b 0303 	adc.w	r3, fp, r3
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800236a:	4629      	mov	r1, r5
 800236c:	028b      	lsls	r3, r1, #10
 800236e:	4621      	mov	r1, r4
 8002370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002374:	4621      	mov	r1, r4
 8002376:	028a      	lsls	r2, r1, #10
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002380:	2200      	movs	r2, #0
 8002382:	673b      	str	r3, [r7, #112]	; 0x70
 8002384:	677a      	str	r2, [r7, #116]	; 0x74
 8002386:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800238a:	f7fd ff99 	bl	80002c0 <__aeabi_uldivmod>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4613      	mov	r3, r2
 8002394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002398:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	3301      	adds	r3, #1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80023aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023ba:	e0eb      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023bc:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c8:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d06b      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	2200      	movs	r2, #0
 80023dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80023de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e6:	663b      	str	r3, [r7, #96]	; 0x60
 80023e8:	2300      	movs	r3, #0
 80023ea:	667b      	str	r3, [r7, #100]	; 0x64
 80023ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80023f0:	4622      	mov	r2, r4
 80023f2:	462b      	mov	r3, r5
 80023f4:	f04f 0000 	mov.w	r0, #0
 80023f8:	f04f 0100 	mov.w	r1, #0
 80023fc:	0159      	lsls	r1, r3, #5
 80023fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002402:	0150      	lsls	r0, r2, #5
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4621      	mov	r1, r4
 800240a:	1a51      	subs	r1, r2, r1
 800240c:	61b9      	str	r1, [r7, #24]
 800240e:	4629      	mov	r1, r5
 8002410:	eb63 0301 	sbc.w	r3, r3, r1
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002422:	4659      	mov	r1, fp
 8002424:	018b      	lsls	r3, r1, #6
 8002426:	4651      	mov	r1, sl
 8002428:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800242c:	4651      	mov	r1, sl
 800242e:	018a      	lsls	r2, r1, #6
 8002430:	4651      	mov	r1, sl
 8002432:	ebb2 0801 	subs.w	r8, r2, r1
 8002436:	4659      	mov	r1, fp
 8002438:	eb63 0901 	sbc.w	r9, r3, r1
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002448:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002450:	4690      	mov	r8, r2
 8002452:	4699      	mov	r9, r3
 8002454:	4623      	mov	r3, r4
 8002456:	eb18 0303 	adds.w	r3, r8, r3
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	462b      	mov	r3, r5
 800245e:	eb49 0303 	adc.w	r3, r9, r3
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002470:	4629      	mov	r1, r5
 8002472:	024b      	lsls	r3, r1, #9
 8002474:	4621      	mov	r1, r4
 8002476:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800247a:	4621      	mov	r1, r4
 800247c:	024a      	lsls	r2, r1, #9
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002486:	2200      	movs	r2, #0
 8002488:	65bb      	str	r3, [r7, #88]	; 0x58
 800248a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800248c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002490:	f7fd ff16 	bl	80002c0 <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4613      	mov	r3, r2
 800249a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800249e:	e065      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x420>
 80024a0:	40023800 	.word	0x40023800
 80024a4:	00f42400 	.word	0x00f42400
 80024a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ac:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	099b      	lsrs	r3, r3, #6
 80024b2:	2200      	movs	r2, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	4611      	mov	r1, r2
 80024b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024bc:	653b      	str	r3, [r7, #80]	; 0x50
 80024be:	2300      	movs	r3, #0
 80024c0:	657b      	str	r3, [r7, #84]	; 0x54
 80024c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80024c6:	4642      	mov	r2, r8
 80024c8:	464b      	mov	r3, r9
 80024ca:	f04f 0000 	mov.w	r0, #0
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	0159      	lsls	r1, r3, #5
 80024d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d8:	0150      	lsls	r0, r2, #5
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4641      	mov	r1, r8
 80024e0:	1a51      	subs	r1, r2, r1
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	4649      	mov	r1, r9
 80024e6:	eb63 0301 	sbc.w	r3, r3, r1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024f8:	4659      	mov	r1, fp
 80024fa:	018b      	lsls	r3, r1, #6
 80024fc:	4651      	mov	r1, sl
 80024fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002502:	4651      	mov	r1, sl
 8002504:	018a      	lsls	r2, r1, #6
 8002506:	4651      	mov	r1, sl
 8002508:	1a54      	subs	r4, r2, r1
 800250a:	4659      	mov	r1, fp
 800250c:	eb63 0501 	sbc.w	r5, r3, r1
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	00eb      	lsls	r3, r5, #3
 800251a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251e:	00e2      	lsls	r2, r4, #3
 8002520:	4614      	mov	r4, r2
 8002522:	461d      	mov	r5, r3
 8002524:	4643      	mov	r3, r8
 8002526:	18e3      	adds	r3, r4, r3
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	464b      	mov	r3, r9
 800252c:	eb45 0303 	adc.w	r3, r5, r3
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253e:	4629      	mov	r1, r5
 8002540:	028b      	lsls	r3, r1, #10
 8002542:	4621      	mov	r1, r4
 8002544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002548:	4621      	mov	r1, r4
 800254a:	028a      	lsls	r2, r1, #10
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002554:	2200      	movs	r2, #0
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48
 8002558:	64fa      	str	r2, [r7, #76]	; 0x4c
 800255a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800255e:	f7fd feaf 	bl	80002c0 <__aeabi_uldivmod>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4613      	mov	r3, r2
 8002568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	0f1b      	lsrs	r3, r3, #28
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800257a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800257e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002582:	fbb2 f3f3 	udiv	r3, r2, r3
 8002586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800258a:	e003      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800258e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002592:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002594:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002598:	4618      	mov	r0, r3
 800259a:	37b8      	adds	r7, #184	; 0xb8
 800259c:	46bd      	mov	sp, r7
 800259e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	00f42400 	.word	0x00f42400

080025ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e28d      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8083 	beq.w	80026d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025cc:	4b94      	ldr	r3, [pc, #592]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d019      	beq.n	800260c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025d8:	4b91      	ldr	r3, [pc, #580]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025e4:	4b8e      	ldr	r3, [pc, #568]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f0:	d00c      	beq.n	800260c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f2:	4b8b      	ldr	r3, [pc, #556]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025fa:	2b0c      	cmp	r3, #12
 80025fc:	d112      	bne.n	8002624 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fe:	4b88      	ldr	r3, [pc, #544]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260a:	d10b      	bne.n	8002624 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	4b84      	ldr	r3, [pc, #528]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05b      	beq.n	80026d0 <HAL_RCC_OscConfig+0x124>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d157      	bne.n	80026d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e25a      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262c:	d106      	bne.n	800263c <HAL_RCC_OscConfig+0x90>
 800262e:	4b7c      	ldr	r3, [pc, #496]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a7b      	ldr	r2, [pc, #492]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e01d      	b.n	8002678 <HAL_RCC_OscConfig+0xcc>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0xb4>
 8002646:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a75      	ldr	r2, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 800264c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b73      	ldr	r3, [pc, #460]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a72      	ldr	r2, [pc, #456]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0xcc>
 8002660:	4b6f      	ldr	r3, [pc, #444]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a6e      	ldr	r2, [pc, #440]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b6c      	ldr	r3, [pc, #432]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6b      	ldr	r2, [pc, #428]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7ff f940 	bl	8001904 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002688:	f7ff f93c 	bl	8001904 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e21f      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b61      	ldr	r3, [pc, #388]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0xdc>
 80026a6:	e014      	b.n	80026d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7ff f92c 	bl	8001904 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b0:	f7ff f928 	bl	8001904 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e20b      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	4b57      	ldr	r3, [pc, #348]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x104>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d06f      	beq.n	80027be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026de:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d017      	beq.n	800271a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026ea:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d105      	bne.n	8002702 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026f6:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d11c      	bne.n	8002748 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270e:	4b44      	ldr	r3, [pc, #272]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d116      	bne.n	8002748 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x186>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e1d3      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4937      	ldr	r1, [pc, #220]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	e03a      	b.n	80027be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCC_OscConfig+0x278>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7ff f8d5 	bl	8001904 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7ff f8d1 	bl	8001904 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e1b4      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4925      	ldr	r1, [pc, #148]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
 8002790:	e015      	b.n	80027be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_OscConfig+0x278>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7ff f8b4 	bl	8001904 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a0:	f7ff f8b0 	bl	8001904 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e193      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d036      	beq.n	8002838 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_RCC_OscConfig+0x27c>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7ff f894 	bl	8001904 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e0:	f7ff f890 	bl	8001904 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e173      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_OscConfig+0x274>)
 80027f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x234>
 80027fe:	e01b      	b.n	8002838 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_OscConfig+0x27c>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7ff f87d 	bl	8001904 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	e00e      	b.n	800282c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280e:	f7ff f879 	bl	8001904 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d907      	bls.n	800282c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e15c      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
 8002820:	40023800 	.word	0x40023800
 8002824:	42470000 	.word	0x42470000
 8002828:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	4b8a      	ldr	r3, [pc, #552]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ea      	bne.n	800280e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8097 	beq.w	8002974 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284a:	4b83      	ldr	r3, [pc, #524]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10f      	bne.n	8002876 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	4b7f      	ldr	r3, [pc, #508]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a7e      	ldr	r2, [pc, #504]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b7c      	ldr	r3, [pc, #496]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002876:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <HAL_RCC_OscConfig+0x4b0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002882:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <HAL_RCC_OscConfig+0x4b0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a75      	ldr	r2, [pc, #468]	; (8002a5c <HAL_RCC_OscConfig+0x4b0>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7ff f839 	bl	8001904 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7ff f835 	bl	8001904 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e118      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	4b6c      	ldr	r3, [pc, #432]	; (8002a5c <HAL_RCC_OscConfig+0x4b0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x31e>
 80028bc:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a65      	ldr	r2, [pc, #404]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	e01c      	b.n	8002904 <HAL_RCC_OscConfig+0x358>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x340>
 80028d2:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a60      	ldr	r2, [pc, #384]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
 80028de:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a5d      	ldr	r2, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0x358>
 80028ec:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a59      	ldr	r2, [pc, #356]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	4b57      	ldr	r3, [pc, #348]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a56      	ldr	r2, [pc, #344]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d015      	beq.n	8002938 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe fffa 	bl	8001904 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7fe fff6 	bl	8001904 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0d7      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ee      	beq.n	8002914 <HAL_RCC_OscConfig+0x368>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe ffe4 	bl	8001904 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe ffe0 	bl	8001904 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0c1      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1ee      	bne.n	8002940 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4a3a      	ldr	r2, [pc, #232]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 800296e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002972:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80ad 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297e:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b08      	cmp	r3, #8
 8002988:	d060      	beq.n	8002a4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d145      	bne.n	8002a1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <HAL_RCC_OscConfig+0x4b4>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe ffb4 	bl	8001904 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe ffb0 	bl	8001904 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e093      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	019b      	lsls	r3, r3, #6
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	3b01      	subs	r3, #1
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	071b      	lsls	r3, r3, #28
 80029ea:	491b      	ldr	r1, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x4b4>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe ff85 	bl	8001904 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe ff81 	bl	8001904 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e064      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x452>
 8002a1c:	e05c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_RCC_OscConfig+0x4b4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe ff6e 	bl	8001904 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe ff6a 	bl	8001904 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e04d      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x4ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x480>
 8002a4a:	e045      	b.n	8002ad8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e040      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <HAL_RCC_OscConfig+0x538>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d030      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d129      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d122      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a94:	4013      	ands	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d119      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	3b01      	subs	r3, #1
 8002aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d10f      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07b      	b.n	8002bf2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d108      	bne.n	8002b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b0a:	d009      	beq.n	8002b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61da      	str	r2, [r3, #28]
 8002b12:	e005      	b.n	8002b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fe fbea 	bl	8001314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	ea42 0103 	orr.w	r1, r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	f003 0104 	and.w	r1, r3, #4
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	f003 0210 	and.w	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b08c      	sub	sp, #48	; 0x30
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_SPI_TransmitReceive+0x26>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e18a      	b.n	8002f36 <HAL_SPI_TransmitReceive+0x33c>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c28:	f7fe fe6c 	bl	8001904 <HAL_GetTick>
 8002c2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d00f      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0x70>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c50:	d107      	bne.n	8002c62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <HAL_SPI_TransmitReceive+0x68>
 8002c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d003      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c68:	e15b      	b.n	8002f22 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x82>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x82>
 8002c76:	887b      	ldrh	r3, [r7, #2]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c82:	e14e      	b.n	8002f22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d003      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2205      	movs	r2, #5
 8002c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	887a      	ldrh	r2, [r7, #2]
 8002cba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d007      	beq.n	8002cec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf4:	d178      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x10a>
 8002cfe:	8b7b      	ldrh	r3, [r7, #26]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d166      	bne.n	8002dd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	1c9a      	adds	r2, r3, #2
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d28:	e053      	b.n	8002dd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d11b      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x176>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x176>
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d113      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	881a      	ldrh	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	1c9a      	adds	r2, r3, #2
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d119      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x1b8>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d014      	beq.n	8002db2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	b292      	uxth	r2, r2
 8002d94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	1c9a      	adds	r2, r3, #2
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dae:	2301      	movs	r3, #1
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002db2:	f7fe fda7 	bl	8001904 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d807      	bhi.n	8002dd2 <HAL_SPI_TransmitReceive+0x1d8>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d003      	beq.n	8002dd2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dd0:	e0a7      	b.n	8002f22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1a6      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x130>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1a1      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x130>
 8002de6:	e07c      	b.n	8002ee2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x1fc>
 8002df0:	8b7b      	ldrh	r3, [r7, #26]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d16b      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	7812      	ldrb	r2, [r2, #0]
 8002e02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e1c:	e057      	b.n	8002ece <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d11c      	bne.n	8002e66 <HAL_SPI_TransmitReceive+0x26c>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d017      	beq.n	8002e66 <HAL_SPI_TransmitReceive+0x26c>
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d114      	bne.n	8002e66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	7812      	ldrb	r2, [r2, #0]
 8002e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d119      	bne.n	8002ea8 <HAL_SPI_TransmitReceive+0x2ae>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d014      	beq.n	8002ea8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ea8:	f7fe fd2c 	bl	8001904 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d803      	bhi.n	8002ec0 <HAL_SPI_TransmitReceive+0x2c6>
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d102      	bne.n	8002ec6 <HAL_SPI_TransmitReceive+0x2cc>
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d103      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ecc:	e029      	b.n	8002f22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1a2      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x224>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d19d      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f8b2 	bl	8003050 <SPI_EndRxTxTransaction>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002efe:	e010      	b.n	8002f22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	e000      	b.n	8002f22 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3730      	adds	r7, #48	; 0x30
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f50:	f7fe fcd8 	bl	8001904 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f60:	f7fe fcd0 	bl	8001904 <HAL_GetTick>
 8002f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f66:	4b39      	ldr	r3, [pc, #228]	; (800304c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	015b      	lsls	r3, r3, #5
 8002f6c:	0d1b      	lsrs	r3, r3, #20
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f76:	e054      	b.n	8003022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d050      	beq.n	8003022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f80:	f7fe fcc0 	bl	8001904 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d902      	bls.n	8002f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d13d      	bne.n	8003012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fae:	d111      	bne.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb8:	d004      	beq.n	8002fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	d107      	bne.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fdc:	d10f      	bne.n	8002ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e017      	b.n	8003042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3b01      	subs	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	429a      	cmp	r2, r3
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	429a      	cmp	r2, r3
 800303e:	d19b      	bne.n	8002f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000

08003050 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <SPI_EndRxTxTransaction+0x7c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1b      	ldr	r2, [pc, #108]	; (80030d0 <SPI_EndRxTxTransaction+0x80>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0d5b      	lsrs	r3, r3, #21
 8003068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307a:	d112      	bne.n	80030a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2200      	movs	r2, #0
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7ff ff5a 	bl	8002f40 <SPI_WaitFlagStateUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d016      	beq.n	80030c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e00f      	b.n	80030c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b8:	2b80      	cmp	r3, #128	; 0x80
 80030ba:	d0f2      	beq.n	80030a2 <SPI_EndRxTxTransaction+0x52>
 80030bc:	e000      	b.n	80030c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80030be:	bf00      	nop
  }

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000000 	.word	0x20000000
 80030d0:	165e9f81 	.word	0x165e9f81

080030d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e041      	b.n	800316a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe faf4 	bl	80016e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 fafe 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d001      	beq.n	800318c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e046      	b.n	800321a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a23      	ldr	r2, [pc, #140]	; (8003228 <HAL_TIM_Base_Start+0xb4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d022      	beq.n	80031e4 <HAL_TIM_Base_Start+0x70>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a6:	d01d      	beq.n	80031e4 <HAL_TIM_Base_Start+0x70>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1f      	ldr	r2, [pc, #124]	; (800322c <HAL_TIM_Base_Start+0xb8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d018      	beq.n	80031e4 <HAL_TIM_Base_Start+0x70>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1e      	ldr	r2, [pc, #120]	; (8003230 <HAL_TIM_Base_Start+0xbc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d013      	beq.n	80031e4 <HAL_TIM_Base_Start+0x70>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <HAL_TIM_Base_Start+0xc0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00e      	beq.n	80031e4 <HAL_TIM_Base_Start+0x70>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1b      	ldr	r2, [pc, #108]	; (8003238 <HAL_TIM_Base_Start+0xc4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d009      	beq.n	80031e4 <HAL_TIM_Base_Start+0x70>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a19      	ldr	r2, [pc, #100]	; (800323c <HAL_TIM_Base_Start+0xc8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d004      	beq.n	80031e4 <HAL_TIM_Base_Start+0x70>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a18      	ldr	r2, [pc, #96]	; (8003240 <HAL_TIM_Base_Start+0xcc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d111      	bne.n	8003208 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d010      	beq.n	8003218 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003206:	e007      	b.n	8003218 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40010000 	.word	0x40010000
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800
 8003234:	40000c00 	.word	0x40000c00
 8003238:	40010400 	.word	0x40010400
 800323c:	40014000 	.word	0x40014000
 8003240:	40001800 	.word	0x40001800

08003244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d001      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e04e      	b.n	80032fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a23      	ldr	r2, [pc, #140]	; (8003308 <HAL_TIM_Base_Start_IT+0xc4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d022      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003286:	d01d      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_TIM_Base_Start_IT+0xc8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d018      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <HAL_TIM_Base_Start_IT+0xcc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_TIM_Base_Start_IT+0xd0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00e      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <HAL_TIM_Base_Start_IT+0xd4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d009      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_TIM_Base_Start_IT+0xd8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a18      	ldr	r2, [pc, #96]	; (8003320 <HAL_TIM_Base_Start_IT+0xdc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d111      	bne.n	80032e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d010      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e6:	e007      	b.n	80032f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40010400 	.word	0x40010400
 800331c:	40014000 	.word	0x40014000
 8003320:	40001800 	.word	0x40001800

08003324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d122      	bne.n	8003380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	d11b      	bne.n	8003380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0202 	mvn.w	r2, #2
 8003350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f9b5 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 800336c:	e005      	b.n	800337a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9a7 	bl	80036c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f9b8 	bl	80036ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d122      	bne.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11b      	bne.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0204 	mvn.w	r2, #4
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f98b 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f97d 	bl	80036c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f98e 	bl	80036ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d122      	bne.n	8003428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d11b      	bne.n	8003428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0208 	mvn.w	r2, #8
 80033f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2204      	movs	r2, #4
 80033fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f961 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 8003414:	e005      	b.n	8003422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f953 	bl	80036c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f964 	bl	80036ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b10      	cmp	r3, #16
 8003434:	d122      	bne.n	800347c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b10      	cmp	r3, #16
 8003442:	d11b      	bne.n	800347c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0210 	mvn.w	r2, #16
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2208      	movs	r2, #8
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f937 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f929 	bl	80036c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f93a 	bl	80036ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d10e      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0201 	mvn.w	r2, #1
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fee8 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b80      	cmp	r3, #128	; 0x80
 80034b4:	d10e      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b80      	cmp	r3, #128	; 0x80
 80034c2:	d107      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fae0 	bl	8003a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b40      	cmp	r3, #64	; 0x40
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8ff 	bl	80036fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b20      	cmp	r3, #32
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b20      	cmp	r3, #32
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0220 	mvn.w	r2, #32
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 faaa 	bl	8003a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_TIM_ConfigClockSource+0x1c>
 800354c:	2302      	movs	r3, #2
 800354e:	e0b4      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x186>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800356e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003588:	d03e      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0xd4>
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358e:	f200 8087 	bhi.w	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003596:	f000 8086 	beq.w	80036a6 <HAL_TIM_ConfigClockSource+0x172>
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359e:	d87f      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035a0:	2b70      	cmp	r3, #112	; 0x70
 80035a2:	d01a      	beq.n	80035da <HAL_TIM_ConfigClockSource+0xa6>
 80035a4:	2b70      	cmp	r3, #112	; 0x70
 80035a6:	d87b      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035a8:	2b60      	cmp	r3, #96	; 0x60
 80035aa:	d050      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x11a>
 80035ac:	2b60      	cmp	r3, #96	; 0x60
 80035ae:	d877      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d03c      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xfa>
 80035b4:	2b50      	cmp	r3, #80	; 0x50
 80035b6:	d873      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d058      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x13a>
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d86f      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035c0:	2b30      	cmp	r3, #48	; 0x30
 80035c2:	d064      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035c4:	2b30      	cmp	r3, #48	; 0x30
 80035c6:	d86b      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d060      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d867      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05c      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d05a      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035d8:	e062      	b.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6899      	ldr	r1, [r3, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f000 f9ad 	bl	8003948 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	609a      	str	r2, [r3, #8]
      break;
 8003606:	e04f      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f000 f996 	bl	8003948 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800362a:	609a      	str	r2, [r3, #8]
      break;
 800362c:	e03c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	461a      	mov	r2, r3
 800363c:	f000 f90a 	bl	8003854 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2150      	movs	r1, #80	; 0x50
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f963 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 800364c:	e02c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	461a      	mov	r2, r3
 800365c:	f000 f929 	bl	80038b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2160      	movs	r1, #96	; 0x60
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f953 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 800366c:	e01c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	461a      	mov	r2, r3
 800367c:	f000 f8ea 	bl	8003854 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2140      	movs	r1, #64	; 0x40
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f943 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 800368c:	e00c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f000 f93a 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 800369e:	e003      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e000      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a40      	ldr	r2, [pc, #256]	; (8003828 <TIM_Base_SetConfig+0x114>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d00f      	beq.n	8003754 <TIM_Base_SetConfig+0x40>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a3d      	ldr	r2, [pc, #244]	; (800382c <TIM_Base_SetConfig+0x118>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00b      	beq.n	8003754 <TIM_Base_SetConfig+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a3c      	ldr	r2, [pc, #240]	; (8003830 <TIM_Base_SetConfig+0x11c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a3b      	ldr	r2, [pc, #236]	; (8003834 <TIM_Base_SetConfig+0x120>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3a      	ldr	r2, [pc, #232]	; (8003838 <TIM_Base_SetConfig+0x124>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d108      	bne.n	8003766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <TIM_Base_SetConfig+0x114>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d02b      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003774:	d027      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2c      	ldr	r2, [pc, #176]	; (800382c <TIM_Base_SetConfig+0x118>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d023      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2b      	ldr	r2, [pc, #172]	; (8003830 <TIM_Base_SetConfig+0x11c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01f      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a2a      	ldr	r2, [pc, #168]	; (8003834 <TIM_Base_SetConfig+0x120>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01b      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a29      	ldr	r2, [pc, #164]	; (8003838 <TIM_Base_SetConfig+0x124>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d017      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a28      	ldr	r2, [pc, #160]	; (800383c <TIM_Base_SetConfig+0x128>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a27      	ldr	r2, [pc, #156]	; (8003840 <TIM_Base_SetConfig+0x12c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00f      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <TIM_Base_SetConfig+0x130>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a25      	ldr	r2, [pc, #148]	; (8003848 <TIM_Base_SetConfig+0x134>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d007      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a24      	ldr	r2, [pc, #144]	; (800384c <TIM_Base_SetConfig+0x138>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a23      	ldr	r2, [pc, #140]	; (8003850 <TIM_Base_SetConfig+0x13c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d108      	bne.n	80037d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <TIM_Base_SetConfig+0x114>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0xf8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <TIM_Base_SetConfig+0x124>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d103      	bne.n	8003814 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	615a      	str	r2, [r3, #20]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40010400 	.word	0x40010400
 800383c:	40014000 	.word	0x40014000
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800
 8003848:	40001800 	.word	0x40001800
 800384c:	40001c00 	.word	0x40001c00
 8003850:	40002000 	.word	0x40002000

08003854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f023 0201 	bic.w	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800387e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 030a 	bic.w	r3, r3, #10
 8003890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b087      	sub	sp, #28
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	f023 0210 	bic.w	r2, r3, #16
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	031b      	lsls	r3, r3, #12
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	f043 0307 	orr.w	r3, r3, #7
 8003934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	609a      	str	r2, [r3, #8]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	021a      	lsls	r2, r3, #8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	431a      	orrs	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4313      	orrs	r3, r2
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800399c:	2302      	movs	r3, #2
 800399e:	e05a      	b.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a21      	ldr	r2, [pc, #132]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ec:	d01d      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a17      	ldr	r2, [pc, #92]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10c      	bne.n	8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40010400 	.word	0x40010400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40001800 	.word	0x40001800

08003a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e03f      	b.n	8003b3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fe70 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f929 	bl	8003d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b08a      	sub	sp, #40	; 0x28
 8003b46:	af02      	add	r7, sp, #8
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d17c      	bne.n	8003c5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_UART_Transmit+0x2c>
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e075      	b.n	8003c5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_UART_Transmit+0x3e>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e06e      	b.n	8003c5e <HAL_UART_Transmit+0x11c>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2221      	movs	r2, #33	; 0x21
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b96:	f7fd feb5 	bl	8001904 <HAL_GetTick>
 8003b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	88fa      	ldrh	r2, [r7, #6]
 8003ba0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	88fa      	ldrh	r2, [r7, #6]
 8003ba6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb0:	d108      	bne.n	8003bc4 <HAL_UART_Transmit+0x82>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d104      	bne.n	8003bc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	e003      	b.n	8003bcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bd4:	e02a      	b.n	8003c2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2180      	movs	r1, #128	; 0x80
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f840 	bl	8003c66 <UART_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e036      	b.n	8003c5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	3302      	adds	r3, #2
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e007      	b.n	8003c1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	781a      	ldrb	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1cf      	bne.n	8003bd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2140      	movs	r1, #64	; 0x40
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f810 	bl	8003c66 <UART_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e006      	b.n	8003c5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b090      	sub	sp, #64	; 0x40
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c76:	e050      	b.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7e:	d04c      	beq.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c86:	f7fd fe3d 	bl	8001904 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d241      	bcs.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cb6:	637a      	str	r2, [r7, #52]	; 0x34
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e5      	bne.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3314      	adds	r3, #20
 8003cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cea:	623a      	str	r2, [r7, #32]
 8003cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	69f9      	ldr	r1, [r7, #28]
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e00f      	b.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4013      	ands	r3, r2
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	bf0c      	ite	eq
 8003d2a:	2301      	moveq	r3, #1
 8003d2c:	2300      	movne	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d09f      	beq.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3740      	adds	r7, #64	; 0x40
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b0c0      	sub	sp, #256	; 0x100
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	68d9      	ldr	r1, [r3, #12]
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	ea40 0301 	orr.w	r3, r0, r1
 8003d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d9c:	f021 010c 	bic.w	r1, r1, #12
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003daa:	430b      	orrs	r3, r1
 8003dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbe:	6999      	ldr	r1, [r3, #24]
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	ea40 0301 	orr.w	r3, r0, r1
 8003dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b8f      	ldr	r3, [pc, #572]	; (8004010 <UART_SetConfig+0x2cc>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d005      	beq.n	8003de4 <UART_SetConfig+0xa0>
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b8d      	ldr	r3, [pc, #564]	; (8004014 <UART_SetConfig+0x2d0>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d104      	bne.n	8003dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe f96c 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8003de8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dec:	e003      	b.n	8003df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dee:	f7fe f953 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8003df2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e00:	f040 810c 	bne.w	800401c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	1891      	adds	r1, r2, r2
 8003e1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e1e:	415b      	adcs	r3, r3
 8003e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e26:	4621      	mov	r1, r4
 8003e28:	eb12 0801 	adds.w	r8, r2, r1
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb43 0901 	adc.w	r9, r3, r1
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e46:	4690      	mov	r8, r2
 8003e48:	4699      	mov	r9, r3
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	eb18 0303 	adds.w	r3, r8, r3
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e54:	462b      	mov	r3, r5
 8003e56:	eb49 0303 	adc.w	r3, r9, r3
 8003e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e72:	460b      	mov	r3, r1
 8003e74:	18db      	adds	r3, r3, r3
 8003e76:	653b      	str	r3, [r7, #80]	; 0x50
 8003e78:	4613      	mov	r3, r2
 8003e7a:	eb42 0303 	adc.w	r3, r2, r3
 8003e7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e88:	f7fc fa1a 	bl	80002c0 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4b61      	ldr	r3, [pc, #388]	; (8004018 <UART_SetConfig+0x2d4>)
 8003e92:	fba3 2302 	umull	r2, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	011c      	lsls	r4, r3, #4
 8003e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003eac:	4642      	mov	r2, r8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	1891      	adds	r1, r2, r2
 8003eb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003eb4:	415b      	adcs	r3, r3
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003edc:	4692      	mov	sl, r2
 8003ede:	469b      	mov	fp, r3
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eea:	464b      	mov	r3, r9
 8003eec:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	18db      	adds	r3, r3, r3
 8003f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f0e:	4613      	mov	r3, r2
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	647b      	str	r3, [r7, #68]	; 0x44
 8003f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f1e:	f7fc f9cf 	bl	80002c0 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <UART_SetConfig+0x2d4>)
 8003f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2264      	movs	r2, #100	; 0x64
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	1acb      	subs	r3, r1, r3
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <UART_SetConfig+0x2d4>)
 8003f40:	fba3 2302 	umull	r2, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f4c:	441c      	add	r4, r3
 8003f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f70:	4641      	mov	r1, r8
 8003f72:	1851      	adds	r1, r2, r1
 8003f74:	6339      	str	r1, [r7, #48]	; 0x30
 8003f76:	4649      	mov	r1, r9
 8003f78:	414b      	adcs	r3, r1
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f88:	4659      	mov	r1, fp
 8003f8a:	00cb      	lsls	r3, r1, #3
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	4651      	mov	r1, sl
 8003f94:	00ca      	lsls	r2, r1, #3
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	18db      	adds	r3, r3, r3
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fca:	4613      	mov	r3, r2
 8003fcc:	eb42 0303 	adc.w	r3, r2, r3
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fda:	f7fc f971 	bl	80002c0 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <UART_SetConfig+0x2d4>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	2164      	movs	r1, #100	; 0x64
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	3332      	adds	r3, #50	; 0x32
 8003ff6:	4a08      	ldr	r2, [pc, #32]	; (8004018 <UART_SetConfig+0x2d4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	f003 0207 	and.w	r2, r3, #7
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4422      	add	r2, r4
 800400a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800400c:	e106      	b.n	800421c <UART_SetConfig+0x4d8>
 800400e:	bf00      	nop
 8004010:	40011000 	.word	0x40011000
 8004014:	40011400 	.word	0x40011400
 8004018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800401c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004026:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800402a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800402e:	4642      	mov	r2, r8
 8004030:	464b      	mov	r3, r9
 8004032:	1891      	adds	r1, r2, r2
 8004034:	6239      	str	r1, [r7, #32]
 8004036:	415b      	adcs	r3, r3
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
 800403a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800403e:	4641      	mov	r1, r8
 8004040:	1854      	adds	r4, r2, r1
 8004042:	4649      	mov	r1, r9
 8004044:	eb43 0501 	adc.w	r5, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	00eb      	lsls	r3, r5, #3
 8004052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004056:	00e2      	lsls	r2, r4, #3
 8004058:	4614      	mov	r4, r2
 800405a:	461d      	mov	r5, r3
 800405c:	4643      	mov	r3, r8
 800405e:	18e3      	adds	r3, r4, r3
 8004060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004064:	464b      	mov	r3, r9
 8004066:	eb45 0303 	adc.w	r3, r5, r3
 800406a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800407a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800408a:	4629      	mov	r1, r5
 800408c:	008b      	lsls	r3, r1, #2
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004094:	4621      	mov	r1, r4
 8004096:	008a      	lsls	r2, r1, #2
 8004098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800409c:	f7fc f910 	bl	80002c0 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4b60      	ldr	r3, [pc, #384]	; (8004228 <UART_SetConfig+0x4e4>)
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	011c      	lsls	r4, r3, #4
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	61b9      	str	r1, [r7, #24]
 80040c8:	415b      	adcs	r3, r3
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6139      	str	r1, [r7, #16]
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004104:	464b      	mov	r3, r9
 8004106:	460a      	mov	r2, r1
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	67bb      	str	r3, [r7, #120]	; 0x78
 800411a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004128:	4649      	mov	r1, r9
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	4641      	mov	r1, r8
 800412e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004132:	4641      	mov	r1, r8
 8004134:	008a      	lsls	r2, r1, #2
 8004136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800413a:	f7fc f8c1 	bl	80002c0 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4611      	mov	r1, r2
 8004144:	4b38      	ldr	r3, [pc, #224]	; (8004228 <UART_SetConfig+0x4e4>)
 8004146:	fba3 2301 	umull	r2, r3, r3, r1
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2264      	movs	r2, #100	; 0x64
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	1acb      	subs	r3, r1, r3
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	3332      	adds	r3, #50	; 0x32
 8004158:	4a33      	ldr	r2, [pc, #204]	; (8004228 <UART_SetConfig+0x4e4>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004164:	441c      	add	r4, r3
 8004166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416a:	2200      	movs	r2, #0
 800416c:	673b      	str	r3, [r7, #112]	; 0x70
 800416e:	677a      	str	r2, [r7, #116]	; 0x74
 8004170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	415b      	adcs	r3, r3
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004184:	4641      	mov	r1, r8
 8004186:	1851      	adds	r1, r2, r1
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	4649      	mov	r1, r9
 800418c:	414b      	adcs	r3, r1
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800419c:	4659      	mov	r1, fp
 800419e:	00cb      	lsls	r3, r1, #3
 80041a0:	4651      	mov	r1, sl
 80041a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a6:	4651      	mov	r1, sl
 80041a8:	00ca      	lsls	r2, r1, #3
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	4642      	mov	r2, r8
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041b6:	464b      	mov	r3, r9
 80041b8:	460a      	mov	r2, r1
 80041ba:	eb42 0303 	adc.w	r3, r2, r3
 80041be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ca:	667a      	str	r2, [r7, #100]	; 0x64
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041d8:	4649      	mov	r1, r9
 80041da:	008b      	lsls	r3, r1, #2
 80041dc:	4641      	mov	r1, r8
 80041de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e2:	4641      	mov	r1, r8
 80041e4:	008a      	lsls	r2, r1, #2
 80041e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041ea:	f7fc f869 	bl	80002c0 <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <UART_SetConfig+0x4e4>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	; 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	3332      	adds	r3, #50	; 0x32
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <UART_SetConfig+0x4e4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 020f 	and.w	r2, r3, #15
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4422      	add	r2, r4
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004222:	46bd      	mov	sp, r7
 8004224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <sniprintf>:
 800422c:	b40c      	push	{r2, r3}
 800422e:	b530      	push	{r4, r5, lr}
 8004230:	4b17      	ldr	r3, [pc, #92]	; (8004290 <sniprintf+0x64>)
 8004232:	1e0c      	subs	r4, r1, #0
 8004234:	681d      	ldr	r5, [r3, #0]
 8004236:	b09d      	sub	sp, #116	; 0x74
 8004238:	da08      	bge.n	800424c <sniprintf+0x20>
 800423a:	238b      	movs	r3, #139	; 0x8b
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	f04f 30ff 	mov.w	r0, #4294967295
 8004242:	b01d      	add	sp, #116	; 0x74
 8004244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004248:	b002      	add	sp, #8
 800424a:	4770      	bx	lr
 800424c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004250:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004254:	bf14      	ite	ne
 8004256:	f104 33ff 	addne.w	r3, r4, #4294967295
 800425a:	4623      	moveq	r3, r4
 800425c:	9304      	str	r3, [sp, #16]
 800425e:	9307      	str	r3, [sp, #28]
 8004260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004264:	9002      	str	r0, [sp, #8]
 8004266:	9006      	str	r0, [sp, #24]
 8004268:	f8ad 3016 	strh.w	r3, [sp, #22]
 800426c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800426e:	ab21      	add	r3, sp, #132	; 0x84
 8004270:	a902      	add	r1, sp, #8
 8004272:	4628      	mov	r0, r5
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	f000 f9b3 	bl	80045e0 <_svfiprintf_r>
 800427a:	1c43      	adds	r3, r0, #1
 800427c:	bfbc      	itt	lt
 800427e:	238b      	movlt	r3, #139	; 0x8b
 8004280:	602b      	strlt	r3, [r5, #0]
 8004282:	2c00      	cmp	r4, #0
 8004284:	d0dd      	beq.n	8004242 <sniprintf+0x16>
 8004286:	9b02      	ldr	r3, [sp, #8]
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e7d9      	b.n	8004242 <sniprintf+0x16>
 800428e:	bf00      	nop
 8004290:	20000058 	.word	0x20000058

08004294 <siprintf>:
 8004294:	b40e      	push	{r1, r2, r3}
 8004296:	b500      	push	{lr}
 8004298:	b09c      	sub	sp, #112	; 0x70
 800429a:	ab1d      	add	r3, sp, #116	; 0x74
 800429c:	9002      	str	r0, [sp, #8]
 800429e:	9006      	str	r0, [sp, #24]
 80042a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042a4:	4809      	ldr	r0, [pc, #36]	; (80042cc <siprintf+0x38>)
 80042a6:	9107      	str	r1, [sp, #28]
 80042a8:	9104      	str	r1, [sp, #16]
 80042aa:	4909      	ldr	r1, [pc, #36]	; (80042d0 <siprintf+0x3c>)
 80042ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80042b0:	9105      	str	r1, [sp, #20]
 80042b2:	6800      	ldr	r0, [r0, #0]
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	a902      	add	r1, sp, #8
 80042b8:	f000 f992 	bl	80045e0 <_svfiprintf_r>
 80042bc:	9b02      	ldr	r3, [sp, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	b01c      	add	sp, #112	; 0x70
 80042c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042c8:	b003      	add	sp, #12
 80042ca:	4770      	bx	lr
 80042cc:	20000058 	.word	0x20000058
 80042d0:	ffff0208 	.word	0xffff0208

080042d4 <memset>:
 80042d4:	4402      	add	r2, r0
 80042d6:	4603      	mov	r3, r0
 80042d8:	4293      	cmp	r3, r2
 80042da:	d100      	bne.n	80042de <memset+0xa>
 80042dc:	4770      	bx	lr
 80042de:	f803 1b01 	strb.w	r1, [r3], #1
 80042e2:	e7f9      	b.n	80042d8 <memset+0x4>

080042e4 <__errno>:
 80042e4:	4b01      	ldr	r3, [pc, #4]	; (80042ec <__errno+0x8>)
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000058 	.word	0x20000058

080042f0 <__libc_init_array>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	4d0d      	ldr	r5, [pc, #52]	; (8004328 <__libc_init_array+0x38>)
 80042f4:	4c0d      	ldr	r4, [pc, #52]	; (800432c <__libc_init_array+0x3c>)
 80042f6:	1b64      	subs	r4, r4, r5
 80042f8:	10a4      	asrs	r4, r4, #2
 80042fa:	2600      	movs	r6, #0
 80042fc:	42a6      	cmp	r6, r4
 80042fe:	d109      	bne.n	8004314 <__libc_init_array+0x24>
 8004300:	4d0b      	ldr	r5, [pc, #44]	; (8004330 <__libc_init_array+0x40>)
 8004302:	4c0c      	ldr	r4, [pc, #48]	; (8004334 <__libc_init_array+0x44>)
 8004304:	f000 fc6a 	bl	8004bdc <_init>
 8004308:	1b64      	subs	r4, r4, r5
 800430a:	10a4      	asrs	r4, r4, #2
 800430c:	2600      	movs	r6, #0
 800430e:	42a6      	cmp	r6, r4
 8004310:	d105      	bne.n	800431e <__libc_init_array+0x2e>
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	f855 3b04 	ldr.w	r3, [r5], #4
 8004318:	4798      	blx	r3
 800431a:	3601      	adds	r6, #1
 800431c:	e7ee      	b.n	80042fc <__libc_init_array+0xc>
 800431e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004322:	4798      	blx	r3
 8004324:	3601      	adds	r6, #1
 8004326:	e7f2      	b.n	800430e <__libc_init_array+0x1e>
 8004328:	08004f24 	.word	0x08004f24
 800432c:	08004f24 	.word	0x08004f24
 8004330:	08004f24 	.word	0x08004f24
 8004334:	08004f28 	.word	0x08004f28

08004338 <__retarget_lock_acquire_recursive>:
 8004338:	4770      	bx	lr

0800433a <__retarget_lock_release_recursive>:
 800433a:	4770      	bx	lr

0800433c <_free_r>:
 800433c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800433e:	2900      	cmp	r1, #0
 8004340:	d044      	beq.n	80043cc <_free_r+0x90>
 8004342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004346:	9001      	str	r0, [sp, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f1a1 0404 	sub.w	r4, r1, #4
 800434e:	bfb8      	it	lt
 8004350:	18e4      	addlt	r4, r4, r3
 8004352:	f000 f8df 	bl	8004514 <__malloc_lock>
 8004356:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <_free_r+0x94>)
 8004358:	9801      	ldr	r0, [sp, #4]
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	b933      	cbnz	r3, 800436c <_free_r+0x30>
 800435e:	6063      	str	r3, [r4, #4]
 8004360:	6014      	str	r4, [r2, #0]
 8004362:	b003      	add	sp, #12
 8004364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004368:	f000 b8da 	b.w	8004520 <__malloc_unlock>
 800436c:	42a3      	cmp	r3, r4
 800436e:	d908      	bls.n	8004382 <_free_r+0x46>
 8004370:	6825      	ldr	r5, [r4, #0]
 8004372:	1961      	adds	r1, r4, r5
 8004374:	428b      	cmp	r3, r1
 8004376:	bf01      	itttt	eq
 8004378:	6819      	ldreq	r1, [r3, #0]
 800437a:	685b      	ldreq	r3, [r3, #4]
 800437c:	1949      	addeq	r1, r1, r5
 800437e:	6021      	streq	r1, [r4, #0]
 8004380:	e7ed      	b.n	800435e <_free_r+0x22>
 8004382:	461a      	mov	r2, r3
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b10b      	cbz	r3, 800438c <_free_r+0x50>
 8004388:	42a3      	cmp	r3, r4
 800438a:	d9fa      	bls.n	8004382 <_free_r+0x46>
 800438c:	6811      	ldr	r1, [r2, #0]
 800438e:	1855      	adds	r5, r2, r1
 8004390:	42a5      	cmp	r5, r4
 8004392:	d10b      	bne.n	80043ac <_free_r+0x70>
 8004394:	6824      	ldr	r4, [r4, #0]
 8004396:	4421      	add	r1, r4
 8004398:	1854      	adds	r4, r2, r1
 800439a:	42a3      	cmp	r3, r4
 800439c:	6011      	str	r1, [r2, #0]
 800439e:	d1e0      	bne.n	8004362 <_free_r+0x26>
 80043a0:	681c      	ldr	r4, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	6053      	str	r3, [r2, #4]
 80043a6:	440c      	add	r4, r1
 80043a8:	6014      	str	r4, [r2, #0]
 80043aa:	e7da      	b.n	8004362 <_free_r+0x26>
 80043ac:	d902      	bls.n	80043b4 <_free_r+0x78>
 80043ae:	230c      	movs	r3, #12
 80043b0:	6003      	str	r3, [r0, #0]
 80043b2:	e7d6      	b.n	8004362 <_free_r+0x26>
 80043b4:	6825      	ldr	r5, [r4, #0]
 80043b6:	1961      	adds	r1, r4, r5
 80043b8:	428b      	cmp	r3, r1
 80043ba:	bf04      	itt	eq
 80043bc:	6819      	ldreq	r1, [r3, #0]
 80043be:	685b      	ldreq	r3, [r3, #4]
 80043c0:	6063      	str	r3, [r4, #4]
 80043c2:	bf04      	itt	eq
 80043c4:	1949      	addeq	r1, r1, r5
 80043c6:	6021      	streq	r1, [r4, #0]
 80043c8:	6054      	str	r4, [r2, #4]
 80043ca:	e7ca      	b.n	8004362 <_free_r+0x26>
 80043cc:	b003      	add	sp, #12
 80043ce:	bd30      	pop	{r4, r5, pc}
 80043d0:	200002ec 	.word	0x200002ec

080043d4 <sbrk_aligned>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4e0e      	ldr	r6, [pc, #56]	; (8004410 <sbrk_aligned+0x3c>)
 80043d8:	460c      	mov	r4, r1
 80043da:	6831      	ldr	r1, [r6, #0]
 80043dc:	4605      	mov	r5, r0
 80043de:	b911      	cbnz	r1, 80043e6 <sbrk_aligned+0x12>
 80043e0:	f000 fba6 	bl	8004b30 <_sbrk_r>
 80043e4:	6030      	str	r0, [r6, #0]
 80043e6:	4621      	mov	r1, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	f000 fba1 	bl	8004b30 <_sbrk_r>
 80043ee:	1c43      	adds	r3, r0, #1
 80043f0:	d00a      	beq.n	8004408 <sbrk_aligned+0x34>
 80043f2:	1cc4      	adds	r4, r0, #3
 80043f4:	f024 0403 	bic.w	r4, r4, #3
 80043f8:	42a0      	cmp	r0, r4
 80043fa:	d007      	beq.n	800440c <sbrk_aligned+0x38>
 80043fc:	1a21      	subs	r1, r4, r0
 80043fe:	4628      	mov	r0, r5
 8004400:	f000 fb96 	bl	8004b30 <_sbrk_r>
 8004404:	3001      	adds	r0, #1
 8004406:	d101      	bne.n	800440c <sbrk_aligned+0x38>
 8004408:	f04f 34ff 	mov.w	r4, #4294967295
 800440c:	4620      	mov	r0, r4
 800440e:	bd70      	pop	{r4, r5, r6, pc}
 8004410:	200002f0 	.word	0x200002f0

08004414 <_malloc_r>:
 8004414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004418:	1ccd      	adds	r5, r1, #3
 800441a:	f025 0503 	bic.w	r5, r5, #3
 800441e:	3508      	adds	r5, #8
 8004420:	2d0c      	cmp	r5, #12
 8004422:	bf38      	it	cc
 8004424:	250c      	movcc	r5, #12
 8004426:	2d00      	cmp	r5, #0
 8004428:	4607      	mov	r7, r0
 800442a:	db01      	blt.n	8004430 <_malloc_r+0x1c>
 800442c:	42a9      	cmp	r1, r5
 800442e:	d905      	bls.n	800443c <_malloc_r+0x28>
 8004430:	230c      	movs	r3, #12
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	2600      	movs	r6, #0
 8004436:	4630      	mov	r0, r6
 8004438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800443c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004510 <_malloc_r+0xfc>
 8004440:	f000 f868 	bl	8004514 <__malloc_lock>
 8004444:	f8d8 3000 	ldr.w	r3, [r8]
 8004448:	461c      	mov	r4, r3
 800444a:	bb5c      	cbnz	r4, 80044a4 <_malloc_r+0x90>
 800444c:	4629      	mov	r1, r5
 800444e:	4638      	mov	r0, r7
 8004450:	f7ff ffc0 	bl	80043d4 <sbrk_aligned>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	4604      	mov	r4, r0
 8004458:	d155      	bne.n	8004506 <_malloc_r+0xf2>
 800445a:	f8d8 4000 	ldr.w	r4, [r8]
 800445e:	4626      	mov	r6, r4
 8004460:	2e00      	cmp	r6, #0
 8004462:	d145      	bne.n	80044f0 <_malloc_r+0xdc>
 8004464:	2c00      	cmp	r4, #0
 8004466:	d048      	beq.n	80044fa <_malloc_r+0xe6>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	4631      	mov	r1, r6
 800446c:	4638      	mov	r0, r7
 800446e:	eb04 0903 	add.w	r9, r4, r3
 8004472:	f000 fb5d 	bl	8004b30 <_sbrk_r>
 8004476:	4581      	cmp	r9, r0
 8004478:	d13f      	bne.n	80044fa <_malloc_r+0xe6>
 800447a:	6821      	ldr	r1, [r4, #0]
 800447c:	1a6d      	subs	r5, r5, r1
 800447e:	4629      	mov	r1, r5
 8004480:	4638      	mov	r0, r7
 8004482:	f7ff ffa7 	bl	80043d4 <sbrk_aligned>
 8004486:	3001      	adds	r0, #1
 8004488:	d037      	beq.n	80044fa <_malloc_r+0xe6>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	442b      	add	r3, r5
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	f8d8 3000 	ldr.w	r3, [r8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d038      	beq.n	800450a <_malloc_r+0xf6>
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	42a2      	cmp	r2, r4
 800449c:	d12b      	bne.n	80044f6 <_malloc_r+0xe2>
 800449e:	2200      	movs	r2, #0
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	e00f      	b.n	80044c4 <_malloc_r+0xb0>
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	1b52      	subs	r2, r2, r5
 80044a8:	d41f      	bmi.n	80044ea <_malloc_r+0xd6>
 80044aa:	2a0b      	cmp	r2, #11
 80044ac:	d917      	bls.n	80044de <_malloc_r+0xca>
 80044ae:	1961      	adds	r1, r4, r5
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	6025      	str	r5, [r4, #0]
 80044b4:	bf18      	it	ne
 80044b6:	6059      	strne	r1, [r3, #4]
 80044b8:	6863      	ldr	r3, [r4, #4]
 80044ba:	bf08      	it	eq
 80044bc:	f8c8 1000 	streq.w	r1, [r8]
 80044c0:	5162      	str	r2, [r4, r5]
 80044c2:	604b      	str	r3, [r1, #4]
 80044c4:	4638      	mov	r0, r7
 80044c6:	f104 060b 	add.w	r6, r4, #11
 80044ca:	f000 f829 	bl	8004520 <__malloc_unlock>
 80044ce:	f026 0607 	bic.w	r6, r6, #7
 80044d2:	1d23      	adds	r3, r4, #4
 80044d4:	1af2      	subs	r2, r6, r3
 80044d6:	d0ae      	beq.n	8004436 <_malloc_r+0x22>
 80044d8:	1b9b      	subs	r3, r3, r6
 80044da:	50a3      	str	r3, [r4, r2]
 80044dc:	e7ab      	b.n	8004436 <_malloc_r+0x22>
 80044de:	42a3      	cmp	r3, r4
 80044e0:	6862      	ldr	r2, [r4, #4]
 80044e2:	d1dd      	bne.n	80044a0 <_malloc_r+0x8c>
 80044e4:	f8c8 2000 	str.w	r2, [r8]
 80044e8:	e7ec      	b.n	80044c4 <_malloc_r+0xb0>
 80044ea:	4623      	mov	r3, r4
 80044ec:	6864      	ldr	r4, [r4, #4]
 80044ee:	e7ac      	b.n	800444a <_malloc_r+0x36>
 80044f0:	4634      	mov	r4, r6
 80044f2:	6876      	ldr	r6, [r6, #4]
 80044f4:	e7b4      	b.n	8004460 <_malloc_r+0x4c>
 80044f6:	4613      	mov	r3, r2
 80044f8:	e7cc      	b.n	8004494 <_malloc_r+0x80>
 80044fa:	230c      	movs	r3, #12
 80044fc:	603b      	str	r3, [r7, #0]
 80044fe:	4638      	mov	r0, r7
 8004500:	f000 f80e 	bl	8004520 <__malloc_unlock>
 8004504:	e797      	b.n	8004436 <_malloc_r+0x22>
 8004506:	6025      	str	r5, [r4, #0]
 8004508:	e7dc      	b.n	80044c4 <_malloc_r+0xb0>
 800450a:	605b      	str	r3, [r3, #4]
 800450c:	deff      	udf	#255	; 0xff
 800450e:	bf00      	nop
 8004510:	200002ec 	.word	0x200002ec

08004514 <__malloc_lock>:
 8004514:	4801      	ldr	r0, [pc, #4]	; (800451c <__malloc_lock+0x8>)
 8004516:	f7ff bf0f 	b.w	8004338 <__retarget_lock_acquire_recursive>
 800451a:	bf00      	nop
 800451c:	200002e8 	.word	0x200002e8

08004520 <__malloc_unlock>:
 8004520:	4801      	ldr	r0, [pc, #4]	; (8004528 <__malloc_unlock+0x8>)
 8004522:	f7ff bf0a 	b.w	800433a <__retarget_lock_release_recursive>
 8004526:	bf00      	nop
 8004528:	200002e8 	.word	0x200002e8

0800452c <__ssputs_r>:
 800452c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004530:	688e      	ldr	r6, [r1, #8]
 8004532:	461f      	mov	r7, r3
 8004534:	42be      	cmp	r6, r7
 8004536:	680b      	ldr	r3, [r1, #0]
 8004538:	4682      	mov	sl, r0
 800453a:	460c      	mov	r4, r1
 800453c:	4690      	mov	r8, r2
 800453e:	d82c      	bhi.n	800459a <__ssputs_r+0x6e>
 8004540:	898a      	ldrh	r2, [r1, #12]
 8004542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004546:	d026      	beq.n	8004596 <__ssputs_r+0x6a>
 8004548:	6965      	ldr	r5, [r4, #20]
 800454a:	6909      	ldr	r1, [r1, #16]
 800454c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004550:	eba3 0901 	sub.w	r9, r3, r1
 8004554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004558:	1c7b      	adds	r3, r7, #1
 800455a:	444b      	add	r3, r9
 800455c:	106d      	asrs	r5, r5, #1
 800455e:	429d      	cmp	r5, r3
 8004560:	bf38      	it	cc
 8004562:	461d      	movcc	r5, r3
 8004564:	0553      	lsls	r3, r2, #21
 8004566:	d527      	bpl.n	80045b8 <__ssputs_r+0x8c>
 8004568:	4629      	mov	r1, r5
 800456a:	f7ff ff53 	bl	8004414 <_malloc_r>
 800456e:	4606      	mov	r6, r0
 8004570:	b360      	cbz	r0, 80045cc <__ssputs_r+0xa0>
 8004572:	6921      	ldr	r1, [r4, #16]
 8004574:	464a      	mov	r2, r9
 8004576:	f000 faeb 	bl	8004b50 <memcpy>
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	6126      	str	r6, [r4, #16]
 8004588:	6165      	str	r5, [r4, #20]
 800458a:	444e      	add	r6, r9
 800458c:	eba5 0509 	sub.w	r5, r5, r9
 8004590:	6026      	str	r6, [r4, #0]
 8004592:	60a5      	str	r5, [r4, #8]
 8004594:	463e      	mov	r6, r7
 8004596:	42be      	cmp	r6, r7
 8004598:	d900      	bls.n	800459c <__ssputs_r+0x70>
 800459a:	463e      	mov	r6, r7
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	4632      	mov	r2, r6
 80045a0:	4641      	mov	r1, r8
 80045a2:	f000 faab 	bl	8004afc <memmove>
 80045a6:	68a3      	ldr	r3, [r4, #8]
 80045a8:	1b9b      	subs	r3, r3, r6
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	4433      	add	r3, r6
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	2000      	movs	r0, #0
 80045b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b8:	462a      	mov	r2, r5
 80045ba:	f000 fad7 	bl	8004b6c <_realloc_r>
 80045be:	4606      	mov	r6, r0
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d1e0      	bne.n	8004586 <__ssputs_r+0x5a>
 80045c4:	6921      	ldr	r1, [r4, #16]
 80045c6:	4650      	mov	r0, sl
 80045c8:	f7ff feb8 	bl	800433c <_free_r>
 80045cc:	230c      	movs	r3, #12
 80045ce:	f8ca 3000 	str.w	r3, [sl]
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	f04f 30ff 	mov.w	r0, #4294967295
 80045de:	e7e9      	b.n	80045b4 <__ssputs_r+0x88>

080045e0 <_svfiprintf_r>:
 80045e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	4698      	mov	r8, r3
 80045e6:	898b      	ldrh	r3, [r1, #12]
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	b09d      	sub	sp, #116	; 0x74
 80045ec:	4607      	mov	r7, r0
 80045ee:	460d      	mov	r5, r1
 80045f0:	4614      	mov	r4, r2
 80045f2:	d50e      	bpl.n	8004612 <_svfiprintf_r+0x32>
 80045f4:	690b      	ldr	r3, [r1, #16]
 80045f6:	b963      	cbnz	r3, 8004612 <_svfiprintf_r+0x32>
 80045f8:	2140      	movs	r1, #64	; 0x40
 80045fa:	f7ff ff0b 	bl	8004414 <_malloc_r>
 80045fe:	6028      	str	r0, [r5, #0]
 8004600:	6128      	str	r0, [r5, #16]
 8004602:	b920      	cbnz	r0, 800460e <_svfiprintf_r+0x2e>
 8004604:	230c      	movs	r3, #12
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	e0d0      	b.n	80047b0 <_svfiprintf_r+0x1d0>
 800460e:	2340      	movs	r3, #64	; 0x40
 8004610:	616b      	str	r3, [r5, #20]
 8004612:	2300      	movs	r3, #0
 8004614:	9309      	str	r3, [sp, #36]	; 0x24
 8004616:	2320      	movs	r3, #32
 8004618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800461c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004620:	2330      	movs	r3, #48	; 0x30
 8004622:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047c8 <_svfiprintf_r+0x1e8>
 8004626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800462a:	f04f 0901 	mov.w	r9, #1
 800462e:	4623      	mov	r3, r4
 8004630:	469a      	mov	sl, r3
 8004632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004636:	b10a      	cbz	r2, 800463c <_svfiprintf_r+0x5c>
 8004638:	2a25      	cmp	r2, #37	; 0x25
 800463a:	d1f9      	bne.n	8004630 <_svfiprintf_r+0x50>
 800463c:	ebba 0b04 	subs.w	fp, sl, r4
 8004640:	d00b      	beq.n	800465a <_svfiprintf_r+0x7a>
 8004642:	465b      	mov	r3, fp
 8004644:	4622      	mov	r2, r4
 8004646:	4629      	mov	r1, r5
 8004648:	4638      	mov	r0, r7
 800464a:	f7ff ff6f 	bl	800452c <__ssputs_r>
 800464e:	3001      	adds	r0, #1
 8004650:	f000 80a9 	beq.w	80047a6 <_svfiprintf_r+0x1c6>
 8004654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004656:	445a      	add	r2, fp
 8004658:	9209      	str	r2, [sp, #36]	; 0x24
 800465a:	f89a 3000 	ldrb.w	r3, [sl]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80a1 	beq.w	80047a6 <_svfiprintf_r+0x1c6>
 8004664:	2300      	movs	r3, #0
 8004666:	f04f 32ff 	mov.w	r2, #4294967295
 800466a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800466e:	f10a 0a01 	add.w	sl, sl, #1
 8004672:	9304      	str	r3, [sp, #16]
 8004674:	9307      	str	r3, [sp, #28]
 8004676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800467a:	931a      	str	r3, [sp, #104]	; 0x68
 800467c:	4654      	mov	r4, sl
 800467e:	2205      	movs	r2, #5
 8004680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004684:	4850      	ldr	r0, [pc, #320]	; (80047c8 <_svfiprintf_r+0x1e8>)
 8004686:	f7fb fdcb 	bl	8000220 <memchr>
 800468a:	9a04      	ldr	r2, [sp, #16]
 800468c:	b9d8      	cbnz	r0, 80046c6 <_svfiprintf_r+0xe6>
 800468e:	06d0      	lsls	r0, r2, #27
 8004690:	bf44      	itt	mi
 8004692:	2320      	movmi	r3, #32
 8004694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004698:	0711      	lsls	r1, r2, #28
 800469a:	bf44      	itt	mi
 800469c:	232b      	movmi	r3, #43	; 0x2b
 800469e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046a2:	f89a 3000 	ldrb.w	r3, [sl]
 80046a6:	2b2a      	cmp	r3, #42	; 0x2a
 80046a8:	d015      	beq.n	80046d6 <_svfiprintf_r+0xf6>
 80046aa:	9a07      	ldr	r2, [sp, #28]
 80046ac:	4654      	mov	r4, sl
 80046ae:	2000      	movs	r0, #0
 80046b0:	f04f 0c0a 	mov.w	ip, #10
 80046b4:	4621      	mov	r1, r4
 80046b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046ba:	3b30      	subs	r3, #48	; 0x30
 80046bc:	2b09      	cmp	r3, #9
 80046be:	d94d      	bls.n	800475c <_svfiprintf_r+0x17c>
 80046c0:	b1b0      	cbz	r0, 80046f0 <_svfiprintf_r+0x110>
 80046c2:	9207      	str	r2, [sp, #28]
 80046c4:	e014      	b.n	80046f0 <_svfiprintf_r+0x110>
 80046c6:	eba0 0308 	sub.w	r3, r0, r8
 80046ca:	fa09 f303 	lsl.w	r3, r9, r3
 80046ce:	4313      	orrs	r3, r2
 80046d0:	9304      	str	r3, [sp, #16]
 80046d2:	46a2      	mov	sl, r4
 80046d4:	e7d2      	b.n	800467c <_svfiprintf_r+0x9c>
 80046d6:	9b03      	ldr	r3, [sp, #12]
 80046d8:	1d19      	adds	r1, r3, #4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	9103      	str	r1, [sp, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bfbb      	ittet	lt
 80046e2:	425b      	neglt	r3, r3
 80046e4:	f042 0202 	orrlt.w	r2, r2, #2
 80046e8:	9307      	strge	r3, [sp, #28]
 80046ea:	9307      	strlt	r3, [sp, #28]
 80046ec:	bfb8      	it	lt
 80046ee:	9204      	strlt	r2, [sp, #16]
 80046f0:	7823      	ldrb	r3, [r4, #0]
 80046f2:	2b2e      	cmp	r3, #46	; 0x2e
 80046f4:	d10c      	bne.n	8004710 <_svfiprintf_r+0x130>
 80046f6:	7863      	ldrb	r3, [r4, #1]
 80046f8:	2b2a      	cmp	r3, #42	; 0x2a
 80046fa:	d134      	bne.n	8004766 <_svfiprintf_r+0x186>
 80046fc:	9b03      	ldr	r3, [sp, #12]
 80046fe:	1d1a      	adds	r2, r3, #4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	9203      	str	r2, [sp, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	bfb8      	it	lt
 8004708:	f04f 33ff 	movlt.w	r3, #4294967295
 800470c:	3402      	adds	r4, #2
 800470e:	9305      	str	r3, [sp, #20]
 8004710:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80047d8 <_svfiprintf_r+0x1f8>
 8004714:	7821      	ldrb	r1, [r4, #0]
 8004716:	2203      	movs	r2, #3
 8004718:	4650      	mov	r0, sl
 800471a:	f7fb fd81 	bl	8000220 <memchr>
 800471e:	b138      	cbz	r0, 8004730 <_svfiprintf_r+0x150>
 8004720:	9b04      	ldr	r3, [sp, #16]
 8004722:	eba0 000a 	sub.w	r0, r0, sl
 8004726:	2240      	movs	r2, #64	; 0x40
 8004728:	4082      	lsls	r2, r0
 800472a:	4313      	orrs	r3, r2
 800472c:	3401      	adds	r4, #1
 800472e:	9304      	str	r3, [sp, #16]
 8004730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004734:	4825      	ldr	r0, [pc, #148]	; (80047cc <_svfiprintf_r+0x1ec>)
 8004736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800473a:	2206      	movs	r2, #6
 800473c:	f7fb fd70 	bl	8000220 <memchr>
 8004740:	2800      	cmp	r0, #0
 8004742:	d038      	beq.n	80047b6 <_svfiprintf_r+0x1d6>
 8004744:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <_svfiprintf_r+0x1f0>)
 8004746:	bb1b      	cbnz	r3, 8004790 <_svfiprintf_r+0x1b0>
 8004748:	9b03      	ldr	r3, [sp, #12]
 800474a:	3307      	adds	r3, #7
 800474c:	f023 0307 	bic.w	r3, r3, #7
 8004750:	3308      	adds	r3, #8
 8004752:	9303      	str	r3, [sp, #12]
 8004754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004756:	4433      	add	r3, r6
 8004758:	9309      	str	r3, [sp, #36]	; 0x24
 800475a:	e768      	b.n	800462e <_svfiprintf_r+0x4e>
 800475c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004760:	460c      	mov	r4, r1
 8004762:	2001      	movs	r0, #1
 8004764:	e7a6      	b.n	80046b4 <_svfiprintf_r+0xd4>
 8004766:	2300      	movs	r3, #0
 8004768:	3401      	adds	r4, #1
 800476a:	9305      	str	r3, [sp, #20]
 800476c:	4619      	mov	r1, r3
 800476e:	f04f 0c0a 	mov.w	ip, #10
 8004772:	4620      	mov	r0, r4
 8004774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004778:	3a30      	subs	r2, #48	; 0x30
 800477a:	2a09      	cmp	r2, #9
 800477c:	d903      	bls.n	8004786 <_svfiprintf_r+0x1a6>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0c6      	beq.n	8004710 <_svfiprintf_r+0x130>
 8004782:	9105      	str	r1, [sp, #20]
 8004784:	e7c4      	b.n	8004710 <_svfiprintf_r+0x130>
 8004786:	fb0c 2101 	mla	r1, ip, r1, r2
 800478a:	4604      	mov	r4, r0
 800478c:	2301      	movs	r3, #1
 800478e:	e7f0      	b.n	8004772 <_svfiprintf_r+0x192>
 8004790:	ab03      	add	r3, sp, #12
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	462a      	mov	r2, r5
 8004796:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <_svfiprintf_r+0x1f4>)
 8004798:	a904      	add	r1, sp, #16
 800479a:	4638      	mov	r0, r7
 800479c:	f3af 8000 	nop.w
 80047a0:	1c42      	adds	r2, r0, #1
 80047a2:	4606      	mov	r6, r0
 80047a4:	d1d6      	bne.n	8004754 <_svfiprintf_r+0x174>
 80047a6:	89ab      	ldrh	r3, [r5, #12]
 80047a8:	065b      	lsls	r3, r3, #25
 80047aa:	f53f af2d 	bmi.w	8004608 <_svfiprintf_r+0x28>
 80047ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047b0:	b01d      	add	sp, #116	; 0x74
 80047b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b6:	ab03      	add	r3, sp, #12
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	462a      	mov	r2, r5
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <_svfiprintf_r+0x1f4>)
 80047be:	a904      	add	r1, sp, #16
 80047c0:	4638      	mov	r0, r7
 80047c2:	f000 f879 	bl	80048b8 <_printf_i>
 80047c6:	e7eb      	b.n	80047a0 <_svfiprintf_r+0x1c0>
 80047c8:	08004ee8 	.word	0x08004ee8
 80047cc:	08004ef2 	.word	0x08004ef2
 80047d0:	00000000 	.word	0x00000000
 80047d4:	0800452d 	.word	0x0800452d
 80047d8:	08004eee 	.word	0x08004eee

080047dc <_printf_common>:
 80047dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	4616      	mov	r6, r2
 80047e2:	4699      	mov	r9, r3
 80047e4:	688a      	ldr	r2, [r1, #8]
 80047e6:	690b      	ldr	r3, [r1, #16]
 80047e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047ec:	4293      	cmp	r3, r2
 80047ee:	bfb8      	it	lt
 80047f0:	4613      	movlt	r3, r2
 80047f2:	6033      	str	r3, [r6, #0]
 80047f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047f8:	4607      	mov	r7, r0
 80047fa:	460c      	mov	r4, r1
 80047fc:	b10a      	cbz	r2, 8004802 <_printf_common+0x26>
 80047fe:	3301      	adds	r3, #1
 8004800:	6033      	str	r3, [r6, #0]
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	0699      	lsls	r1, r3, #26
 8004806:	bf42      	ittt	mi
 8004808:	6833      	ldrmi	r3, [r6, #0]
 800480a:	3302      	addmi	r3, #2
 800480c:	6033      	strmi	r3, [r6, #0]
 800480e:	6825      	ldr	r5, [r4, #0]
 8004810:	f015 0506 	ands.w	r5, r5, #6
 8004814:	d106      	bne.n	8004824 <_printf_common+0x48>
 8004816:	f104 0a19 	add.w	sl, r4, #25
 800481a:	68e3      	ldr	r3, [r4, #12]
 800481c:	6832      	ldr	r2, [r6, #0]
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	42ab      	cmp	r3, r5
 8004822:	dc26      	bgt.n	8004872 <_printf_common+0x96>
 8004824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004828:	1e13      	subs	r3, r2, #0
 800482a:	6822      	ldr	r2, [r4, #0]
 800482c:	bf18      	it	ne
 800482e:	2301      	movne	r3, #1
 8004830:	0692      	lsls	r2, r2, #26
 8004832:	d42b      	bmi.n	800488c <_printf_common+0xb0>
 8004834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004838:	4649      	mov	r1, r9
 800483a:	4638      	mov	r0, r7
 800483c:	47c0      	blx	r8
 800483e:	3001      	adds	r0, #1
 8004840:	d01e      	beq.n	8004880 <_printf_common+0xa4>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	6922      	ldr	r2, [r4, #16]
 8004846:	f003 0306 	and.w	r3, r3, #6
 800484a:	2b04      	cmp	r3, #4
 800484c:	bf02      	ittt	eq
 800484e:	68e5      	ldreq	r5, [r4, #12]
 8004850:	6833      	ldreq	r3, [r6, #0]
 8004852:	1aed      	subeq	r5, r5, r3
 8004854:	68a3      	ldr	r3, [r4, #8]
 8004856:	bf0c      	ite	eq
 8004858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800485c:	2500      	movne	r5, #0
 800485e:	4293      	cmp	r3, r2
 8004860:	bfc4      	itt	gt
 8004862:	1a9b      	subgt	r3, r3, r2
 8004864:	18ed      	addgt	r5, r5, r3
 8004866:	2600      	movs	r6, #0
 8004868:	341a      	adds	r4, #26
 800486a:	42b5      	cmp	r5, r6
 800486c:	d11a      	bne.n	80048a4 <_printf_common+0xc8>
 800486e:	2000      	movs	r0, #0
 8004870:	e008      	b.n	8004884 <_printf_common+0xa8>
 8004872:	2301      	movs	r3, #1
 8004874:	4652      	mov	r2, sl
 8004876:	4649      	mov	r1, r9
 8004878:	4638      	mov	r0, r7
 800487a:	47c0      	blx	r8
 800487c:	3001      	adds	r0, #1
 800487e:	d103      	bne.n	8004888 <_printf_common+0xac>
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004888:	3501      	adds	r5, #1
 800488a:	e7c6      	b.n	800481a <_printf_common+0x3e>
 800488c:	18e1      	adds	r1, r4, r3
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	2030      	movs	r0, #48	; 0x30
 8004892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004896:	4422      	add	r2, r4
 8004898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800489c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048a0:	3302      	adds	r3, #2
 80048a2:	e7c7      	b.n	8004834 <_printf_common+0x58>
 80048a4:	2301      	movs	r3, #1
 80048a6:	4622      	mov	r2, r4
 80048a8:	4649      	mov	r1, r9
 80048aa:	4638      	mov	r0, r7
 80048ac:	47c0      	blx	r8
 80048ae:	3001      	adds	r0, #1
 80048b0:	d0e6      	beq.n	8004880 <_printf_common+0xa4>
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7d9      	b.n	800486a <_printf_common+0x8e>
	...

080048b8 <_printf_i>:
 80048b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	7e0f      	ldrb	r7, [r1, #24]
 80048be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048c0:	2f78      	cmp	r7, #120	; 0x78
 80048c2:	4691      	mov	r9, r2
 80048c4:	4680      	mov	r8, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	469a      	mov	sl, r3
 80048ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048ce:	d807      	bhi.n	80048e0 <_printf_i+0x28>
 80048d0:	2f62      	cmp	r7, #98	; 0x62
 80048d2:	d80a      	bhi.n	80048ea <_printf_i+0x32>
 80048d4:	2f00      	cmp	r7, #0
 80048d6:	f000 80d4 	beq.w	8004a82 <_printf_i+0x1ca>
 80048da:	2f58      	cmp	r7, #88	; 0x58
 80048dc:	f000 80c0 	beq.w	8004a60 <_printf_i+0x1a8>
 80048e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048e8:	e03a      	b.n	8004960 <_printf_i+0xa8>
 80048ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ee:	2b15      	cmp	r3, #21
 80048f0:	d8f6      	bhi.n	80048e0 <_printf_i+0x28>
 80048f2:	a101      	add	r1, pc, #4	; (adr r1, 80048f8 <_printf_i+0x40>)
 80048f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048f8:	08004951 	.word	0x08004951
 80048fc:	08004965 	.word	0x08004965
 8004900:	080048e1 	.word	0x080048e1
 8004904:	080048e1 	.word	0x080048e1
 8004908:	080048e1 	.word	0x080048e1
 800490c:	080048e1 	.word	0x080048e1
 8004910:	08004965 	.word	0x08004965
 8004914:	080048e1 	.word	0x080048e1
 8004918:	080048e1 	.word	0x080048e1
 800491c:	080048e1 	.word	0x080048e1
 8004920:	080048e1 	.word	0x080048e1
 8004924:	08004a69 	.word	0x08004a69
 8004928:	08004991 	.word	0x08004991
 800492c:	08004a23 	.word	0x08004a23
 8004930:	080048e1 	.word	0x080048e1
 8004934:	080048e1 	.word	0x080048e1
 8004938:	08004a8b 	.word	0x08004a8b
 800493c:	080048e1 	.word	0x080048e1
 8004940:	08004991 	.word	0x08004991
 8004944:	080048e1 	.word	0x080048e1
 8004948:	080048e1 	.word	0x080048e1
 800494c:	08004a2b 	.word	0x08004a2b
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	1d1a      	adds	r2, r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	602a      	str	r2, [r5, #0]
 8004958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800495c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004960:	2301      	movs	r3, #1
 8004962:	e09f      	b.n	8004aa4 <_printf_i+0x1ec>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	682b      	ldr	r3, [r5, #0]
 8004968:	0607      	lsls	r7, r0, #24
 800496a:	f103 0104 	add.w	r1, r3, #4
 800496e:	6029      	str	r1, [r5, #0]
 8004970:	d501      	bpl.n	8004976 <_printf_i+0xbe>
 8004972:	681e      	ldr	r6, [r3, #0]
 8004974:	e003      	b.n	800497e <_printf_i+0xc6>
 8004976:	0646      	lsls	r6, r0, #25
 8004978:	d5fb      	bpl.n	8004972 <_printf_i+0xba>
 800497a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800497e:	2e00      	cmp	r6, #0
 8004980:	da03      	bge.n	800498a <_printf_i+0xd2>
 8004982:	232d      	movs	r3, #45	; 0x2d
 8004984:	4276      	negs	r6, r6
 8004986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800498a:	485a      	ldr	r0, [pc, #360]	; (8004af4 <_printf_i+0x23c>)
 800498c:	230a      	movs	r3, #10
 800498e:	e012      	b.n	80049b6 <_printf_i+0xfe>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	6820      	ldr	r0, [r4, #0]
 8004994:	1d19      	adds	r1, r3, #4
 8004996:	6029      	str	r1, [r5, #0]
 8004998:	0605      	lsls	r5, r0, #24
 800499a:	d501      	bpl.n	80049a0 <_printf_i+0xe8>
 800499c:	681e      	ldr	r6, [r3, #0]
 800499e:	e002      	b.n	80049a6 <_printf_i+0xee>
 80049a0:	0641      	lsls	r1, r0, #25
 80049a2:	d5fb      	bpl.n	800499c <_printf_i+0xe4>
 80049a4:	881e      	ldrh	r6, [r3, #0]
 80049a6:	4853      	ldr	r0, [pc, #332]	; (8004af4 <_printf_i+0x23c>)
 80049a8:	2f6f      	cmp	r7, #111	; 0x6f
 80049aa:	bf0c      	ite	eq
 80049ac:	2308      	moveq	r3, #8
 80049ae:	230a      	movne	r3, #10
 80049b0:	2100      	movs	r1, #0
 80049b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049b6:	6865      	ldr	r5, [r4, #4]
 80049b8:	60a5      	str	r5, [r4, #8]
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	bfa2      	ittt	ge
 80049be:	6821      	ldrge	r1, [r4, #0]
 80049c0:	f021 0104 	bicge.w	r1, r1, #4
 80049c4:	6021      	strge	r1, [r4, #0]
 80049c6:	b90e      	cbnz	r6, 80049cc <_printf_i+0x114>
 80049c8:	2d00      	cmp	r5, #0
 80049ca:	d04b      	beq.n	8004a64 <_printf_i+0x1ac>
 80049cc:	4615      	mov	r5, r2
 80049ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80049d2:	fb03 6711 	mls	r7, r3, r1, r6
 80049d6:	5dc7      	ldrb	r7, [r0, r7]
 80049d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049dc:	4637      	mov	r7, r6
 80049de:	42bb      	cmp	r3, r7
 80049e0:	460e      	mov	r6, r1
 80049e2:	d9f4      	bls.n	80049ce <_printf_i+0x116>
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d10b      	bne.n	8004a00 <_printf_i+0x148>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	07de      	lsls	r6, r3, #31
 80049ec:	d508      	bpl.n	8004a00 <_printf_i+0x148>
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	6861      	ldr	r1, [r4, #4]
 80049f2:	4299      	cmp	r1, r3
 80049f4:	bfde      	ittt	le
 80049f6:	2330      	movle	r3, #48	; 0x30
 80049f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a00:	1b52      	subs	r2, r2, r5
 8004a02:	6122      	str	r2, [r4, #16]
 8004a04:	f8cd a000 	str.w	sl, [sp]
 8004a08:	464b      	mov	r3, r9
 8004a0a:	aa03      	add	r2, sp, #12
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4640      	mov	r0, r8
 8004a10:	f7ff fee4 	bl	80047dc <_printf_common>
 8004a14:	3001      	adds	r0, #1
 8004a16:	d14a      	bne.n	8004aae <_printf_i+0x1f6>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	b004      	add	sp, #16
 8004a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	f043 0320 	orr.w	r3, r3, #32
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	4833      	ldr	r0, [pc, #204]	; (8004af8 <_printf_i+0x240>)
 8004a2c:	2778      	movs	r7, #120	; 0x78
 8004a2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	6829      	ldr	r1, [r5, #0]
 8004a36:	061f      	lsls	r7, r3, #24
 8004a38:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a3c:	d402      	bmi.n	8004a44 <_printf_i+0x18c>
 8004a3e:	065f      	lsls	r7, r3, #25
 8004a40:	bf48      	it	mi
 8004a42:	b2b6      	uxthmi	r6, r6
 8004a44:	07df      	lsls	r7, r3, #31
 8004a46:	bf48      	it	mi
 8004a48:	f043 0320 	orrmi.w	r3, r3, #32
 8004a4c:	6029      	str	r1, [r5, #0]
 8004a4e:	bf48      	it	mi
 8004a50:	6023      	strmi	r3, [r4, #0]
 8004a52:	b91e      	cbnz	r6, 8004a5c <_printf_i+0x1a4>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	f023 0320 	bic.w	r3, r3, #32
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	e7a7      	b.n	80049b0 <_printf_i+0xf8>
 8004a60:	4824      	ldr	r0, [pc, #144]	; (8004af4 <_printf_i+0x23c>)
 8004a62:	e7e4      	b.n	8004a2e <_printf_i+0x176>
 8004a64:	4615      	mov	r5, r2
 8004a66:	e7bd      	b.n	80049e4 <_printf_i+0x12c>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	6826      	ldr	r6, [r4, #0]
 8004a6c:	6961      	ldr	r1, [r4, #20]
 8004a6e:	1d18      	adds	r0, r3, #4
 8004a70:	6028      	str	r0, [r5, #0]
 8004a72:	0635      	lsls	r5, r6, #24
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	d501      	bpl.n	8004a7c <_printf_i+0x1c4>
 8004a78:	6019      	str	r1, [r3, #0]
 8004a7a:	e002      	b.n	8004a82 <_printf_i+0x1ca>
 8004a7c:	0670      	lsls	r0, r6, #25
 8004a7e:	d5fb      	bpl.n	8004a78 <_printf_i+0x1c0>
 8004a80:	8019      	strh	r1, [r3, #0]
 8004a82:	2300      	movs	r3, #0
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	4615      	mov	r5, r2
 8004a88:	e7bc      	b.n	8004a04 <_printf_i+0x14c>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	1d1a      	adds	r2, r3, #4
 8004a8e:	602a      	str	r2, [r5, #0]
 8004a90:	681d      	ldr	r5, [r3, #0]
 8004a92:	6862      	ldr	r2, [r4, #4]
 8004a94:	2100      	movs	r1, #0
 8004a96:	4628      	mov	r0, r5
 8004a98:	f7fb fbc2 	bl	8000220 <memchr>
 8004a9c:	b108      	cbz	r0, 8004aa2 <_printf_i+0x1ea>
 8004a9e:	1b40      	subs	r0, r0, r5
 8004aa0:	6060      	str	r0, [r4, #4]
 8004aa2:	6863      	ldr	r3, [r4, #4]
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aac:	e7aa      	b.n	8004a04 <_printf_i+0x14c>
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	47d0      	blx	sl
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d0ad      	beq.n	8004a18 <_printf_i+0x160>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	079b      	lsls	r3, r3, #30
 8004ac0:	d413      	bmi.n	8004aea <_printf_i+0x232>
 8004ac2:	68e0      	ldr	r0, [r4, #12]
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	4298      	cmp	r0, r3
 8004ac8:	bfb8      	it	lt
 8004aca:	4618      	movlt	r0, r3
 8004acc:	e7a6      	b.n	8004a1c <_printf_i+0x164>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4632      	mov	r2, r6
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	47d0      	blx	sl
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d09d      	beq.n	8004a18 <_printf_i+0x160>
 8004adc:	3501      	adds	r5, #1
 8004ade:	68e3      	ldr	r3, [r4, #12]
 8004ae0:	9903      	ldr	r1, [sp, #12]
 8004ae2:	1a5b      	subs	r3, r3, r1
 8004ae4:	42ab      	cmp	r3, r5
 8004ae6:	dcf2      	bgt.n	8004ace <_printf_i+0x216>
 8004ae8:	e7eb      	b.n	8004ac2 <_printf_i+0x20a>
 8004aea:	2500      	movs	r5, #0
 8004aec:	f104 0619 	add.w	r6, r4, #25
 8004af0:	e7f5      	b.n	8004ade <_printf_i+0x226>
 8004af2:	bf00      	nop
 8004af4:	08004ef9 	.word	0x08004ef9
 8004af8:	08004f0a 	.word	0x08004f0a

08004afc <memmove>:
 8004afc:	4288      	cmp	r0, r1
 8004afe:	b510      	push	{r4, lr}
 8004b00:	eb01 0402 	add.w	r4, r1, r2
 8004b04:	d902      	bls.n	8004b0c <memmove+0x10>
 8004b06:	4284      	cmp	r4, r0
 8004b08:	4623      	mov	r3, r4
 8004b0a:	d807      	bhi.n	8004b1c <memmove+0x20>
 8004b0c:	1e43      	subs	r3, r0, #1
 8004b0e:	42a1      	cmp	r1, r4
 8004b10:	d008      	beq.n	8004b24 <memmove+0x28>
 8004b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b1a:	e7f8      	b.n	8004b0e <memmove+0x12>
 8004b1c:	4402      	add	r2, r0
 8004b1e:	4601      	mov	r1, r0
 8004b20:	428a      	cmp	r2, r1
 8004b22:	d100      	bne.n	8004b26 <memmove+0x2a>
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b2e:	e7f7      	b.n	8004b20 <memmove+0x24>

08004b30 <_sbrk_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4d06      	ldr	r5, [pc, #24]	; (8004b4c <_sbrk_r+0x1c>)
 8004b34:	2300      	movs	r3, #0
 8004b36:	4604      	mov	r4, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	f7fc fd3c 	bl	80015b8 <_sbrk>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d102      	bne.n	8004b4a <_sbrk_r+0x1a>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	b103      	cbz	r3, 8004b4a <_sbrk_r+0x1a>
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	200002e4 	.word	0x200002e4

08004b50 <memcpy>:
 8004b50:	440a      	add	r2, r1
 8004b52:	4291      	cmp	r1, r2
 8004b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b58:	d100      	bne.n	8004b5c <memcpy+0xc>
 8004b5a:	4770      	bx	lr
 8004b5c:	b510      	push	{r4, lr}
 8004b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b66:	4291      	cmp	r1, r2
 8004b68:	d1f9      	bne.n	8004b5e <memcpy+0xe>
 8004b6a:	bd10      	pop	{r4, pc}

08004b6c <_realloc_r>:
 8004b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b70:	4680      	mov	r8, r0
 8004b72:	4614      	mov	r4, r2
 8004b74:	460e      	mov	r6, r1
 8004b76:	b921      	cbnz	r1, 8004b82 <_realloc_r+0x16>
 8004b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	f7ff bc49 	b.w	8004414 <_malloc_r>
 8004b82:	b92a      	cbnz	r2, 8004b90 <_realloc_r+0x24>
 8004b84:	f7ff fbda 	bl	800433c <_free_r>
 8004b88:	4625      	mov	r5, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b90:	f000 f81b 	bl	8004bca <_malloc_usable_size_r>
 8004b94:	4284      	cmp	r4, r0
 8004b96:	4607      	mov	r7, r0
 8004b98:	d802      	bhi.n	8004ba0 <_realloc_r+0x34>
 8004b9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b9e:	d812      	bhi.n	8004bc6 <_realloc_r+0x5a>
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	f7ff fc36 	bl	8004414 <_malloc_r>
 8004ba8:	4605      	mov	r5, r0
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d0ed      	beq.n	8004b8a <_realloc_r+0x1e>
 8004bae:	42bc      	cmp	r4, r7
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	bf28      	it	cs
 8004bb6:	463a      	movcs	r2, r7
 8004bb8:	f7ff ffca 	bl	8004b50 <memcpy>
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	f7ff fbbc 	bl	800433c <_free_r>
 8004bc4:	e7e1      	b.n	8004b8a <_realloc_r+0x1e>
 8004bc6:	4635      	mov	r5, r6
 8004bc8:	e7df      	b.n	8004b8a <_realloc_r+0x1e>

08004bca <_malloc_usable_size_r>:
 8004bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bce:	1f18      	subs	r0, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bfbc      	itt	lt
 8004bd4:	580b      	ldrlt	r3, [r1, r0]
 8004bd6:	18c0      	addlt	r0, r0, r3
 8004bd8:	4770      	bx	lr
	...

08004bdc <_init>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr

08004be8 <_fini>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr
