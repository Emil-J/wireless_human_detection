
Zavrsni_Rad_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de0  08005de0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de8  08005de8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000005c  08005e4c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08005e4c  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128aa  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028d0  00000000  00000000  00032979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00035250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d6e  00000000  00000000  00036388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028386  00000000  00000000  000370f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a9e  00000000  00000000  0005f47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6245  00000000  00000000  00074f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d40  00000000  00000000  0016b160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005920 	.word	0x08005920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005920 	.word	0x08005920

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <SPI_CS_WRITE>:
#include "CC1101_E07_M1101D_SMA.h"

void SPI_CS_WRITE(bool state)	 // State machine za CS
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	if(state)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d006      	beq.n	800059a <SPI_CS_WRITE+0x1e>
	  {
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <SPI_CS_WRITE+0x34>)
 8000594:	f001 fcac 	bl	8001ef0 <HAL_GPIO_WritePin>
	  }
	else
	  {
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
	  }
}
 8000598:	e005      	b.n	80005a6 <SPI_CS_WRITE+0x2a>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <SPI_CS_WRITE+0x34>)
 80005a2:	f001 fca5 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	48000400 	.word	0x48000400

080005b4 <manual_POR>:

void manual_POR()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
	uint8_t status = 0x00;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]
	char serialStatus[10];

	SPI_CS_WRITE(0);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff ffdc 	bl	800057c <SPI_CS_WRITE>
	delay_50ns(2);
 80005c4:	2002      	movs	r0, #2
 80005c6:	f001 f807 	bl	80015d8 <delay_50ns>
	SPI_CS_WRITE(1);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f7ff ffd6 	bl	800057c <SPI_CS_WRITE>
	delay_us(41);
 80005d0:	2029      	movs	r0, #41	; 0x29
 80005d2:	f000 ffe7 	bl	80015a4 <delay_us>

	SPI_CS_WRITE(0);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff ffd0 	bl	800057c <SPI_CS_WRITE>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 80005dc:	bf00      	nop
 80005de:	2104      	movs	r1, #4
 80005e0:	4811      	ldr	r0, [pc, #68]	; (8000628 <manual_POR+0x74>)
 80005e2:	f001 fc6d 	bl	8001ec0 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f8      	bne.n	80005de <manual_POR+0x2a>
	status = command_strobe(SRES);
 80005ec:	2030      	movs	r0, #48	; 0x30
 80005ee:	f000 f911 	bl	8000814 <command_strobe>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	SPI_CS_WRITE(1);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff ffc0 	bl	800057c <SPI_CS_WRITE>

	snprintf(serialStatus, sizeof(serialStatus), "0x%02X\r\n", status);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	1d38      	adds	r0, r7, #4
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <manual_POR+0x78>)
 8000602:	210a      	movs	r1, #10
 8000604:	f004 fcb4 	bl	8004f70 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fde0 	bl	80001d0 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	1d39      	adds	r1, r7, #4
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <manual_POR+0x7c>)
 800061c:	f003 ff50 	bl	80044c0 <HAL_UART_Transmit>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	48000800 	.word	0x48000800
 800062c:	08005938 	.word	0x08005938
 8000630:	20000200 	.word	0x20000200

08000634 <cc1101_init>:

void cc1101_init(bool state)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	if(state)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <cc1101_init+0x16>
	{
		write_tx_cc1101_config();	// Konfiguracija tx cc1101 čipa
 8000644:	f000 f80d 	bl	8000662 <write_tx_cc1101_config>
 8000648:	e001      	b.n	800064e <cc1101_init+0x1a>
	}
	else
	{
		write_rx_cc1101_config();	// Konfiguracija rx cc1101 čipa
 800064a:	f000 f87a 	bl	8000742 <write_rx_cc1101_config>
	}
	command_strobe(SFTX);		// Flush TX FIFO buffer
 800064e:	203b      	movs	r0, #59	; 0x3b
 8000650:	f000 f8e0 	bl	8000814 <command_strobe>
	command_strobe(SFRX);		// Flush RX FIFO buffer
 8000654:	203a      	movs	r0, #58	; 0x3a
 8000656:	f000 f8dd 	bl	8000814 <command_strobe>

}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <write_tx_cc1101_config>:
	write_single_byte(TEST0, CC1101_POSTAVKA_TEST0);
}


void write_tx_cc1101_config()	//svih 26 postavki, osim 1 u komentarima
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
	write_single_byte(PATABLE, 0x60);
 8000666:	2160      	movs	r1, #96	; 0x60
 8000668:	203e      	movs	r0, #62	; 0x3e
 800066a:	f000 faab 	bl	8000bc4 <write_single_byte>
	write_single_byte(IOCFG0, CC1101_POSTAVKA_IOCFG0);
 800066e:	2106      	movs	r1, #6
 8000670:	2002      	movs	r0, #2
 8000672:	f000 faa7 	bl	8000bc4 <write_single_byte>
	write_single_byte(FIFOTHR, CC1101_POSTAVKA_FIFOTHR);
 8000676:	2147      	movs	r1, #71	; 0x47
 8000678:	2003      	movs	r0, #3
 800067a:	f000 faa3 	bl	8000bc4 <write_single_byte>
	write_single_byte(PKTLEN, CC1101_POSTAVKA_PKTLEN);
 800067e:	2102      	movs	r1, #2
 8000680:	2006      	movs	r0, #6
 8000682:	f000 fa9f 	bl	8000bc4 <write_single_byte>
	//	PKTCTRL1
	write_single_byte(PKTCTRL0, CC1101_POSTAVKA_PKTCTRL0);
 8000686:	2144      	movs	r1, #68	; 0x44
 8000688:	2008      	movs	r0, #8
 800068a:	f000 fa9b 	bl	8000bc4 <write_single_byte>
	write_single_byte(ADDR, CC1101_POSTAVKA_ADDR);
 800068e:	2111      	movs	r1, #17
 8000690:	2009      	movs	r0, #9
 8000692:	f000 fa97 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSCTRL1, CC1101_POSTAVKA_FSCTRL1);
 8000696:	2106      	movs	r1, #6
 8000698:	200b      	movs	r0, #11
 800069a:	f000 fa93 	bl	8000bc4 <write_single_byte>
	write_single_byte(FREQ2, CC1101_POSTAVKA_FREQ2);
 800069e:	2110      	movs	r1, #16
 80006a0:	200d      	movs	r0, #13
 80006a2:	f000 fa8f 	bl	8000bc4 <write_single_byte>
	write_single_byte(FREQ1, CC1101_POSTAVKA_FREQ1);
 80006a6:	21a7      	movs	r1, #167	; 0xa7
 80006a8:	200e      	movs	r0, #14
 80006aa:	f000 fa8b 	bl	8000bc4 <write_single_byte>
	write_single_byte(FREQ0, CC1101_POSTAVKA_FREQ0);
 80006ae:	2162      	movs	r1, #98	; 0x62
 80006b0:	200f      	movs	r0, #15
 80006b2:	f000 fa87 	bl	8000bc4 <write_single_byte>
	write_single_byte(MDMCFG4, CC1101_POSTAVKA_MDMCFG4);
 80006b6:	21f5      	movs	r1, #245	; 0xf5
 80006b8:	2010      	movs	r0, #16
 80006ba:	f000 fa83 	bl	8000bc4 <write_single_byte>
	write_single_byte(MDMCFG3, CC1101_POSTAVKA_MDMCFG3);
 80006be:	2183      	movs	r1, #131	; 0x83
 80006c0:	2011      	movs	r0, #17
 80006c2:	f000 fa7f 	bl	8000bc4 <write_single_byte>
	write_single_byte(MDMCFG2, CC1101_POSTAVKA_MDMCFG2);
 80006c6:	2191      	movs	r1, #145	; 0x91
 80006c8:	2012      	movs	r0, #18
 80006ca:	f000 fa7b 	bl	8000bc4 <write_single_byte>
	write_single_byte(DEVIATN, CC1101_POSTAVKA_DEVIATN);
 80006ce:	2115      	movs	r1, #21
 80006d0:	2015      	movs	r0, #21
 80006d2:	f000 fa77 	bl	8000bc4 <write_single_byte>
	write_single_byte(MCSM0, CC1101_POSTAVKA_MCSM0);
 80006d6:	2118      	movs	r1, #24
 80006d8:	2018      	movs	r0, #24
 80006da:	f000 fa73 	bl	8000bc4 <write_single_byte>
	write_single_byte(FOCCFG, CC1101_POSTAVKA_FOCCFG);
 80006de:	2116      	movs	r1, #22
 80006e0:	2019      	movs	r0, #25
 80006e2:	f000 fa6f 	bl	8000bc4 <write_single_byte>
	write_single_byte(WORCTRL, CC1101_POSTAVKA_WORCTRL);
 80006e6:	21fb      	movs	r1, #251	; 0xfb
 80006e8:	2020      	movs	r0, #32
 80006ea:	f000 fa6b 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSCAL3, CC1101_POSTAVKA_FSCAL3);
 80006ee:	21e9      	movs	r1, #233	; 0xe9
 80006f0:	2023      	movs	r0, #35	; 0x23
 80006f2:	f000 fa67 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSCAL2, CC1101_POSTAVKA_FSCAL2);
 80006f6:	212a      	movs	r1, #42	; 0x2a
 80006f8:	2024      	movs	r0, #36	; 0x24
 80006fa:	f000 fa63 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSCAL1, CC1101_POSTAVKA_FSCAL1);
 80006fe:	2100      	movs	r1, #0
 8000700:	2025      	movs	r0, #37	; 0x25
 8000702:	f000 fa5f 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSCAL0, CC1101_POSTAVKA_FSCAL0);
 8000706:	211f      	movs	r1, #31
 8000708:	2026      	movs	r0, #38	; 0x26
 800070a:	f000 fa5b 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSTEST, CC1101_POSTAVKA_FSTEST);
 800070e:	2159      	movs	r1, #89	; 0x59
 8000710:	2029      	movs	r0, #41	; 0x29
 8000712:	f000 fa57 	bl	8000bc4 <write_single_byte>
	write_single_byte(PTEST, CC1101_POSTAVKA_PTEST);
 8000716:	217f      	movs	r1, #127	; 0x7f
 8000718:	202a      	movs	r0, #42	; 0x2a
 800071a:	f000 fa53 	bl	8000bc4 <write_single_byte>
	write_single_byte(AGCTEST, CC1101_POSTAVKA_AGCTEST);
 800071e:	213f      	movs	r1, #63	; 0x3f
 8000720:	202b      	movs	r0, #43	; 0x2b
 8000722:	f000 fa4f 	bl	8000bc4 <write_single_byte>
	write_single_byte(TEST2, CC1101_POSTAVKA_TEST2);
 8000726:	2181      	movs	r1, #129	; 0x81
 8000728:	202c      	movs	r0, #44	; 0x2c
 800072a:	f000 fa4b 	bl	8000bc4 <write_single_byte>
	write_single_byte(TEST1, CC1101_POSTAVKA_TEST1);
 800072e:	2135      	movs	r1, #53	; 0x35
 8000730:	202d      	movs	r0, #45	; 0x2d
 8000732:	f000 fa47 	bl	8000bc4 <write_single_byte>
	write_single_byte(TEST0, CC1101_POSTAVKA_TEST0);
 8000736:	2109      	movs	r1, #9
 8000738:	202e      	movs	r0, #46	; 0x2e
 800073a:	f000 fa43 	bl	8000bc4 <write_single_byte>

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}

08000742 <write_rx_cc1101_config>:

void write_rx_cc1101_config()	//svih 24 postavki, osim 3 ovih u komentarima
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
	write_single_byte(PATABLE, 0x60);
 8000746:	2160      	movs	r1, #96	; 0x60
 8000748:	203e      	movs	r0, #62	; 0x3e
 800074a:	f000 fa3b 	bl	8000bc4 <write_single_byte>
	write_single_byte(IOCFG0, CC1101_POSTAVKA_IOCFG0);
 800074e:	2106      	movs	r1, #6
 8000750:	2002      	movs	r0, #2
 8000752:	f000 fa37 	bl	8000bc4 <write_single_byte>
	write_single_byte(FIFOTHR, CC1101_POSTAVKA_FIFOTHR);
 8000756:	2147      	movs	r1, #71	; 0x47
 8000758:	2003      	movs	r0, #3
 800075a:	f000 fa33 	bl	8000bc4 <write_single_byte>
	write_single_byte(PKTLEN, CC1101_POSTAVKA_PKTLEN);
 800075e:	2102      	movs	r1, #2
 8000760:	2006      	movs	r0, #6
 8000762:	f000 fa2f 	bl	8000bc4 <write_single_byte>
	write_single_byte(PKTCTRL1, CC1101_POSTAVKA_PKTCTRL1);
 8000766:	2105      	movs	r1, #5
 8000768:	2007      	movs	r0, #7
 800076a:	f000 fa2b 	bl	8000bc4 <write_single_byte>
	write_single_byte(PKTCTRL0, CC1101_POSTAVKA_PKTCTRL0);
 800076e:	2144      	movs	r1, #68	; 0x44
 8000770:	2008      	movs	r0, #8
 8000772:	f000 fa27 	bl	8000bc4 <write_single_byte>
	write_single_byte(ADDR, CC1101_POSTAVKA_ADDR);
 8000776:	2111      	movs	r1, #17
 8000778:	2009      	movs	r0, #9
 800077a:	f000 fa23 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSCTRL1, CC1101_POSTAVKA_FSCTRL1);
 800077e:	2106      	movs	r1, #6
 8000780:	200b      	movs	r0, #11
 8000782:	f000 fa1f 	bl	8000bc4 <write_single_byte>
	write_single_byte(FREQ2, CC1101_POSTAVKA_FREQ2);
 8000786:	2110      	movs	r1, #16
 8000788:	200d      	movs	r0, #13
 800078a:	f000 fa1b 	bl	8000bc4 <write_single_byte>
	write_single_byte(FREQ1, CC1101_POSTAVKA_FREQ1);
 800078e:	21a7      	movs	r1, #167	; 0xa7
 8000790:	200e      	movs	r0, #14
 8000792:	f000 fa17 	bl	8000bc4 <write_single_byte>
	write_single_byte(FREQ0, CC1101_POSTAVKA_FREQ0);
 8000796:	2162      	movs	r1, #98	; 0x62
 8000798:	200f      	movs	r0, #15
 800079a:	f000 fa13 	bl	8000bc4 <write_single_byte>
	write_single_byte(MDMCFG4, CC1101_POSTAVKA_MDMCFG4);
 800079e:	21f5      	movs	r1, #245	; 0xf5
 80007a0:	2010      	movs	r0, #16
 80007a2:	f000 fa0f 	bl	8000bc4 <write_single_byte>
	write_single_byte(MDMCFG3, CC1101_POSTAVKA_MDMCFG3);
 80007a6:	2183      	movs	r1, #131	; 0x83
 80007a8:	2011      	movs	r0, #17
 80007aa:	f000 fa0b 	bl	8000bc4 <write_single_byte>
	write_single_byte(MDMCFG2, CC1101_POSTAVKA_MDMCFG2);
 80007ae:	2191      	movs	r1, #145	; 0x91
 80007b0:	2012      	movs	r0, #18
 80007b2:	f000 fa07 	bl	8000bc4 <write_single_byte>
	write_single_byte(DEVIATN, CC1101_POSTAVKA_DEVIATN);
 80007b6:	2115      	movs	r1, #21
 80007b8:	2015      	movs	r0, #21
 80007ba:	f000 fa03 	bl	8000bc4 <write_single_byte>
	write_single_byte(MCSM0, CC1101_POSTAVKA_MCSM0);
 80007be:	2118      	movs	r1, #24
 80007c0:	2018      	movs	r0, #24
 80007c2:	f000 f9ff 	bl	8000bc4 <write_single_byte>
	write_single_byte(FOCCFG, CC1101_POSTAVKA_FOCCFG);
 80007c6:	2116      	movs	r1, #22
 80007c8:	2019      	movs	r0, #25
 80007ca:	f000 f9fb 	bl	8000bc4 <write_single_byte>
	write_single_byte(WORCTRL, CC1101_POSTAVKA_WORCTRL);
 80007ce:	21fb      	movs	r1, #251	; 0xfb
 80007d0:	2020      	movs	r0, #32
 80007d2:	f000 f9f7 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSCAL3, CC1101_POSTAVKA_FSCAL3);
 80007d6:	21e9      	movs	r1, #233	; 0xe9
 80007d8:	2023      	movs	r0, #35	; 0x23
 80007da:	f000 f9f3 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSCAL2, CC1101_POSTAVKA_FSCAL2);
 80007de:	212a      	movs	r1, #42	; 0x2a
 80007e0:	2024      	movs	r0, #36	; 0x24
 80007e2:	f000 f9ef 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSCAL1, CC1101_POSTAVKA_FSCAL1);
 80007e6:	2100      	movs	r1, #0
 80007e8:	2025      	movs	r0, #37	; 0x25
 80007ea:	f000 f9eb 	bl	8000bc4 <write_single_byte>
	write_single_byte(FSCAL0, CC1101_POSTAVKA_FSCAL0);
 80007ee:	211f      	movs	r1, #31
 80007f0:	2026      	movs	r0, #38	; 0x26
 80007f2:	f000 f9e7 	bl	8000bc4 <write_single_byte>
	//	fstest
	//	ptest
	//	agctest
	write_single_byte(TEST2, CC1101_POSTAVKA_TEST2);
 80007f6:	2181      	movs	r1, #129	; 0x81
 80007f8:	202c      	movs	r0, #44	; 0x2c
 80007fa:	f000 f9e3 	bl	8000bc4 <write_single_byte>
	write_single_byte(TEST1, CC1101_POSTAVKA_TEST1);
 80007fe:	2135      	movs	r1, #53	; 0x35
 8000800:	202d      	movs	r0, #45	; 0x2d
 8000802:	f000 f9df 	bl	8000bc4 <write_single_byte>
	write_single_byte(TEST0, CC1101_POSTAVKA_TEST0);
 8000806:	2109      	movs	r1, #9
 8000808:	202e      	movs	r0, #46	; 0x2e
 800080a:	f000 f9db 	bl	8000bc4 <write_single_byte>

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <command_strobe>:

uint8_t command_strobe(uint8_t addr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af02      	add	r7, sp, #8
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	delay_us(1000);		// Postavljen delay na pocetak, zbog mogucih krivih podataka od prijasnjeg strobe-a
 800081e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000822:	f000 febf 	bl	80015a4 <delay_us>
	HAL_StatusTypeDef SPI_status;
	uint8_t status;

	SPI_CS_WRITE(0);
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fea8 	bl	800057c <SPI_CS_WRITE>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 800082c:	bf00      	nop
 800082e:	2104      	movs	r1, #4
 8000830:	480e      	ldr	r0, [pc, #56]	; (800086c <command_strobe+0x58>)
 8000832:	f001 fb45 	bl	8001ec0 <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f8      	bne.n	800082e <command_strobe+0x1a>
	SPI_status = HAL_SPI_TransmitReceive(&hspi2, &addr, &status, 1, HAL_MAX_DELAY);
 800083c:	f107 020e 	add.w	r2, r7, #14
 8000840:	1df9      	adds	r1, r7, #7
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2301      	movs	r3, #1
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <command_strobe+0x5c>)
 800084c:	f002 ff2b 	bl	80036a6 <HAL_SPI_TransmitReceive>
 8000850:	4603      	mov	r3, r0
 8000852:	73fb      	strb	r3, [r7, #15]
	SPI_CS_WRITE(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff fe91 	bl	800057c <SPI_CS_WRITE>
	hal_status(SPI_status);
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fa9b 	bl	8000d98 <hal_status>

	return status;
 8000862:	7bbb      	ldrb	r3, [r7, #14]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	48000800 	.word	0x48000800
 8000870:	20000078 	.word	0x20000078

08000874 <read_status_reg>:

// TREBAM JOS ODVOJENE FUNKCIJE ZA TX I RX FIFO I PATABLE!
uint8_t read_status_reg(uint8_t addr, uint8_t *statusByte)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af02      	add	r7, sp, #8
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
	uint8_t statusReg = addr | burst_byte_read;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000886:	b2db      	uxtb	r3, r3
 8000888:	737b      	strb	r3, [r7, #13]
	uint8_t statusRegValue;
//	uint8_t txDummy = NULL;
	HAL_StatusTypeDef SPI_status,SPI_status1;

	if(addr >= 0x30 && addr <= 0x3D)
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b2f      	cmp	r3, #47	; 0x2f
 800088e:	d938      	bls.n	8000902 <read_status_reg+0x8e>
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b3d      	cmp	r3, #61	; 0x3d
 8000894:	d835      	bhi.n	8000902 <read_status_reg+0x8e>
	{
		SPI_CS_WRITE(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fe70 	bl	800057c <SPI_CS_WRITE>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 800089c:	bf00      	nop
 800089e:	2104      	movs	r1, #4
 80008a0:	481a      	ldr	r0, [pc, #104]	; (800090c <read_status_reg+0x98>)
 80008a2:	f001 fb0d 	bl	8001ec0 <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1f8      	bne.n	800089e <read_status_reg+0x2a>
		SPI_status = HAL_SPI_TransmitReceive(&hspi2, &statusReg, statusByte, 1, HAL_MAX_DELAY);
 80008ac:	f107 010d 	add.w	r1, r7, #13
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	4815      	ldr	r0, [pc, #84]	; (8000910 <read_status_reg+0x9c>)
 80008bc:	f002 fef3 	bl	80036a6 <HAL_SPI_TransmitReceive>
 80008c0:	4603      	mov	r3, r0
 80008c2:	73fb      	strb	r3, [r7, #15]
		delay_50ns(2);		//delay od 100ns
 80008c4:	2002      	movs	r0, #2
 80008c6:	f000 fe87 	bl	80015d8 <delay_50ns>
		SPI_status1 = HAL_SPI_TransmitReceive(&hspi2, NULL, &statusRegValue, 1, HAL_MAX_DELAY);
 80008ca:	f107 020c 	add.w	r2, r7, #12
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	2100      	movs	r1, #0
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <read_status_reg+0x9c>)
 80008da:	f002 fee4 	bl	80036a6 <HAL_SPI_TransmitReceive>
 80008de:	4603      	mov	r3, r0
 80008e0:	73bb      	strb	r3, [r7, #14]
		delay_50ns(2);		//delay od 100ns
 80008e2:	2002      	movs	r0, #2
 80008e4:	f000 fe78 	bl	80015d8 <delay_50ns>
		SPI_CS_WRITE(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff fe47 	bl	800057c <SPI_CS_WRITE>

		hal_status(SPI_status);
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 fa51 	bl	8000d98 <hal_status>
		hal_status(SPI_status1);
 80008f6:	7bbb      	ldrb	r3, [r7, #14]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fa4d 	bl	8000d98 <hal_status>

		return statusRegValue;
 80008fe:	7b3b      	ldrb	r3, [r7, #12]
 8000900:	e000      	b.n	8000904 <read_status_reg+0x90>
	}
	else
	{
		return 1;		// Error: 1, oznacava da je start addr u krivom rasponu
 8000902:	2301      	movs	r3, #1
	}
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	48000800 	.word	0x48000800
 8000910:	20000078 	.word	0x20000078

08000914 <transmit_burst_byte_433>:

uint8_t transmit_burst_byte_433()	// Čovjek je prisutan
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09e      	sub	sp, #120	; 0x78
 8000918:	af00      	add	r7, sp, #0
	uint8_t TX_FIFO = 0x3F;
 800091a:	233f      	movs	r3, #63	; 0x3f
 800091c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t len = 2;
 8000920:	2302      	movs	r3, #2
 8000922:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t statusByte,statusByte1,statusByte2,statusByte3,statusByte4;
	uint8_t TXregByte,marcstate,marcstate1,marcstate2;
	char status_message[100];
	uint8_t txData[2] = {0x11, 0xFF};
 8000926:	f64f 7311 	movw	r3, #65297	; 0xff11
 800092a:	80bb      	strh	r3, [r7, #4]

	command_strobe(SIDLE);			// IDLE
 800092c:	2036      	movs	r0, #54	; 0x36
 800092e:	f7ff ff71 	bl	8000814 <command_strobe>
	command_strobe(SFTX);			// Flush TX FIFO
 8000932:	203b      	movs	r0, #59	; 0x3b
 8000934:	f7ff ff6e 	bl	8000814 <command_strobe>
	delay_us(1000);
 8000938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093c:	f000 fe32 	bl	80015a4 <delay_us>

	write_burst_byte(TX_FIFO, &statusByte, txData, len);	//Napuni TX FIFO
 8000940:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000944:	1d3a      	adds	r2, r7, #4
 8000946:	f107 0171 	add.w	r1, r7, #113	; 0x71
 800094a:	f897 0077 	ldrb.w	r0, [r7, #119]	; 0x77
 800094e:	f000 f981 	bl	8000c54 <write_burst_byte>
	TXregByte = read_status_reg(TXBYTES, &statusByte2);
 8000952:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8000956:	4619      	mov	r1, r3
 8000958:	203a      	movs	r0, #58	; 0x3a
 800095a:	f7ff ff8b 	bl	8000874 <read_status_reg>
 800095e:	4603      	mov	r3, r0
 8000960:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	command_strobe(STX);			// Prebaci iz IDLE stanja u TX stanje
 8000964:	2035      	movs	r0, #53	; 0x35
 8000966:	f7ff ff55 	bl	8000814 <command_strobe>
	delay_us(1000);			// Vrijeme potrebno za tranziciju IDLE->TX + TX->IDLE
 800096a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096e:	f000 fe19 	bl	80015a4 <delay_us>
	while(!HAL_GPIO_ReadPin(GDO0_GPIO_Port, GDO0_Pin));		//Pričekaj do slanja sync word-a
 8000972:	bf00      	nop
 8000974:	2140      	movs	r1, #64	; 0x40
 8000976:	4888      	ldr	r0, [pc, #544]	; (8000b98 <transmit_burst_byte_433+0x284>)
 8000978:	f001 faa2 	bl	8001ec0 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f8      	beq.n	8000974 <transmit_burst_byte_433+0x60>
	while(HAL_GPIO_ReadPin(GDO0_GPIO_Port, GDO0_Pin));		// Pričekaj do kraja slanja payload-a
 8000982:	bf00      	nop
 8000984:	2140      	movs	r1, #64	; 0x40
 8000986:	4884      	ldr	r0, [pc, #528]	; (8000b98 <transmit_burst_byte_433+0x284>)
 8000988:	f001 fa9a 	bl	8001ec0 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1f8      	bne.n	8000984 <transmit_burst_byte_433+0x70>

	HAL_Delay(3500);
 8000992:	f640 50ac 	movw	r0, #3500	; 0xdac
 8000996:	f000 ffdf 	bl	8001958 <HAL_Delay>
	marcstate = read_status_reg(MARCSTATE, &statusByte1);
 800099a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800099e:	4619      	mov	r1, r3
 80009a0:	2035      	movs	r0, #53	; 0x35
 80009a2:	f7ff ff67 	bl	8000874 <read_status_reg>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	marcstate = marcstate & 0x1F;
 80009ac:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80009b0:	f003 031f 	and.w	r3, r3, #31
 80009b4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	marcstate1 = read_status_reg(MARCSTATE, &statusByte3);
 80009b8:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 80009bc:	4619      	mov	r1, r3
 80009be:	2035      	movs	r0, #53	; 0x35
 80009c0:	f7ff ff58 	bl	8000874 <read_status_reg>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	marcstate1 = marcstate1 & 0x1F;
 80009ca:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80009ce:	f003 031f 	and.w	r3, r3, #31
 80009d2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	marcstate2 = read_status_reg(MARCSTATE, &statusByte4);
 80009d6:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 80009da:	4619      	mov	r1, r3
 80009dc:	2035      	movs	r0, #53	; 0x35
 80009de:	f7ff ff49 	bl	8000874 <read_status_reg>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	marcstate2 = marcstate2 & 0x1F;
 80009e8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

	sprintf(status_message, "StatusByte, before TX: 0x%02X\r\n", statusByte);
 80009f4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80009f8:	461a      	mov	r2, r3
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4967      	ldr	r1, [pc, #412]	; (8000b9c <transmit_burst_byte_433+0x288>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 fae9 	bl	8004fd8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fbe0 	bl	80001d0 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	f107 0108 	add.w	r1, r7, #8
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	4860      	ldr	r0, [pc, #384]	; (8000ba0 <transmit_burst_byte_433+0x28c>)
 8000a1e:	f003 fd4f 	bl	80044c0 <HAL_UART_Transmit>

	sprintf(status_message, "StatusByte1, during marcstate: 0x%02X\r\n", statusByte1);
 8000a22:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000a26:	461a      	mov	r2, r3
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	495d      	ldr	r1, [pc, #372]	; (8000ba4 <transmit_burst_byte_433+0x290>)
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f004 fad2 	bl	8004fd8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fbc9 	bl	80001d0 <strlen>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	f107 0108 	add.w	r1, r7, #8
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	4855      	ldr	r0, [pc, #340]	; (8000ba0 <transmit_burst_byte_433+0x28c>)
 8000a4c:	f003 fd38 	bl	80044c0 <HAL_UART_Transmit>

	sprintf(status_message, "MARCSTATE value: 0x%02X\r\n", marcstate);
 8000a50:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	4953      	ldr	r1, [pc, #332]	; (8000ba8 <transmit_burst_byte_433+0x294>)
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 fabc 	bl	8004fd8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fbb3 	bl	80001d0 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	f107 0108 	add.w	r1, r7, #8
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	484a      	ldr	r0, [pc, #296]	; (8000ba0 <transmit_burst_byte_433+0x28c>)
 8000a78:	f003 fd22 	bl	80044c0 <HAL_UART_Transmit>

	sprintf(status_message, "StatusByte3, during marcstate: 0x%02X\r\n", statusByte3);
 8000a7c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000a80:	461a      	mov	r2, r3
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	4949      	ldr	r1, [pc, #292]	; (8000bac <transmit_burst_byte_433+0x298>)
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 faa5 	bl	8004fd8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fb9c 	bl	80001d0 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	f107 0108 	add.w	r1, r7, #8
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	483e      	ldr	r0, [pc, #248]	; (8000ba0 <transmit_burst_byte_433+0x28c>)
 8000aa6:	f003 fd0b 	bl	80044c0 <HAL_UART_Transmit>

	sprintf(status_message, "MARCSTATE1 value: 0x%02X\r\n", marcstate1);
 8000aaa:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	493f      	ldr	r1, [pc, #252]	; (8000bb0 <transmit_burst_byte_433+0x29c>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 fa8f 	bl	8004fd8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fb86 	bl	80001d0 <strlen>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	f107 0108 	add.w	r1, r7, #8
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	4833      	ldr	r0, [pc, #204]	; (8000ba0 <transmit_burst_byte_433+0x28c>)
 8000ad2:	f003 fcf5 	bl	80044c0 <HAL_UART_Transmit>

	sprintf(status_message, "StatusByte4, during marcstate: 0x%02X\r\n", statusByte4);
 8000ad6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000ada:	461a      	mov	r2, r3
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4934      	ldr	r1, [pc, #208]	; (8000bb4 <transmit_burst_byte_433+0x2a0>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f004 fa78 	bl	8004fd8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb6f 	bl	80001d0 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	f107 0108 	add.w	r1, r7, #8
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	4828      	ldr	r0, [pc, #160]	; (8000ba0 <transmit_burst_byte_433+0x28c>)
 8000b00:	f003 fcde 	bl	80044c0 <HAL_UART_Transmit>

	sprintf(status_message, "MARCSTATE2 value: 0x%02X\r\n", marcstate2);
 8000b04:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	492a      	ldr	r1, [pc, #168]	; (8000bb8 <transmit_burst_byte_433+0x2a4>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 fa62 	bl	8004fd8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fb59 	bl	80001d0 <strlen>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	f107 0108 	add.w	r1, r7, #8
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	481d      	ldr	r0, [pc, #116]	; (8000ba0 <transmit_burst_byte_433+0x28c>)
 8000b2c:	f003 fcc8 	bl	80044c0 <HAL_UART_Transmit>

	sprintf(status_message, "TXStatusByte2, after TX: 0x%02X\r\n", statusByte2);
 8000b30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b34:	461a      	mov	r2, r3
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	4920      	ldr	r1, [pc, #128]	; (8000bbc <transmit_burst_byte_433+0x2a8>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 fa4b 	bl	8004fd8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fb42 	bl	80001d0 <strlen>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	f107 0108 	add.w	r1, r7, #8
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <transmit_burst_byte_433+0x28c>)
 8000b5a:	f003 fcb1 	bl	80044c0 <HAL_UART_Transmit>

	sprintf(status_message, "TXregByte, after FIFO: 0x%02X\r\n", TXregByte);
 8000b5e:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	4916      	ldr	r1, [pc, #88]	; (8000bc0 <transmit_burst_byte_433+0x2ac>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fa35 	bl	8004fd8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fb2c 	bl	80001d0 <strlen>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	f107 0108 	add.w	r1, r7, #8
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <transmit_burst_byte_433+0x28c>)
 8000b86:	f003 fc9b 	bl	80044c0 <HAL_UART_Transmit>

	return statusByte;
 8000b8a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3778      	adds	r7, #120	; 0x78
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	08005944 	.word	0x08005944
 8000ba0:	20000200 	.word	0x20000200
 8000ba4:	08005964 	.word	0x08005964
 8000ba8:	0800598c 	.word	0x0800598c
 8000bac:	080059a8 	.word	0x080059a8
 8000bb0:	080059d0 	.word	0x080059d0
 8000bb4:	080059ec 	.word	0x080059ec
 8000bb8:	08005a14 	.word	0x08005a14
 8000bbc:	08005a30 	.word	0x08005a30
 8000bc0:	08005a54 	.word	0x08005a54

08000bc4 <write_single_byte>:

	return dataRx;
}

uint8_t write_single_byte(uint8_t addr, uint8_t txData)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	4603      	mov	r3, r0
 8000bcc:	460a      	mov	r2, r1
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	71bb      	strb	r3, [r7, #6]
	uint8_t statusByte;
	uint8_t txAddr = addr | single_byte_write;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	733b      	strb	r3, [r7, #12]
	uint8_t dataTx = txData;
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef SPI_status1,SPI_status2;

	SPI_CS_WRITE(0);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fccd 	bl	800057c <SPI_CS_WRITE>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 8000be2:	bf00      	nop
 8000be4:	2104      	movs	r1, #4
 8000be6:	4819      	ldr	r0, [pc, #100]	; (8000c4c <write_single_byte+0x88>)
 8000be8:	f001 f96a 	bl	8001ec0 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f8      	bne.n	8000be4 <write_single_byte+0x20>
	SPI_status1 = HAL_SPI_TransmitReceive(&hspi2, &txAddr, &statusByte, 1, HAL_MAX_DELAY);
 8000bf2:	f107 020d 	add.w	r2, r7, #13
 8000bf6:	f107 010c 	add.w	r1, r7, #12
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	4813      	ldr	r0, [pc, #76]	; (8000c50 <write_single_byte+0x8c>)
 8000c04:	f002 fd4f 	bl	80036a6 <HAL_SPI_TransmitReceive>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	73fb      	strb	r3, [r7, #15]
	delay_50ns(2);		//delay od 100ns
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f000 fce3 	bl	80015d8 <delay_50ns>
	SPI_status2 = HAL_SPI_TransmitReceive(&hspi2, &dataTx, &statusByte, 1, HAL_MAX_DELAY);
 8000c12:	f107 020d 	add.w	r2, r7, #13
 8000c16:	f107 010b 	add.w	r1, r7, #11
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2301      	movs	r3, #1
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <write_single_byte+0x8c>)
 8000c24:	f002 fd3f 	bl	80036a6 <HAL_SPI_TransmitReceive>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	73bb      	strb	r3, [r7, #14]
	SPI_CS_WRITE(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff fca5 	bl	800057c <SPI_CS_WRITE>

	hal_status(SPI_status1);
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f8af 	bl	8000d98 <hal_status>
	hal_status(SPI_status2);
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f8ab 	bl	8000d98 <hal_status>

	return statusByte;
 8000c42:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	48000800 	.word	0x48000800
 8000c50:	20000078 	.word	0x20000078

08000c54 <write_burst_byte>:
	hal_status(SPI_status1);

}

void write_burst_byte(uint8_t startAddr, uint8_t *statusByte, uint8_t *txData, uint8_t len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0a4      	sub	sp, #144	; 0x90
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4603      	mov	r3, r0
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	4613      	mov	r3, r2
 8000c66:	73bb      	strb	r3, [r7, #14]
	char status_message[100];
	HAL_StatusTypeDef SPI_status,SPI_status1;

	if(startAddr <= 0x2F || startAddr == 0x3E || startAddr == 0x3F)
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	2b2f      	cmp	r3, #47	; 0x2f
 8000c6c:	d905      	bls.n	8000c7a <write_burst_byte+0x26>
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b3e      	cmp	r3, #62	; 0x3e
 8000c72:	d002      	beq.n	8000c7a <write_burst_byte+0x26>
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b3f      	cmp	r3, #63	; 0x3f
 8000c78:	d14d      	bne.n	8000d16 <write_burst_byte+0xc2>
	{
		uint8_t addr = startAddr | burst_byte_write;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	75fb      	strb	r3, [r7, #23]
		SPI_CS_WRITE(0);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff fc79 	bl	800057c <SPI_CS_WRITE>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2));
 8000c8a:	bf00      	nop
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	483e      	ldr	r0, [pc, #248]	; (8000d88 <write_burst_byte+0x134>)
 8000c90:	f001 f916 	bl	8001ec0 <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1f8      	bne.n	8000c8c <write_burst_byte+0x38>
		SPI_status = HAL_SPI_TransmitReceive(&hspi2, &addr, statusByte, 1, HAL_MAX_DELAY);
 8000c9a:	f107 0117 	add.w	r1, r7, #23
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	4838      	ldr	r0, [pc, #224]	; (8000d8c <write_burst_byte+0x138>)
 8000caa:	f002 fcfc 	bl	80036a6 <HAL_SPI_TransmitReceive>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		delay_50ns(2);		//delay od 100ns, cc1101 datasheet pg.30
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	f000 fc8f 	bl	80015d8 <delay_50ns>
		for(int i=0; i < len; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000cc0:	e020      	b.n	8000d04 <write_burst_byte+0xb0>
		{
			SPI_status1 = HAL_SPI_TransmitReceive(&hspi2, &txData[i], statusByte, 1, HAL_MAX_DELAY);
 8000cc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	18d1      	adds	r1, r2, r3
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	482d      	ldr	r0, [pc, #180]	; (8000d8c <write_burst_byte+0x138>)
 8000cd6:	f002 fce6 	bl	80036a6 <HAL_SPI_TransmitReceive>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			if(i<(len-1))
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	da03      	bge.n	8000cf4 <write_burst_byte+0xa0>
			{
				delay_50ns(2);		//delay od 100ns, cc1101 datasheet pg.30
 8000cec:	2002      	movs	r0, #2
 8000cee:	f000 fc73 	bl	80015d8 <delay_50ns>
 8000cf2:	e002      	b.n	8000cfa <write_burst_byte+0xa6>
			}
			else
			{
				delay_50ns(1);		//delay od 25ns
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f000 fc6f 	bl	80015d8 <delay_50ns>
		for(int i=0; i < len; i++)
 8000cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	dbd9      	blt.n	8000cc2 <write_burst_byte+0x6e>
			}
		}
		SPI_CS_WRITE(1);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff fc34 	bl	800057c <SPI_CS_WRITE>
	{
 8000d14:	e002      	b.n	8000d1c <write_burst_byte+0xc8>
	}
	else
	{
		*statusByte = 1;		// Error: 1, oznacava da je start addr u krivom rasponu
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
	}

	// UART PRINTOUT DEBUG
	if(len>64)
 8000d1c:	7bbb      	ldrb	r3, [r7, #14]
 8000d1e:	2b40      	cmp	r3, #64	; 0x40
 8000d20:	d924      	bls.n	8000d6c <write_burst_byte+0x118>
	{
		len=64;
 8000d22:	2340      	movs	r3, #64	; 0x40
 8000d24:	73bb      	strb	r3, [r7, #14]
		for(int i=0; i < len; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d2a:	e01b      	b.n	8000d64 <write_burst_byte+0x110>
		{
			sprintf(status_message, "txData: 0x%02X\r\n", txData[i]);
 8000d2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	4915      	ldr	r1, [pc, #84]	; (8000d90 <write_burst_byte+0x13c>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f004 f94b 	bl	8004fd8 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fa42 	bl	80001d0 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	f107 0118 	add.w	r1, r7, #24
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	480e      	ldr	r0, [pc, #56]	; (8000d94 <write_burst_byte+0x140>)
 8000d5a:	f003 fbb1 	bl	80044c0 <HAL_UART_Transmit>
		for(int i=0; i < len; i++)
 8000d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d60:	3301      	adds	r3, #1
 8000d62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbdf      	blt.n	8000d2c <write_burst_byte+0xd8>
		}
	}
	hal_status(SPI_status);
 8000d6c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f811 	bl	8000d98 <hal_status>
	hal_status(SPI_status1);
 8000d76:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f80c 	bl	8000d98 <hal_status>
}
 8000d80:	bf00      	nop
 8000d82:	3788      	adds	r7, #136	; 0x88
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	48000800 	.word	0x48000800
 8000d8c:	20000078 	.word	0x20000078
 8000d90:	08005bec 	.word	0x08005bec
 8000d94:	20000200 	.word	0x20000200

08000d98 <hal_status>:

void hal_status(HAL_StatusTypeDef SPIstatus)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b090      	sub	sp, #64	; 0x40
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	char status_message[50];
	switch(SPIstatus)
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d827      	bhi.n	8000df8 <hal_status+0x60>
 8000da8:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <hal_status+0x18>)
 8000daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dae:	bf00      	nop
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000dcf 	.word	0x08000dcf
 8000db8:	08000ddd 	.word	0x08000ddd
 8000dbc:	08000deb 	.word	0x08000deb
		{
			case HAL_OK:
				sprintf(status_message, "HAL OK.\r\n");
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4915      	ldr	r1, [pc, #84]	; (8000e1c <hal_status+0x84>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f004 f906 	bl	8004fd8 <siprintf>
				break;
 8000dcc:	e014      	b.n	8000df8 <hal_status+0x60>
			case HAL_ERROR:
				sprintf(status_message, "HAL ERROR.\r\n");
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4913      	ldr	r1, [pc, #76]	; (8000e20 <hal_status+0x88>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 f8ff 	bl	8004fd8 <siprintf>
				break;
 8000dda:	e00d      	b.n	8000df8 <hal_status+0x60>
			case HAL_BUSY:
				sprintf(status_message, "HAL BUSY.\r\n");
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4910      	ldr	r1, [pc, #64]	; (8000e24 <hal_status+0x8c>)
 8000de2:	4618      	mov	r0, r3
 8000de4:	f004 f8f8 	bl	8004fd8 <siprintf>
				break;
 8000de8:	e006      	b.n	8000df8 <hal_status+0x60>
			case HAL_TIMEOUT:
				sprintf(status_message, "HAL TIMEOUT.\r\n");
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <hal_status+0x90>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 f8f1 	bl	8004fd8 <siprintf>
				break;
 8000df6:	bf00      	nop
		}
	HAL_UART_Transmit(&huart2, (uint8_t*)status_message, strlen(status_message), HAL_MAX_DELAY);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff f9e7 	bl	80001d0 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	f107 010c 	add.w	r1, r7, #12
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <hal_status+0x94>)
 8000e10:	f003 fb56 	bl	80044c0 <HAL_UART_Transmit>
}
 8000e14:	bf00      	nop
 8000e16:	3740      	adds	r7, #64	; 0x40
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08005c00 	.word	0x08005c00
 8000e20:	08005c0c 	.word	0x08005c0c
 8000e24:	08005c1c 	.word	0x08005c1c
 8000e28:	08005c28 	.word	0x08005c28
 8000e2c:	20000200 	.word	0x20000200

08000e30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a3b      	ldr	r2, [pc, #236]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a35      	ldr	r2, [pc, #212]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a29      	ldr	r2, [pc, #164]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <MX_GPIO_Init+0x108>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f001 f81f 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb8:	4820      	ldr	r0, [pc, #128]	; (8000f3c <MX_GPIO_Init+0x10c>)
 8000eba:	f001 f819 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481a      	ldr	r0, [pc, #104]	; (8000f40 <MX_GPIO_Init+0x110>)
 8000ed6:	f000 fe49 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eda:	2320      	movs	r3, #32
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef4:	f000 fe3a 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480a      	ldr	r0, [pc, #40]	; (8000f3c <MX_GPIO_Init+0x10c>)
 8000f12:	f000 fe2b 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GDO0_Pin;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GDO0_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_GPIO_Init+0x10c>)
 8000f2a:	f000 fe1f 	bl	8001b6c <HAL_GPIO_Init>

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	48000800 	.word	0x48000800

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b092      	sub	sp, #72	; 0x48
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fc89 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f8c7 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f7ff ff6d 	bl	8000e30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f56:	f000 fb87 	bl	8001668 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000f5a:	f000 f919 	bl	8001190 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000f5e:	f000 fb53 	bl	8001608 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000f62:	f000 fa4b 	bl	80013fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f66:	f000 fa9d 	bl	80014a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f6a:	4854      	ldr	r0, [pc, #336]	; (80010bc <main+0x178>)
 8000f6c:	f002 ff6c 	bl	8003e48 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000f70:	4853      	ldr	r0, [pc, #332]	; (80010c0 <main+0x17c>)
 8000f72:	f002 ff69 	bl	8003e48 <HAL_TIM_Base_Start>

  char serialStatus[50];
  char aTxBuffer[] = "ovdje1\r\n";
 8000f76:	4a53      	ldr	r2, [pc, #332]	; (80010c4 <main+0x180>)
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f7e:	c303      	stmia	r3!, {r0, r1}
 8000f80:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)aTxBuffer, strlen(aTxBuffer), HAL_MAX_DELAY);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff f922 	bl	80001d0 <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	f107 0108 	add.w	r1, r7, #8
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	484b      	ldr	r0, [pc, #300]	; (80010c8 <main+0x184>)
 8000f9a:	f003 fa91 	bl	80044c0 <HAL_UART_Transmit>
  manual_POR();
 8000f9e:	f7ff fb09 	bl	80005b4 <manual_POR>
  cc1101_init(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f7ff fb46 	bl	8000634 <cc1101_init>

  uint8_t status,status1;
  uint8_t TXBytesStatus;
  status = command_strobe(SNOP);
 8000fa8:	203d      	movs	r0, #61	; 0x3d
 8000faa:	f7ff fc33 	bl	8000814 <command_strobe>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  snprintf(serialStatus, sizeof(serialStatus), "main: 0x%02X\r\n", status);
 8000fb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000fb8:	f107 0014 	add.w	r0, r7, #20
 8000fbc:	4a43      	ldr	r2, [pc, #268]	; (80010cc <main+0x188>)
 8000fbe:	2132      	movs	r1, #50	; 0x32
 8000fc0:	f003 ffd6 	bl	8004f70 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff f901 	bl	80001d0 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f107 0114 	add.w	r1, r7, #20
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	483b      	ldr	r0, [pc, #236]	; (80010c8 <main+0x184>)
 8000fdc:	f003 fa70 	bl	80044c0 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  char aTxBuffer[] = "ovdje2\r\n";
//	  HAL_UART_Transmit(&huart2, (uint8_t*)aTxBuffer, strlen(aTxBuffer), HAL_MAX_DELAY);
	  HAL_Delay(2000);
 8000fe0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fe4:	f000 fcb8 	bl	8001958 <HAL_Delay>
	  TXBytesStatus = read_status_reg(TXBYTES, &status1);
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	4619      	mov	r1, r3
 8000fec:	203a      	movs	r0, #58	; 0x3a
 8000fee:	f7ff fc41 	bl	8000874 <read_status_reg>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	  snprintf(serialStatus, sizeof(serialStatus), "TXBYTES B: 0x%02X\r\n", TXBytesStatus);
 8000ff8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000ffc:	f107 0014 	add.w	r0, r7, #20
 8001000:	4a33      	ldr	r2, [pc, #204]	; (80010d0 <main+0x18c>)
 8001002:	2132      	movs	r1, #50	; 0x32
 8001004:	f003 ffb4 	bl	8004f70 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f8df 	bl	80001d0 <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	f107 0114 	add.w	r1, r7, #20
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	482a      	ldr	r0, [pc, #168]	; (80010c8 <main+0x184>)
 8001020:	f003 fa4e 	bl	80044c0 <HAL_UART_Transmit>

	  snprintf(serialStatus, sizeof(serialStatus), "ChipStatus, txbytes B: 0x%02X\r\n", status1);
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f107 0014 	add.w	r0, r7, #20
 800102a:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <main+0x190>)
 800102c:	2132      	movs	r1, #50	; 0x32
 800102e:	f003 ff9f 	bl	8004f70 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff f8ca 	bl	80001d0 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	f107 0114 	add.w	r1, r7, #20
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	481f      	ldr	r0, [pc, #124]	; (80010c8 <main+0x184>)
 800104a:	f003 fa39 	bl	80044c0 <HAL_UART_Transmit>

	  transmit_burst_byte_433();
 800104e:	f7ff fc61 	bl	8000914 <transmit_burst_byte_433>

	  TXBytesStatus = read_status_reg(TXBYTES, &status1);
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	4619      	mov	r1, r3
 8001056:	203a      	movs	r0, #58	; 0x3a
 8001058:	f7ff fc0c 	bl	8000874 <read_status_reg>
 800105c:	4603      	mov	r3, r0
 800105e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	  snprintf(serialStatus, sizeof(serialStatus), "TXBYTES A: 0x%02X\r\n", TXBytesStatus);
 8001062:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001066:	f107 0014 	add.w	r0, r7, #20
 800106a:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <main+0x194>)
 800106c:	2132      	movs	r1, #50	; 0x32
 800106e:	f003 ff7f 	bl	8004f70 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f8aa 	bl	80001d0 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	f107 0114 	add.w	r1, r7, #20
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	480f      	ldr	r0, [pc, #60]	; (80010c8 <main+0x184>)
 800108a:	f003 fa19 	bl	80044c0 <HAL_UART_Transmit>

	  snprintf(serialStatus, sizeof(serialStatus), "ChipStatus, txbytes A: 0x%02X\r\n", status1);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f107 0014 	add.w	r0, r7, #20
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <main+0x198>)
 8001096:	2132      	movs	r1, #50	; 0x32
 8001098:	f003 ff6a 	bl	8004f70 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)serialStatus, strlen(serialStatus), HAL_MAX_DELAY);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f895 	bl	80001d0 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	f107 0114 	add.w	r1, r7, #20
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <main+0x184>)
 80010b4:	f003 fa04 	bl	80044c0 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 80010b8:	e792      	b.n	8000fe0 <main+0x9c>
 80010ba:	bf00      	nop
 80010bc:	200000e0 	.word	0x200000e0
 80010c0:	2000012c 	.word	0x2000012c
 80010c4:	08005d58 	.word	0x08005d58
 80010c8:	20000200 	.word	0x20000200
 80010cc:	08005ce0 	.word	0x08005ce0
 80010d0:	08005cf0 	.word	0x08005cf0
 80010d4:	08005d04 	.word	0x08005d04
 80010d8:	08005d24 	.word	0x08005d24
 80010dc:	08005d38 	.word	0x08005d38

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b096      	sub	sp, #88	; 0x58
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2244      	movs	r2, #68	; 0x44
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 ff92 	bl	8005018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001102:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001106:	f000 ff19 	bl	8001f3c <HAL_PWREx_ControlVoltageScaling>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001110:	f000 f839 	bl	8001186 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111e:	2310      	movs	r3, #16
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001126:	2302      	movs	r3, #2
 8001128:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800112e:	230a      	movs	r3, #10
 8001130:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001132:	2307      	movs	r3, #7
 8001134:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001136:	2302      	movs	r3, #2
 8001138:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4618      	mov	r0, r3
 8001144:	f000 ff50 	bl	8001fe8 <HAL_RCC_OscConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800114e:	f000 f81a 	bl	8001186 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001152:	230f      	movs	r3, #15
 8001154:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001156:	2303      	movs	r3, #3
 8001158:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800115e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001168:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	2104      	movs	r1, #4
 800116e:	4618      	mov	r0, r3
 8001170:	f001 fb16 	bl	80027a0 <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800117a:	f000 f804 	bl	8001186 <Error_Handler>
  }
}
 800117e:	bf00      	nop
 8001180:	3758      	adds	r7, #88	; 0x58
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118a:	b672      	cpsid	i
}
 800118c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118e:	e7fe      	b.n	800118e <Error_Handler+0x8>

08001190 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_SPI2_Init+0x74>)
 8001196:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <MX_SPI2_Init+0x78>)
 8001198:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_SPI2_Init+0x74>)
 800119c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_SPI2_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_SPI2_Init+0x74>)
 80011aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_SPI2_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_SPI2_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_SPI2_Init+0x74>)
 80011be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_SPI2_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_SPI2_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_SPI2_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_SPI2_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_SPI2_Init+0x74>)
 80011de:	2207      	movs	r2, #7
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_SPI2_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_SPI2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_SPI2_Init+0x74>)
 80011f0:	f002 f9b6 	bl	8003560 <HAL_SPI_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011fa:	f7ff ffc4 	bl	8001186 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000078 	.word	0x20000078
 8001208:	40003800 	.word	0x40003800

0800120c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <HAL_SPI_MspInit+0xb4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d144      	bne.n	80012b8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_SPI_MspInit+0xb8>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <HAL_SPI_MspInit+0xb8>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6593      	str	r3, [r2, #88]	; 0x58
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_SPI_MspInit+0xb8>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_SPI_MspInit+0xb8>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_SPI_MspInit+0xb8>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_SPI_MspInit+0xb8>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_SPI_MspInit+0xb8>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <HAL_SPI_MspInit+0xb8>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_SPI_MspInit+0xb8>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001276:	230c      	movs	r3, #12
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001286:	2305      	movs	r3, #5
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <HAL_SPI_MspInit+0xbc>)
 8001292:	f000 fc6b 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a8:	2305      	movs	r3, #5
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <HAL_SPI_MspInit+0xc0>)
 80012b4:	f000 fc5a 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40003800 	.word	0x40003800
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48000800 	.word	0x48000800
 80012cc:	48000400 	.word	0x48000400

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_MspInit+0x44>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_MspInit+0x44>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6613      	str	r3, [r2, #96]	; 0x60
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_MspInit+0x44>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_MspInit+0x44>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_MspInit+0x44>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	6593      	str	r3, [r2, #88]	; 0x58
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_MspInit+0x44>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 fad8 	bl	8001918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f003 fe44 	bl	8005028 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20018000 	.word	0x20018000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	200000dc 	.word	0x200000dc
 80013d4:	200003d8 	.word	0x200003d8

080013d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <MX_TIM1_Init+0xa0>)
 800141c:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <MX_TIM1_Init+0xa4>)
 800141e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <MX_TIM1_Init+0xa0>)
 8001422:	224f      	movs	r2, #79	; 0x4f
 8001424:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <MX_TIM1_Init+0xa0>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_TIM1_Init+0xa0>)
 800142e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001432:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <MX_TIM1_Init+0xa0>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_TIM1_Init+0xa0>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <MX_TIM1_Init+0xa0>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001446:	4815      	ldr	r0, [pc, #84]	; (800149c <MX_TIM1_Init+0xa0>)
 8001448:	f002 fca6 	bl	8003d98 <HAL_TIM_Base_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001452:	f7ff fe98 	bl	8001186 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <MX_TIM1_Init+0xa0>)
 8001464:	f002 fd58 	bl	8003f18 <HAL_TIM_ConfigClockSource>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800146e:	f7ff fe8a 	bl	8001186 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4619      	mov	r1, r3
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <MX_TIM1_Init+0xa0>)
 8001484:	f002 ff46 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800148e:	f7ff fe7a 	bl	8001186 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200000e0 	.word	0x200000e0
 80014a0:	40012c00 	.word	0x40012c00

080014a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_TIM2_Init+0x98>)
 80014c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	; (800153c <MX_TIM2_Init+0x98>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_TIM2_Init+0x98>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_TIM2_Init+0x98>)
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_TIM2_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_TIM2_Init+0x98>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ea:	4814      	ldr	r0, [pc, #80]	; (800153c <MX_TIM2_Init+0x98>)
 80014ec:	f002 fc54 	bl	8003d98 <HAL_TIM_Base_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014f6:	f7ff fe46 	bl	8001186 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_TIM2_Init+0x98>)
 8001508:	f002 fd06 	bl	8003f18 <HAL_TIM_ConfigClockSource>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001512:	f7ff fe38 	bl	8001186 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <MX_TIM2_Init+0x98>)
 8001524:	f002 fef6 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800152e:	f7ff fe2a 	bl	8001186 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000012c 	.word	0x2000012c

08001540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_TIM_Base_MspInit+0x5c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10c      	bne.n	800156c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 8001558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800155c:	6613      	str	r3, [r2, #96]	; 0x60
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800156a:	e010      	b.n	800158e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001574:	d10b      	bne.n	800158e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6593      	str	r3, [r2, #88]	; 0x58
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40012c00 	.word	0x40012c00
 80015a0:	40021000 	.word	0x40021000

080015a4 <delay_us>:
}

/* USER CODE BEGIN 1 */

void delay_us(uint16_t us)			// Zbog clock postavki svaki count up je 1us
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);			// Postavi counter vrijednost na 0
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <delay_us+0x30>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);	// Cekaj dok se izbroji do te vrijednosti
 80015b6:	bf00      	nop
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <delay_us+0x30>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3f9      	bcc.n	80015b8 <delay_us+0x14>
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200000e0 	.word	0x200000e0

080015d8 <delay_50ns>:

void delay_50ns(uint32_t ns)		// Zbog clock postavki svaki count up je 25ns
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2,0);			// Postavi counter vrijednost na 0
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <delay_50ns+0x2c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < ns);	// Cekaj dok se izbroji do te vrijednosti
 80015e8:	bf00      	nop
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <delay_50ns+0x2c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d8f9      	bhi.n	80015ea <delay_50ns+0x12>
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	2000012c 	.word	0x2000012c

08001608 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_USART1_UART_Init+0x58>)
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <MX_USART1_UART_Init+0x5c>)
 8001610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_USART1_UART_Init+0x58>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_USART1_UART_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_USART1_UART_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_USART1_UART_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART1_UART_Init+0x58>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_USART1_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART1_UART_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_USART1_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART1_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_USART1_UART_Init+0x58>)
 800164c:	f002 feea 	bl	8004424 <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001656:	f7ff fd96 	bl	8001186 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000178 	.word	0x20000178
 8001664:	40013800 	.word	0x40013800

08001668 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 800166e:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <MX_USART2_UART_Init+0x5c>)
 8001670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 80016ac:	f002 feba 	bl	8004424 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016b6:	f7ff fd66 	bl	8001186 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000200 	.word	0x20000200
 80016c4:	40004400 	.word	0x40004400

080016c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0ae      	sub	sp, #184	; 0xb8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	2288      	movs	r2, #136	; 0x88
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fc95 	bl	8005018 <memset>
  if(uartHandle->Instance==USART1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a43      	ldr	r2, [pc, #268]	; (8001800 <HAL_UART_MspInit+0x138>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d13d      	bne.n	8001774 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016fc:	2300      	movs	r3, #0
 80016fe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4618      	mov	r0, r3
 8001706:	f001 fa6f 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001710:	f7ff fd39 	bl	8001186 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001714:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_UART_MspInit+0x13c>)
 8001716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001718:	4a3a      	ldr	r2, [pc, #232]	; (8001804 <HAL_UART_MspInit+0x13c>)
 800171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171e:	6613      	str	r3, [r2, #96]	; 0x60
 8001720:	4b38      	ldr	r3, [pc, #224]	; (8001804 <HAL_UART_MspInit+0x13c>)
 8001722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b35      	ldr	r3, [pc, #212]	; (8001804 <HAL_UART_MspInit+0x13c>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001730:	4a34      	ldr	r2, [pc, #208]	; (8001804 <HAL_UART_MspInit+0x13c>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001738:	4b32      	ldr	r3, [pc, #200]	; (8001804 <HAL_UART_MspInit+0x13c>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001744:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001748:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800175e:	2307      	movs	r3, #7
 8001760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001768:	4619      	mov	r1, r3
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f000 f9fd 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001772:	e040      	b.n	80017f6 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a23      	ldr	r2, [pc, #140]	; (8001808 <HAL_UART_MspInit+0x140>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d13b      	bne.n	80017f6 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800177e:	2302      	movs	r3, #2
 8001780:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001782:	2300      	movs	r3, #0
 8001784:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fa2c 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001796:	f7ff fcf6 	bl	8001186 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_UART_MspInit+0x13c>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_UART_MspInit+0x13c>)
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	6593      	str	r3, [r2, #88]	; 0x58
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_UART_MspInit+0x13c>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_UART_MspInit+0x13c>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <HAL_UART_MspInit+0x13c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_UART_MspInit+0x13c>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017ca:	230c      	movs	r3, #12
 80017cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e2:	2307      	movs	r3, #7
 80017e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f000 f9bb 	bl	8001b6c <HAL_GPIO_Init>
}
 80017f6:	bf00      	nop
 80017f8:	37b8      	adds	r7, #184	; 0xb8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40013800 	.word	0x40013800
 8001804:	40021000 	.word	0x40021000
 8001808:	40004400 	.word	0x40004400

0800180c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001844 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001810:	f7ff fde2 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <LoopForever+0x6>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	; (800184c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <LoopForever+0xe>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	; (8001858 <LoopForever+0x16>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f003 fbfb 	bl	8005034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800183e:	f7ff fb81 	bl	8000f44 <main>

08001842 <LoopForever>:

LoopForever:
    b LoopForever
 8001842:	e7fe      	b.n	8001842 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001844:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800184c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001850:	08005df0 	.word	0x08005df0
  ldr r2, =_sbss
 8001854:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001858:	200003d4 	.word	0x200003d4

0800185c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC1_2_IRQHandler>
	...

08001860 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_Init+0x3c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_Init+0x3c>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001874:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001876:	2003      	movs	r0, #3
 8001878:	f000 f944 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187c:	200f      	movs	r0, #15
 800187e:	f000 f80f 	bl	80018a0 <HAL_InitTick>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	e001      	b.n	8001892 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800188e:	f7ff fd1f 	bl	80012d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001892:	79fb      	ldrb	r3, [r7, #7]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40022000 	.word	0x40022000

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_InitTick+0x6c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d023      	beq.n	80018fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_InitTick+0x70>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_InitTick+0x6c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f941 	bl	8001b52 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10f      	bne.n	80018f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d809      	bhi.n	80018f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 f919 	bl	8001b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_InitTick+0x74>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e007      	b.n	8001900 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e004      	b.n	8001900 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	e001      	b.n	8001900 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x20>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x24>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_IncTick+0x24>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008
 800193c:	20000288 	.word	0x20000288

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000288 	.word	0x20000288

08001958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff ffee 	bl	8001940 <HAL_GetTick>
 8001964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d005      	beq.n	800197e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_Delay+0x44>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197e:	bf00      	nop
 8001980:	f7ff ffde 	bl	8001940 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d8f7      	bhi.n	8001980 <HAL_Delay+0x28>
  {
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000008 	.word	0x20000008

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff8e 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff47 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff5c 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff8e 	bl	8001a58 <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5d 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffb0 	bl	8001ac0 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7a:	e17f      	b.n	8001e7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8171 	beq.w	8001e76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d005      	beq.n	8001bac <HAL_GPIO_Init+0x40>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d130      	bne.n	8001c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be2:	2201      	movs	r2, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 0201 	and.w	r2, r3, #1
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d118      	bne.n	8001c4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c20:	2201      	movs	r2, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f003 0201 	and.w	r2, r3, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d017      	beq.n	8001c88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	6939      	ldr	r1, [r7, #16]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80ac 	beq.w	8001e76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	4a5e      	ldr	r2, [pc, #376]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2a:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d36:	4a5a      	ldr	r2, [pc, #360]	; (8001ea0 <HAL_GPIO_Init+0x334>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d60:	d025      	beq.n	8001dae <HAL_GPIO_Init+0x242>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4f      	ldr	r2, [pc, #316]	; (8001ea4 <HAL_GPIO_Init+0x338>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01f      	beq.n	8001daa <HAL_GPIO_Init+0x23e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ea8 <HAL_GPIO_Init+0x33c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d019      	beq.n	8001da6 <HAL_GPIO_Init+0x23a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4d      	ldr	r2, [pc, #308]	; (8001eac <HAL_GPIO_Init+0x340>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0x236>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4c      	ldr	r2, [pc, #304]	; (8001eb0 <HAL_GPIO_Init+0x344>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00d      	beq.n	8001d9e <HAL_GPIO_Init+0x232>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4b      	ldr	r2, [pc, #300]	; (8001eb4 <HAL_GPIO_Init+0x348>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <HAL_GPIO_Init+0x22e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_GPIO_Init+0x22a>
 8001d92:	2306      	movs	r3, #6
 8001d94:	e00c      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00a      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e008      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d9e:	2304      	movs	r3, #4
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001da2:	2303      	movs	r3, #3
 8001da4:	e004      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001dae:	2300      	movs	r3, #0
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	f002 0203 	and.w	r2, r2, #3
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4093      	lsls	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_GPIO_Init+0x334>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001df2:	4a32      	ldr	r2, [pc, #200]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e1c:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e70:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f47f ae78 	bne.w	8001b7c <HAL_GPIO_Init+0x10>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	48000400 	.word	0x48000400
 8001ea8:	48000800 	.word	0x48000800
 8001eac:	48000c00 	.word	0x48000c00
 8001eb0:	48001000 	.word	0x48001000
 8001eb4:	48001400 	.word	0x48001400
 8001eb8:	48001800 	.word	0x48001800
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e001      	b.n	8001ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40007000 	.word	0x40007000

08001f3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f4a:	d130      	bne.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4c:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f58:	d038      	beq.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f62:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2232      	movs	r2, #50	; 0x32
 8001f70:	fb02 f303 	mul.w	r3, r2, r3
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0c9b      	lsrs	r3, r3, #18
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f80:	e002      	b.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f88:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f94:	d102      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f2      	bne.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa8:	d110      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e00f      	b.n	8001fce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fba:	d007      	beq.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc4:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	431bde83 	.word	0x431bde83

08001fe8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e3ca      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffa:	4b97      	ldr	r3, [pc, #604]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002004:	4b94      	ldr	r3, [pc, #592]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80e4 	beq.w	80021e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_RCC_OscConfig+0x4a>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b0c      	cmp	r3, #12
 8002026:	f040 808b 	bne.w	8002140 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 8087 	bne.w	8002140 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002032:	4b89      	ldr	r3, [pc, #548]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x62>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e3a2      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1a      	ldr	r2, [r3, #32]
 800204e:	4b82      	ldr	r3, [pc, #520]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <HAL_RCC_OscConfig+0x7c>
 800205a:	4b7f      	ldr	r3, [pc, #508]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002062:	e005      	b.n	8002070 <HAL_RCC_OscConfig+0x88>
 8002064:	4b7c      	ldr	r3, [pc, #496]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002070:	4293      	cmp	r3, r2
 8002072:	d223      	bcs.n	80020bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fd55 	bl	8002b28 <RCC_SetFlashLatencyFromMSIRange>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e383      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002088:	4b73      	ldr	r3, [pc, #460]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a72      	ldr	r2, [pc, #456]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800208e:	f043 0308 	orr.w	r3, r3, #8
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b70      	ldr	r3, [pc, #448]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	496d      	ldr	r1, [pc, #436]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a6:	4b6c      	ldr	r3, [pc, #432]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	4968      	ldr	r1, [pc, #416]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
 80020ba:	e025      	b.n	8002108 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020bc:	4b66      	ldr	r3, [pc, #408]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a65      	ldr	r2, [pc, #404]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80020c2:	f043 0308 	orr.w	r3, r3, #8
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4960      	ldr	r1, [pc, #384]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020da:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	495b      	ldr	r1, [pc, #364]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fd15 	bl	8002b28 <RCC_SetFlashLatencyFromMSIRange>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e343      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002108:	f000 fc4a 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800210c:	4602      	mov	r2, r0
 800210e:	4b52      	ldr	r3, [pc, #328]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	4950      	ldr	r1, [pc, #320]	; (800225c <HAL_RCC_OscConfig+0x274>)
 800211a:	5ccb      	ldrb	r3, [r1, r3]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
 8002124:	4a4e      	ldr	r2, [pc, #312]	; (8002260 <HAL_RCC_OscConfig+0x278>)
 8002126:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002128:	4b4e      	ldr	r3, [pc, #312]	; (8002264 <HAL_RCC_OscConfig+0x27c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fbb7 	bl	80018a0 <HAL_InitTick>
 8002132:	4603      	mov	r3, r0
 8002134:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d052      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	e327      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d032      	beq.n	80021ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002148:	4b43      	ldr	r3, [pc, #268]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a42      	ldr	r2, [pc, #264]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002154:	f7ff fbf4 	bl	8001940 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800215c:	f7ff fbf0 	bl	8001940 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e310      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a36      	ldr	r2, [pc, #216]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4931      	ldr	r1, [pc, #196]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002198:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	492c      	ldr	r1, [pc, #176]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
 80021ac:	e01a      	b.n	80021e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a29      	ldr	r2, [pc, #164]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ba:	f7ff fbc1 	bl	8001940 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021c2:	f7ff fbbd 	bl	8001940 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e2dd      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021d4:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x1da>
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d074      	beq.n	80022da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d005      	beq.n	8002202 <HAL_RCC_OscConfig+0x21a>
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d10e      	bne.n	800221a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d10b      	bne.n	800221a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d064      	beq.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d160      	bne.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e2ba      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x24a>
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e026      	b.n	8002280 <HAL_RCC_OscConfig+0x298>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800223a:	d115      	bne.n	8002268 <HAL_RCC_OscConfig+0x280>
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a05      	ldr	r2, [pc, #20]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 8002242:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a02      	ldr	r2, [pc, #8]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	e014      	b.n	8002280 <HAL_RCC_OscConfig+0x298>
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	08005d64 	.word	0x08005d64
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004
 8002268:	4ba0      	ldr	r3, [pc, #640]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a9f      	ldr	r2, [pc, #636]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b9d      	ldr	r3, [pc, #628]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a9c      	ldr	r2, [pc, #624]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7ff fb5a 	bl	8001940 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff fb56 	bl	8001940 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e276      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a2:	4b92      	ldr	r3, [pc, #584]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x2a8>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7ff fb46 	bl	8001940 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff fb42 	bl	8001940 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e262      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ca:	4b88      	ldr	r3, [pc, #544]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x2d0>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d060      	beq.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_OscConfig+0x310>
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d119      	bne.n	8002326 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d116      	bne.n	8002326 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f8:	4b7c      	ldr	r3, [pc, #496]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_OscConfig+0x328>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e23f      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b76      	ldr	r3, [pc, #472]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	4973      	ldr	r1, [pc, #460]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002324:	e040      	b.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d023      	beq.n	8002376 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800232e:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233a:	f7ff fb01 	bl	8001940 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002342:	f7ff fafd 	bl	8001940 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e21d      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002354:	4b65      	ldr	r3, [pc, #404]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	4b62      	ldr	r3, [pc, #392]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	495f      	ldr	r1, [pc, #380]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
 8002374:	e018      	b.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002376:	4b5d      	ldr	r3, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a5c      	ldr	r2, [pc, #368]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 800237c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7ff fadd 	bl	8001940 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238a:	f7ff fad9 	bl	8001940 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e1f9      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d03c      	beq.n	800242e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01c      	beq.n	80023f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023bc:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80023be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c2:	4a4a      	ldr	r2, [pc, #296]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7ff fab8 	bl	8001940 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d4:	f7ff fab4 	bl	8001940 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1d4      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80023e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ef      	beq.n	80023d4 <HAL_RCC_OscConfig+0x3ec>
 80023f4:	e01b      	b.n	800242e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f6:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80023f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fc:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002406:	f7ff fa9b 	bl	8001940 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240e:	f7ff fa97 	bl	8001940 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1b7      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002420:	4b32      	ldr	r3, [pc, #200]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ef      	bne.n	800240e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80a6 	beq.w	8002588 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10d      	bne.n	8002468 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	4a26      	ldr	r2, [pc, #152]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002456:	6593      	str	r3, [r2, #88]	; 0x58
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002464:	2301      	movs	r3, #1
 8002466:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002468:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <HAL_RCC_OscConfig+0x508>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d118      	bne.n	80024a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002474:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <HAL_RCC_OscConfig+0x508>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <HAL_RCC_OscConfig+0x508>)
 800247a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002480:	f7ff fa5e 	bl	8001940 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002488:	f7ff fa5a 	bl	8001940 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e17a      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_RCC_OscConfig+0x508>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4d8>
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024be:	e029      	b.n	8002514 <HAL_RCC_OscConfig+0x52c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d115      	bne.n	80024f4 <HAL_RCC_OscConfig+0x50c>
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	4a03      	ldr	r2, [pc, #12]	; (80024ec <HAL_RCC_OscConfig+0x504>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e8:	e014      	b.n	8002514 <HAL_RCC_OscConfig+0x52c>
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
 80024f4:	4b9c      	ldr	r3, [pc, #624]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	4a9b      	ldr	r2, [pc, #620]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002504:	4b98      	ldr	r3, [pc, #608]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	4a97      	ldr	r2, [pc, #604]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d016      	beq.n	800254a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7ff fa10 	bl	8001940 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002522:	e00a      	b.n	800253a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7ff fa0c 	bl	8001940 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e12a      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800253a:	4b8b      	ldr	r3, [pc, #556]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0ed      	beq.n	8002524 <HAL_RCC_OscConfig+0x53c>
 8002548:	e015      	b.n	8002576 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7ff f9f9 	bl	8001940 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7ff f9f5 	bl	8001940 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e113      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002568:	4b7f      	ldr	r3, [pc, #508]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ed      	bne.n	8002552 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002576:	7ffb      	ldrb	r3, [r7, #31]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d105      	bne.n	8002588 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257c:	4b7a      	ldr	r3, [pc, #488]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	4a79      	ldr	r2, [pc, #484]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 8002582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002586:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80fe 	beq.w	800278e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	2b02      	cmp	r3, #2
 8002598:	f040 80d0 	bne.w	800273c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800259c:	4b72      	ldr	r3, [pc, #456]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 0203 	and.w	r2, r3, #3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d130      	bne.n	8002612 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	3b01      	subs	r3, #1
 80025bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d127      	bne.n	8002612 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d11f      	bne.n	8002612 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025dc:	2a07      	cmp	r2, #7
 80025de:	bf14      	ite	ne
 80025e0:	2201      	movne	r2, #1
 80025e2:	2200      	moveq	r2, #0
 80025e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d113      	bne.n	8002612 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	3b01      	subs	r3, #1
 80025f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d109      	bne.n	8002612 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	3b01      	subs	r3, #1
 800260c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d06e      	beq.n	80026f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b0c      	cmp	r3, #12
 8002616:	d069      	beq.n	80026ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0ad      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002634:	4b4c      	ldr	r3, [pc, #304]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a4b      	ldr	r2, [pc, #300]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 800263a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800263e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002640:	f7ff f97e 	bl	8001940 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7ff f97a 	bl	8001940 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e09a      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265a:	4b43      	ldr	r3, [pc, #268]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002666:	4b40      	ldr	r3, [pc, #256]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_RCC_OscConfig+0x784>)
 800266c:	4013      	ands	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002676:	3a01      	subs	r2, #1
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	4311      	orrs	r1, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002680:	0212      	lsls	r2, r2, #8
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002688:	0852      	lsrs	r2, r2, #1
 800268a:	3a01      	subs	r2, #1
 800268c:	0552      	lsls	r2, r2, #21
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002694:	0852      	lsrs	r2, r2, #1
 8002696:	3a01      	subs	r2, #1
 8002698:	0652      	lsls	r2, r2, #25
 800269a:	4311      	orrs	r1, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026a0:	0912      	lsrs	r2, r2, #4
 80026a2:	0452      	lsls	r2, r2, #17
 80026a4:	430a      	orrs	r2, r1
 80026a6:	4930      	ldr	r1, [pc, #192]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 80026b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026b8:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 80026be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026c4:	f7ff f93c 	bl	8001940 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7ff f938 	bl	8001940 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e058      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ea:	e050      	b.n	800278e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e04f      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d148      	bne.n	800278e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a19      	ldr	r2, [pc, #100]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 8002702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002706:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a16      	ldr	r2, [pc, #88]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002712:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002714:	f7ff f914 	bl	8001940 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7ff f910 	bl	8001940 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e030      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x734>
 800273a:	e028      	b.n	800278e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d023      	beq.n	800278a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_RCC_OscConfig+0x780>)
 8002748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800274c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7ff f8f7 	bl	8001940 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002754:	e00c      	b.n	8002770 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002756:	f7ff f8f3 	bl	8001940 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d905      	bls.n	8002770 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e013      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
 8002768:	40021000 	.word	0x40021000
 800276c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_OscConfig+0x7b0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ec      	bne.n	8002756 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCC_OscConfig+0x7b0>)
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	4905      	ldr	r1, [pc, #20]	; (8002798 <HAL_RCC_OscConfig+0x7b0>)
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_RCC_OscConfig+0x7b4>)
 8002784:	4013      	ands	r3, r2
 8002786:	60cb      	str	r3, [r1, #12]
 8002788:	e001      	b.n	800278e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	feeefffc 	.word	0xfeeefffc

080027a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0e7      	b.n	8002984 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b4:	4b75      	ldr	r3, [pc, #468]	; (800298c <HAL_RCC_ClockConfig+0x1ec>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d910      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b72      	ldr	r3, [pc, #456]	; (800298c <HAL_RCC_ClockConfig+0x1ec>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	4970      	ldr	r1, [pc, #448]	; (800298c <HAL_RCC_ClockConfig+0x1ec>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b6e      	ldr	r3, [pc, #440]	; (800298c <HAL_RCC_ClockConfig+0x1ec>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0cf      	b.n	8002984 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d010      	beq.n	8002812 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	4b66      	ldr	r3, [pc, #408]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d908      	bls.n	8002812 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b63      	ldr	r3, [pc, #396]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4960      	ldr	r1, [pc, #384]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d04c      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002826:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d121      	bne.n	8002876 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0a6      	b.n	8002984 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800283e:	4b54      	ldr	r3, [pc, #336]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d115      	bne.n	8002876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e09a      	b.n	8002984 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002856:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e08e      	b.n	8002984 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002866:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e086      	b.n	8002984 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002876:	4b46      	ldr	r3, [pc, #280]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f023 0203 	bic.w	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4943      	ldr	r1, [pc, #268]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	4313      	orrs	r3, r2
 8002886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002888:	f7ff f85a 	bl	8001940 <HAL_GetTick>
 800288c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002890:	f7ff f856 	bl	8001940 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	; 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e06e      	b.n	8002984 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 020c 	and.w	r2, r3, #12
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d1eb      	bne.n	8002890 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d010      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	4b31      	ldr	r3, [pc, #196]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d208      	bcs.n	80028e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	492b      	ldr	r1, [pc, #172]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e6:	4b29      	ldr	r3, [pc, #164]	; (800298c <HAL_RCC_ClockConfig+0x1ec>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d210      	bcs.n	8002916 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x1ec>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 0207 	bic.w	r2, r3, #7
 80028fc:	4923      	ldr	r1, [pc, #140]	; (800298c <HAL_RCC_ClockConfig+0x1ec>)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002904:	4b21      	ldr	r3, [pc, #132]	; (800298c <HAL_RCC_ClockConfig+0x1ec>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d001      	beq.n	8002916 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e036      	b.n	8002984 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4918      	ldr	r1, [pc, #96]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d009      	beq.n	8002954 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4910      	ldr	r1, [pc, #64]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002954:	f000 f824 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	490b      	ldr	r1, [pc, #44]	; (8002994 <HAL_RCC_ClockConfig+0x1f4>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1f8>)
 8002972:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1fc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe ff91 	bl	80018a0 <HAL_InitTick>
 800297e:	4603      	mov	r3, r0
 8002980:	72fb      	strb	r3, [r7, #11]

  return status;
 8002982:	7afb      	ldrb	r3, [r7, #11]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40022000 	.word	0x40022000
 8002990:	40021000 	.word	0x40021000
 8002994:	08005d64 	.word	0x08005d64
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ae:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b8:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x34>
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d121      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d11e      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029d4:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e005      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029fc:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <HAL_RCC_GetSysClockFreq+0x10c>)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d102      	bne.n	8002a1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e004      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d134      	bne.n	8002a98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d003      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0xac>
 8002a44:	e005      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a48:	617b      	str	r3, [r7, #20]
      break;
 8002a4a:	e005      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a4e:	617b      	str	r3, [r7, #20]
      break;
 8002a50:	e002      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	617b      	str	r3, [r7, #20]
      break;
 8002a56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	3301      	adds	r3, #1
 8002a64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	fb03 f202 	mul.w	r2, r3, r2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	0e5b      	lsrs	r3, r3, #25
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a98:	69bb      	ldr	r3, [r7, #24]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	08005d7c 	.word	0x08005d7c
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	007a1200 	.word	0x007a1200

08002ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <HAL_RCC_GetHCLKFreq+0x14>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000000 	.word	0x20000000

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ad4:	f7ff fff0 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4904      	ldr	r1, [pc, #16]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08005d74 	.word	0x08005d74

08002afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b00:	f7ff ffda 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0adb      	lsrs	r3, r3, #11
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4904      	ldr	r1, [pc, #16]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08005d74 	.word	0x08005d74

08002b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b34:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b40:	f7ff f9ee 	bl	8001f20 <HAL_PWREx_GetVoltageRange>
 8002b44:	6178      	str	r0, [r7, #20]
 8002b46:	e014      	b.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	4a24      	ldr	r2, [pc, #144]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6593      	str	r3, [r2, #88]	; 0x58
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b60:	f7ff f9de 	bl	8001f20 <HAL_PWREx_GetVoltageRange>
 8002b64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b78:	d10b      	bne.n	8002b92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d919      	bls.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2ba0      	cmp	r3, #160	; 0xa0
 8002b84:	d902      	bls.n	8002b8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b86:	2302      	movs	r3, #2
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	e013      	b.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	e010      	b.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b80      	cmp	r3, #128	; 0x80
 8002b96:	d902      	bls.n	8002b9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b98:	2303      	movs	r3, #3
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	e00a      	b.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d102      	bne.n	8002baa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	e004      	b.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b70      	cmp	r3, #112	; 0x70
 8002bae:	d101      	bne.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 0207 	bic.w	r2, r3, #7
 8002bbc:	4909      	ldr	r1, [pc, #36]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bc4:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40022000 	.word	0x40022000

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d041      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c0c:	d02a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c12:	d824      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c18:	d008      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c1e:	d81e      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c28:	d010      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c2a:	e018      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c2c:	4b86      	ldr	r3, [pc, #536]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4a85      	ldr	r2, [pc, #532]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c38:	e015      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fabb 	bl	80031bc <RCCEx_PLLSAI1_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c4a:	e00c      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3320      	adds	r3, #32
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fba6 	bl	80033a4 <RCCEx_PLLSAI2_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c5c:	e003      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	74fb      	strb	r3, [r7, #19]
      break;
 8002c62:	e000      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c6c:	4b76      	ldr	r3, [pc, #472]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c7a:	4973      	ldr	r1, [pc, #460]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c82:	e001      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d041      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c9c:	d02a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ca2:	d824      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ca8:	d008      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cae:	d81e      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cba:	e018      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cbc:	4b62      	ldr	r3, [pc, #392]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a61      	ldr	r2, [pc, #388]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cc8:	e015      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fa73 	bl	80031bc <RCCEx_PLLSAI1_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cda:	e00c      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3320      	adds	r3, #32
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fb5e 	bl	80033a4 <RCCEx_PLLSAI2_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cec:	e003      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cfc:	4b52      	ldr	r3, [pc, #328]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0a:	494f      	ldr	r1, [pc, #316]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d12:	e001      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80a0 	beq.w	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	4a40      	ldr	r2, [pc, #256]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d4c:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3a      	ldr	r2, [pc, #232]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d68:	f7fe fdea 	bl	8001940 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d6e:	e009      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fe fde6 	bl	8001940 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d902      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	74fb      	strb	r3, [r7, #19]
        break;
 8002d82:	e005      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d84:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ef      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d15c      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d96:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01f      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d019      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe fda5 	bl	8001940 <HAL_GetTick>
 8002df6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df8:	e00b      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fe fda1 	bl	8001940 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d902      	bls.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e10:	e006      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e12:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ec      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e36:	4904      	ldr	r1, [pc, #16]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e3e:	e009      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	74bb      	strb	r3, [r7, #18]
 8002e44:	e006      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e54:	7c7b      	ldrb	r3, [r7, #17]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4b9e      	ldr	r3, [pc, #632]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	4a9d      	ldr	r2, [pc, #628]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e72:	4b98      	ldr	r3, [pc, #608]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f023 0203 	bic.w	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	4994      	ldr	r1, [pc, #592]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e94:	4b8f      	ldr	r3, [pc, #572]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f023 020c 	bic.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea2:	498c      	ldr	r1, [pc, #560]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eb6:	4b87      	ldr	r3, [pc, #540]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	4983      	ldr	r1, [pc, #524]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ed8:	4b7e      	ldr	r3, [pc, #504]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	497b      	ldr	r1, [pc, #492]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002efa:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f08:	4972      	ldr	r1, [pc, #456]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f1c:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2a:	496a      	ldr	r1, [pc, #424]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3e:	4b65      	ldr	r3, [pc, #404]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4c:	4961      	ldr	r1, [pc, #388]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f60:	4b5c      	ldr	r3, [pc, #368]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6e:	4959      	ldr	r1, [pc, #356]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f82:	4b54      	ldr	r3, [pc, #336]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	4950      	ldr	r1, [pc, #320]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fa4:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	4948      	ldr	r1, [pc, #288]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fc6:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	493f      	ldr	r1, [pc, #252]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d028      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fe8:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff6:	4937      	ldr	r1, [pc, #220]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003006:	d106      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003008:	4b32      	ldr	r3, [pc, #200]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a31      	ldr	r2, [pc, #196]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003012:	60d3      	str	r3, [r2, #12]
 8003014:	e011      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800301e:	d10c      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f8c8 	bl	80031bc <RCCEx_PLLSAI1_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003036:	7cfb      	ldrb	r3, [r7, #19]
 8003038:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d028      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	491f      	ldr	r1, [pc, #124]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003064:	d106      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	4a1a      	ldr	r2, [pc, #104]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003070:	60d3      	str	r3, [r2, #12]
 8003072:	e011      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800307c:	d10c      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	2101      	movs	r1, #1
 8003084:	4618      	mov	r0, r3
 8003086:	f000 f899 	bl	80031bc <RCCEx_PLLSAI1_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d02b      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b2:	4908      	ldr	r1, [pc, #32]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c2:	d109      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a02      	ldr	r2, [pc, #8]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ce:	60d3      	str	r3, [r2, #12]
 80030d0:	e014      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f867 	bl	80031bc <RCCEx_PLLSAI1_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d02f      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003116:	4928      	ldr	r1, [pc, #160]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003126:	d10d      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	2102      	movs	r1, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f844 	bl	80031bc <RCCEx_PLLSAI1_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d014      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	74bb      	strb	r3, [r7, #18]
 8003142:	e011      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314c:	d10c      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3320      	adds	r3, #32
 8003152:	2102      	movs	r1, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f925 	bl	80033a4 <RCCEx_PLLSAI2_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003174:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003182:	490d      	ldr	r1, [pc, #52]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a6:	4904      	ldr	r1, [pc, #16]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000

080031bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ca:	4b75      	ldr	r3, [pc, #468]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d018      	beq.n	8003208 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031d6:	4b72      	ldr	r3, [pc, #456]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0203 	and.w	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d10d      	bne.n	8003202 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
       ||
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031ee:	4b6c      	ldr	r3, [pc, #432]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
       ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d047      	beq.n	8003292 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	e044      	b.n	8003292 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d018      	beq.n	8003242 <RCCEx_PLLSAI1_Config+0x86>
 8003210:	2b03      	cmp	r3, #3
 8003212:	d825      	bhi.n	8003260 <RCCEx_PLLSAI1_Config+0xa4>
 8003214:	2b01      	cmp	r3, #1
 8003216:	d002      	beq.n	800321e <RCCEx_PLLSAI1_Config+0x62>
 8003218:	2b02      	cmp	r3, #2
 800321a:	d009      	beq.n	8003230 <RCCEx_PLLSAI1_Config+0x74>
 800321c:	e020      	b.n	8003260 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800321e:	4b60      	ldr	r3, [pc, #384]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11d      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322e:	e01a      	b.n	8003266 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003230:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003240:	e013      	b.n	800326a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003242:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800324e:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800325e:	e006      	b.n	800326e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      break;
 8003264:	e004      	b.n	8003270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800326e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10d      	bne.n	8003292 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	430b      	orrs	r3, r1
 800328c:	4944      	ldr	r1, [pc, #272]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d17d      	bne.n	8003394 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003298:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a40      	ldr	r2, [pc, #256]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800329e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a4:	f7fe fb4c 	bl	8001940 <HAL_GetTick>
 80032a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032aa:	e009      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ac:	f7fe fb48 	bl	8001940 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d902      	bls.n	80032c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	73fb      	strb	r3, [r7, #15]
        break;
 80032be:	e005      	b.n	80032cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032c0:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ef      	bne.n	80032ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d160      	bne.n	8003394 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6892      	ldr	r2, [r2, #8]
 80032e8:	0211      	lsls	r1, r2, #8
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	0912      	lsrs	r2, r2, #4
 80032f0:	0452      	lsls	r2, r2, #17
 80032f2:	430a      	orrs	r2, r1
 80032f4:	492a      	ldr	r1, [pc, #168]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	610b      	str	r3, [r1, #16]
 80032fa:	e027      	b.n	800334c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d112      	bne.n	8003328 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003302:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800330a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6892      	ldr	r2, [r2, #8]
 8003312:	0211      	lsls	r1, r2, #8
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6912      	ldr	r2, [r2, #16]
 8003318:	0852      	lsrs	r2, r2, #1
 800331a:	3a01      	subs	r2, #1
 800331c:	0552      	lsls	r2, r2, #21
 800331e:	430a      	orrs	r2, r1
 8003320:	491f      	ldr	r1, [pc, #124]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	610b      	str	r3, [r1, #16]
 8003326:	e011      	b.n	800334c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003328:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003330:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6892      	ldr	r2, [r2, #8]
 8003338:	0211      	lsls	r1, r2, #8
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6952      	ldr	r2, [r2, #20]
 800333e:	0852      	lsrs	r2, r2, #1
 8003340:	3a01      	subs	r2, #1
 8003342:	0652      	lsls	r2, r2, #25
 8003344:	430a      	orrs	r2, r1
 8003346:	4916      	ldr	r1, [pc, #88]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003356:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fe faf2 	bl	8001940 <HAL_GetTick>
 800335c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800335e:	e009      	b.n	8003374 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003360:	f7fe faee 	bl	8001940 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d902      	bls.n	8003374 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	73fb      	strb	r3, [r7, #15]
          break;
 8003372:	e005      	b.n	8003380 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ef      	beq.n	8003360 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	4904      	ldr	r1, [pc, #16]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003390:	4313      	orrs	r3, r2
 8003392:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000

080033a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033b2:	4b6a      	ldr	r3, [pc, #424]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d018      	beq.n	80033f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033be:	4b67      	ldr	r3, [pc, #412]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f003 0203 	and.w	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d10d      	bne.n	80033ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
       ||
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033d6:	4b61      	ldr	r3, [pc, #388]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
       ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d047      	beq.n	800347a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	e044      	b.n	800347a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d018      	beq.n	800342a <RCCEx_PLLSAI2_Config+0x86>
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d825      	bhi.n	8003448 <RCCEx_PLLSAI2_Config+0xa4>
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d002      	beq.n	8003406 <RCCEx_PLLSAI2_Config+0x62>
 8003400:	2b02      	cmp	r3, #2
 8003402:	d009      	beq.n	8003418 <RCCEx_PLLSAI2_Config+0x74>
 8003404:	e020      	b.n	8003448 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003406:	4b55      	ldr	r3, [pc, #340]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11d      	bne.n	800344e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003416:	e01a      	b.n	800344e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003418:	4b50      	ldr	r3, [pc, #320]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003420:	2b00      	cmp	r3, #0
 8003422:	d116      	bne.n	8003452 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003428:	e013      	b.n	8003452 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800342a:	4b4c      	ldr	r3, [pc, #304]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003436:	4b49      	ldr	r3, [pc, #292]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003446:	e006      	b.n	8003456 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      break;
 800344c:	e004      	b.n	8003458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800344e:	bf00      	nop
 8003450:	e002      	b.n	8003458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003452:	bf00      	nop
 8003454:	e000      	b.n	8003458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003456:	bf00      	nop
    }

    if(status == HAL_OK)
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800345e:	4b3f      	ldr	r3, [pc, #252]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6819      	ldr	r1, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	430b      	orrs	r3, r1
 8003474:	4939      	ldr	r1, [pc, #228]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003476:	4313      	orrs	r3, r2
 8003478:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d167      	bne.n	8003550 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003480:	4b36      	ldr	r3, [pc, #216]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a35      	ldr	r2, [pc, #212]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348c:	f7fe fa58 	bl	8001940 <HAL_GetTick>
 8003490:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003492:	e009      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003494:	f7fe fa54 	bl	8001940 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d902      	bls.n	80034a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	73fb      	strb	r3, [r7, #15]
        break;
 80034a6:	e005      	b.n	80034b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034a8:	4b2c      	ldr	r3, [pc, #176]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ef      	bne.n	8003494 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d14a      	bne.n	8003550 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d111      	bne.n	80034e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034c0:	4b26      	ldr	r3, [pc, #152]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6892      	ldr	r2, [r2, #8]
 80034d0:	0211      	lsls	r1, r2, #8
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68d2      	ldr	r2, [r2, #12]
 80034d6:	0912      	lsrs	r2, r2, #4
 80034d8:	0452      	lsls	r2, r2, #17
 80034da:	430a      	orrs	r2, r1
 80034dc:	491f      	ldr	r1, [pc, #124]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	614b      	str	r3, [r1, #20]
 80034e2:	e011      	b.n	8003508 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6892      	ldr	r2, [r2, #8]
 80034f4:	0211      	lsls	r1, r2, #8
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6912      	ldr	r2, [r2, #16]
 80034fa:	0852      	lsrs	r2, r2, #1
 80034fc:	3a01      	subs	r2, #1
 80034fe:	0652      	lsls	r2, r2, #25
 8003500:	430a      	orrs	r2, r1
 8003502:	4916      	ldr	r1, [pc, #88]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003504:	4313      	orrs	r3, r2
 8003506:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 800350e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003512:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fe fa14 	bl	8001940 <HAL_GetTick>
 8003518:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800351a:	e009      	b.n	8003530 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800351c:	f7fe fa10 	bl	8001940 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d902      	bls.n	8003530 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	73fb      	strb	r3, [r7, #15]
          break;
 800352e:	e005      	b.n	800353c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ef      	beq.n	800351c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4904      	ldr	r1, [pc, #16]	; (800355c <RCCEx_PLLSAI2_Config+0x1b8>)
 800354c:	4313      	orrs	r3, r2
 800354e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000

08003560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e095      	b.n	800369e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003582:	d009      	beq.n	8003598 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	61da      	str	r2, [r3, #28]
 800358a:	e005      	b.n	8003598 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fe2a 	bl	800120c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035d8:	d902      	bls.n	80035e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	e002      	b.n	80035e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035ee:	d007      	beq.n	8003600 <HAL_SPI_Init+0xa0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035f8:	d002      	beq.n	8003600 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	ea42 0103 	orr.w	r1, r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	0c1b      	lsrs	r3, r3, #16
 800365c:	f003 0204 	and.w	r2, r3, #4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800367c:	ea42 0103 	orr.w	r1, r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b08a      	sub	sp, #40	; 0x28
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036b4:	2301      	movs	r3, #1
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_SPI_TransmitReceive+0x26>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e1fd      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x422>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036d4:	f7fe f934 	bl	8001940 <HAL_GetTick>
 80036d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036f0:	7efb      	ldrb	r3, [r7, #27]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d00e      	beq.n	8003714 <HAL_SPI_TransmitReceive+0x6e>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036fc:	d106      	bne.n	800370c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <HAL_SPI_TransmitReceive+0x66>
 8003706:	7efb      	ldrb	r3, [r7, #27]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d003      	beq.n	8003714 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800370c:	2302      	movs	r3, #2
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003712:	e1d3      	b.n	8003abc <HAL_SPI_TransmitReceive+0x416>
//    errorcode = HAL_ERROR;
//    goto error;
//  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b04      	cmp	r3, #4
 800371e:	d003      	beq.n	8003728 <HAL_SPI_TransmitReceive+0x82>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2205      	movs	r2, #5
 8003724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	887a      	ldrh	r2, [r7, #2]
 800374e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800376a:	d802      	bhi.n	8003772 <HAL_SPI_TransmitReceive+0xcc>
 800376c:	8a3b      	ldrh	r3, [r7, #16]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d908      	bls.n	8003784 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	e007      	b.n	8003794 <HAL_SPI_TransmitReceive+0xee>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003792:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d007      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ba:	f240 8081 	bls.w	80038c0 <HAL_SPI_TransmitReceive+0x21a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x126>
 80037c6:	8a7b      	ldrh	r3, [r7, #18]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d16d      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f0:	e05a      	b.n	80038a8 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11b      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x192>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x192>
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	2b01      	cmp	r3, #1
 800380e:	d113      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x192>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	881a      	ldrh	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	1c9a      	adds	r2, r3, #2
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d11c      	bne.n	8003880 <HAL_SPI_TransmitReceive+0x1da>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_SPI_TransmitReceive+0x1da>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	b292      	uxth	r2, r2
 800385e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800387c:	2301      	movs	r3, #1
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003880:	f7fe f85e 	bl	8001940 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388c:	429a      	cmp	r2, r3
 800388e:	d80b      	bhi.n	80038a8 <HAL_SPI_TransmitReceive+0x202>
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d007      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80038a6:	e109      	b.n	8003abc <HAL_SPI_TransmitReceive+0x416>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d19f      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x14c>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d199      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x14c>
 80038be:	e0e3      	b.n	8003a88 <HAL_SPI_TransmitReceive+0x3e2>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x22a>
 80038c8:	8a7b      	ldrh	r3, [r7, #18]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	f040 80cf 	bne.w	8003a6e <HAL_SPI_TransmitReceive+0x3c8>
    {
      if (hspi->TxXferCount > 1U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d912      	bls.n	8003900 <HAL_SPI_TransmitReceive+0x25a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	881a      	ldrh	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	1c9a      	adds	r2, r3, #2
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b02      	subs	r3, #2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038fe:	e0b6      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x3c8>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	7812      	ldrb	r2, [r2, #0]
 800390c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003926:	e0a2      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x3c8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	d134      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x2fa>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02f      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x2fa>
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	2b01      	cmp	r3, #1
 8003944:	d12c      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x2fa>
      {
        if (hspi->TxXferCount > 1U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d912      	bls.n	8003976 <HAL_SPI_TransmitReceive+0x2d0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	1c9a      	adds	r2, r3, #2
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b02      	subs	r3, #2
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003974:	e012      	b.n	800399c <HAL_SPI_TransmitReceive+0x2f6>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	7812      	ldrb	r2, [r2, #0]
 8003982:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d148      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x39a>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d042      	beq.n	8003a40 <HAL_SPI_TransmitReceive+0x39a>
      {
        if (hspi->RxXferCount > 1U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d923      	bls.n	8003a0e <HAL_SPI_TransmitReceive+0x368>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	b292      	uxth	r2, r2
 80039d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	1c9a      	adds	r2, r3, #2
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b02      	subs	r3, #2
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d81f      	bhi.n	8003a3c <HAL_SPI_TransmitReceive+0x396>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	e016      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x396>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f103 020c 	add.w	r2, r3, #12
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a40:	f7fd ff7e 	bl	8001940 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d803      	bhi.n	8003a58 <HAL_SPI_TransmitReceive+0x3b2>
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d102      	bne.n	8003a5e <HAL_SPI_TransmitReceive+0x3b8>
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d107      	bne.n	8003a6e <HAL_SPI_TransmitReceive+0x3c8>
      {
        errorcode = HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003a6c:	e026      	b.n	8003abc <HAL_SPI_TransmitReceive+0x416>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f47f af57 	bne.w	8003928 <HAL_SPI_TransmitReceive+0x282>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f47f af50 	bne.w	8003928 <HAL_SPI_TransmitReceive+0x282>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f93d 	bl	8003d0c <SPI_EndRxTxTransaction>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x3fe>
  {
    errorcode = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_SPI_TransmitReceive+0x40e>
  {
    errorcode = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e003      	b.n	8003abc <HAL_SPI_TransmitReceive+0x416>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ae0:	f7fd ff2e 	bl	8001940 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003af0:	f7fd ff26 	bl	8001940 <HAL_GetTick>
 8003af4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003af6:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	015b      	lsls	r3, r3, #5
 8003afc:	0d1b      	lsrs	r3, r3, #20
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	fb02 f303 	mul.w	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b06:	e054      	b.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d050      	beq.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b10:	f7fd ff16 	bl	8001940 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d902      	bls.n	8003b26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d13d      	bne.n	8003ba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3e:	d111      	bne.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b48:	d004      	beq.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b52:	d107      	bne.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6c:	d10f      	bne.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e017      	b.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d19b      	bne.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000000 	.word	0x20000000

08003be0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bf2:	f7fd fea5 	bl	8001940 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	4413      	add	r3, r2
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c02:	f7fd fe9d 	bl	8001940 <HAL_GetTick>
 8003c06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c10:	4b3d      	ldr	r3, [pc, #244]	; (8003d08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	00da      	lsls	r2, r3, #3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	0d1b      	lsrs	r3, r3, #20
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c28:	e060      	b.n	8003cec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c30:	d107      	bne.n	8003c42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d104      	bne.n	8003c42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d050      	beq.n	8003cec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c4a:	f7fd fe79 	bl	8001940 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d902      	bls.n	8003c60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d13d      	bne.n	8003cdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c78:	d111      	bne.n	8003c9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c82:	d004      	beq.n	8003c8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8c:	d107      	bne.n	8003c9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca6:	d10f      	bne.n	8003cc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e010      	b.n	8003cfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d196      	bne.n	8003c2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3728      	adds	r7, #40	; 0x28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000000 	.word	0x20000000

08003d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff ff5b 	bl	8003be0 <SPI_WaitFifoStateUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e027      	b.n	8003d90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	2180      	movs	r1, #128	; 0x80
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff fec0 	bl	8003ad0 <SPI_WaitFlagStateUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e014      	b.n	8003d90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff ff34 	bl	8003be0 <SPI_WaitFifoStateUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e000      	b.n	8003d90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e049      	b.n	8003e3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fd fbbe 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f000 f968 	bl	80040ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e047      	b.n	8003ef0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a23      	ldr	r2, [pc, #140]	; (8003efc <HAL_TIM_Base_Start+0xb4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01d      	beq.n	8003eae <HAL_TIM_Base_Start+0x66>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7a:	d018      	beq.n	8003eae <HAL_TIM_Base_Start+0x66>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_TIM_Base_Start+0xb8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_TIM_Base_Start+0x66>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <HAL_TIM_Base_Start+0xbc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00e      	beq.n	8003eae <HAL_TIM_Base_Start+0x66>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_TIM_Base_Start+0xc0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_TIM_Base_Start+0x66>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <HAL_TIM_Base_Start+0xc4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_TIM_Base_Start+0x66>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <HAL_TIM_Base_Start+0xc8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d115      	bne.n	8003eda <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <HAL_TIM_Base_Start+0xcc>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b06      	cmp	r3, #6
 8003ebe:	d015      	beq.n	8003eec <HAL_TIM_Base_Start+0xa4>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec6:	d011      	beq.n	8003eec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed8:	e008      	b.n	8003eec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e000      	b.n	8003eee <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	00010007 	.word	0x00010007

08003f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_TIM_ConfigClockSource+0x1c>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e0b6      	b.n	80040a2 <HAL_TIM_ConfigClockSource+0x18a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f70:	d03e      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0xd8>
 8003f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f76:	f200 8087 	bhi.w	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7e:	f000 8086 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x176>
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f86:	d87f      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003f88:	2b70      	cmp	r3, #112	; 0x70
 8003f8a:	d01a      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0xaa>
 8003f8c:	2b70      	cmp	r3, #112	; 0x70
 8003f8e:	d87b      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003f90:	2b60      	cmp	r3, #96	; 0x60
 8003f92:	d050      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x11e>
 8003f94:	2b60      	cmp	r3, #96	; 0x60
 8003f96:	d877      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003f98:	2b50      	cmp	r3, #80	; 0x50
 8003f9a:	d03c      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xfe>
 8003f9c:	2b50      	cmp	r3, #80	; 0x50
 8003f9e:	d873      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d058      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0x13e>
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d86f      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003fa8:	2b30      	cmp	r3, #48	; 0x30
 8003faa:	d064      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15e>
 8003fac:	2b30      	cmp	r3, #48	; 0x30
 8003fae:	d86b      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d060      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15e>
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d867      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05c      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15e>
 8003fbc:	2b10      	cmp	r3, #16
 8003fbe:	d05a      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15e>
 8003fc0:	e062      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fd2:	f000 f97f 	bl	80042d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	609a      	str	r2, [r3, #8]
      break;
 8003fee:	e04f      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004000:	f000 f968 	bl	80042d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004012:	609a      	str	r2, [r3, #8]
      break;
 8004014:	e03c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004022:	461a      	mov	r2, r3
 8004024:	f000 f8dc 	bl	80041e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2150      	movs	r1, #80	; 0x50
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f935 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8004034:	e02c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004042:	461a      	mov	r2, r3
 8004044:	f000 f8fb 	bl	800423e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2160      	movs	r1, #96	; 0x60
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f925 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8004054:	e01c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004062:	461a      	mov	r2, r3
 8004064:	f000 f8bc 	bl	80041e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2140      	movs	r1, #64	; 0x40
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f915 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8004074:	e00c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4619      	mov	r1, r3
 8004080:	4610      	mov	r0, r2
 8004082:	f000 f90c 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8004086:	e003      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
      break;
 800408c:	e000      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800408e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a40      	ldr	r2, [pc, #256]	; (80041c0 <TIM_Base_SetConfig+0x114>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d00f      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a3d      	ldr	r2, [pc, #244]	; (80041c4 <TIM_Base_SetConfig+0x118>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00b      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a3c      	ldr	r2, [pc, #240]	; (80041c8 <TIM_Base_SetConfig+0x11c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3b      	ldr	r2, [pc, #236]	; (80041cc <TIM_Base_SetConfig+0x120>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3a      	ldr	r2, [pc, #232]	; (80041d0 <TIM_Base_SetConfig+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d108      	bne.n	80040fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a2f      	ldr	r2, [pc, #188]	; (80041c0 <TIM_Base_SetConfig+0x114>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01f      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d01b      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2c      	ldr	r2, [pc, #176]	; (80041c4 <TIM_Base_SetConfig+0x118>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d017      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2b      	ldr	r2, [pc, #172]	; (80041c8 <TIM_Base_SetConfig+0x11c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2a      	ldr	r2, [pc, #168]	; (80041cc <TIM_Base_SetConfig+0x120>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00f      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <TIM_Base_SetConfig+0x124>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00b      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a28      	ldr	r2, [pc, #160]	; (80041d4 <TIM_Base_SetConfig+0x128>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a27      	ldr	r2, [pc, #156]	; (80041d8 <TIM_Base_SetConfig+0x12c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a26      	ldr	r2, [pc, #152]	; (80041dc <TIM_Base_SetConfig+0x130>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d108      	bne.n	8004158 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a10      	ldr	r2, [pc, #64]	; (80041c0 <TIM_Base_SetConfig+0x114>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00f      	beq.n	80041a4 <TIM_Base_SetConfig+0xf8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <TIM_Base_SetConfig+0x124>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00b      	beq.n	80041a4 <TIM_Base_SetConfig+0xf8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a11      	ldr	r2, [pc, #68]	; (80041d4 <TIM_Base_SetConfig+0x128>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <TIM_Base_SetConfig+0xf8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a10      	ldr	r2, [pc, #64]	; (80041d8 <TIM_Base_SetConfig+0x12c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_Base_SetConfig+0xf8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a0f      	ldr	r2, [pc, #60]	; (80041dc <TIM_Base_SetConfig+0x130>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d103      	bne.n	80041ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	615a      	str	r2, [r3, #20]
}
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40000c00 	.word	0x40000c00
 80041d0:	40013400 	.word	0x40013400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800

080041e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800420a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 030a 	bic.w	r3, r3, #10
 800421c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	621a      	str	r2, [r3, #32]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f023 0210 	bic.w	r2, r3, #16
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800427a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f043 0307 	orr.w	r3, r3, #7
 80042c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	021a      	lsls	r2, r3, #8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e068      	b.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a2e      	ldr	r2, [pc, #184]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004366:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004378:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d01d      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439e:	d018      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a13      	ldr	r2, [pc, #76]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a14      	ldr	r2, [pc, #80]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10c      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40013400 	.word	0x40013400
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40014000 	.word	0x40014000

08004424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e040      	b.n	80044b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fd f93e 	bl	80016c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2224      	movs	r2, #36	; 0x24
 8004450:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fb6a 	bl	8004b44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8af 	bl	80045d4 <UART_SetConfig>
 8004476:	4603      	mov	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e01b      	b.n	80044b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800448e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800449e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fbe9 	bl	8004c88 <UART_CheckIdleState>
 80044b6:	4603      	mov	r3, r0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d178      	bne.n	80045ca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_UART_Transmit+0x24>
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e071      	b.n	80045cc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2221      	movs	r2, #33	; 0x21
 80044f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f6:	f7fd fa23 	bl	8001940 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	88fa      	ldrh	r2, [r7, #6]
 8004508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004514:	d108      	bne.n	8004528 <HAL_UART_Transmit+0x68>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	e003      	b.n	8004530 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800452c:	2300      	movs	r3, #0
 800452e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004530:	e030      	b.n	8004594 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2200      	movs	r2, #0
 800453a:	2180      	movs	r1, #128	; 0x80
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 fc4b 	bl	8004dd8 <UART_WaitOnFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e03c      	b.n	80045cc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	881a      	ldrh	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004564:	b292      	uxth	r2, r2
 8004566:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	3302      	adds	r3, #2
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	e008      	b.n	8004582 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	b292      	uxth	r2, r2
 800457a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	3301      	adds	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1c8      	bne.n	8004532 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2200      	movs	r2, #0
 80045a8:	2140      	movs	r1, #64	; 0x40
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fc14 	bl	8004dd8 <UART_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d004      	beq.n	80045c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e005      	b.n	80045cc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e000      	b.n	80045cc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80045ca:	2302      	movs	r3, #2
  }
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d8:	b08a      	sub	sp, #40	; 0x28
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4ba4      	ldr	r3, [pc, #656]	; (8004894 <UART_SetConfig+0x2c0>)
 8004604:	4013      	ands	r3, r2
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800460c:	430b      	orrs	r3, r1
 800460e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a99      	ldr	r2, [pc, #612]	; (8004898 <UART_SetConfig+0x2c4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	4313      	orrs	r3, r2
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a90      	ldr	r2, [pc, #576]	; (800489c <UART_SetConfig+0x2c8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d126      	bne.n	80046ac <UART_SetConfig+0xd8>
 800465e:	4b90      	ldr	r3, [pc, #576]	; (80048a0 <UART_SetConfig+0x2cc>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f003 0303 	and.w	r3, r3, #3
 8004668:	2b03      	cmp	r3, #3
 800466a:	d81b      	bhi.n	80046a4 <UART_SetConfig+0xd0>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <UART_SetConfig+0xa0>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004685 	.word	0x08004685
 8004678:	08004695 	.word	0x08004695
 800467c:	0800468d 	.word	0x0800468d
 8004680:	0800469d 	.word	0x0800469d
 8004684:	2301      	movs	r3, #1
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e116      	b.n	80048ba <UART_SetConfig+0x2e6>
 800468c:	2302      	movs	r3, #2
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004692:	e112      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004694:	2304      	movs	r3, #4
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e10e      	b.n	80048ba <UART_SetConfig+0x2e6>
 800469c:	2308      	movs	r3, #8
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e10a      	b.n	80048ba <UART_SetConfig+0x2e6>
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e106      	b.n	80048ba <UART_SetConfig+0x2e6>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a7c      	ldr	r2, [pc, #496]	; (80048a4 <UART_SetConfig+0x2d0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d138      	bne.n	8004728 <UART_SetConfig+0x154>
 80046b6:	4b7a      	ldr	r3, [pc, #488]	; (80048a0 <UART_SetConfig+0x2cc>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	f003 030c 	and.w	r3, r3, #12
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d82d      	bhi.n	8004720 <UART_SetConfig+0x14c>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0xf8>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	08004701 	.word	0x08004701
 80046d0:	08004721 	.word	0x08004721
 80046d4:	08004721 	.word	0x08004721
 80046d8:	08004721 	.word	0x08004721
 80046dc:	08004711 	.word	0x08004711
 80046e0:	08004721 	.word	0x08004721
 80046e4:	08004721 	.word	0x08004721
 80046e8:	08004721 	.word	0x08004721
 80046ec:	08004709 	.word	0x08004709
 80046f0:	08004721 	.word	0x08004721
 80046f4:	08004721 	.word	0x08004721
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004719 	.word	0x08004719
 8004700:	2300      	movs	r3, #0
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e0d8      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004708:	2302      	movs	r3, #2
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e0d4      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e0d0      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e0cc      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e0c8      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a5e      	ldr	r2, [pc, #376]	; (80048a8 <UART_SetConfig+0x2d4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d125      	bne.n	800477e <UART_SetConfig+0x1aa>
 8004732:	4b5b      	ldr	r3, [pc, #364]	; (80048a0 <UART_SetConfig+0x2cc>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800473c:	2b30      	cmp	r3, #48	; 0x30
 800473e:	d016      	beq.n	800476e <UART_SetConfig+0x19a>
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d818      	bhi.n	8004776 <UART_SetConfig+0x1a2>
 8004744:	2b20      	cmp	r3, #32
 8004746:	d00a      	beq.n	800475e <UART_SetConfig+0x18a>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d814      	bhi.n	8004776 <UART_SetConfig+0x1a2>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <UART_SetConfig+0x182>
 8004750:	2b10      	cmp	r3, #16
 8004752:	d008      	beq.n	8004766 <UART_SetConfig+0x192>
 8004754:	e00f      	b.n	8004776 <UART_SetConfig+0x1a2>
 8004756:	2300      	movs	r3, #0
 8004758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475c:	e0ad      	b.n	80048ba <UART_SetConfig+0x2e6>
 800475e:	2302      	movs	r3, #2
 8004760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004764:	e0a9      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004766:	2304      	movs	r3, #4
 8004768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476c:	e0a5      	b.n	80048ba <UART_SetConfig+0x2e6>
 800476e:	2308      	movs	r3, #8
 8004770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004774:	e0a1      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004776:	2310      	movs	r3, #16
 8004778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477c:	e09d      	b.n	80048ba <UART_SetConfig+0x2e6>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a4a      	ldr	r2, [pc, #296]	; (80048ac <UART_SetConfig+0x2d8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d125      	bne.n	80047d4 <UART_SetConfig+0x200>
 8004788:	4b45      	ldr	r3, [pc, #276]	; (80048a0 <UART_SetConfig+0x2cc>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004792:	2bc0      	cmp	r3, #192	; 0xc0
 8004794:	d016      	beq.n	80047c4 <UART_SetConfig+0x1f0>
 8004796:	2bc0      	cmp	r3, #192	; 0xc0
 8004798:	d818      	bhi.n	80047cc <UART_SetConfig+0x1f8>
 800479a:	2b80      	cmp	r3, #128	; 0x80
 800479c:	d00a      	beq.n	80047b4 <UART_SetConfig+0x1e0>
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	d814      	bhi.n	80047cc <UART_SetConfig+0x1f8>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <UART_SetConfig+0x1d8>
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d008      	beq.n	80047bc <UART_SetConfig+0x1e8>
 80047aa:	e00f      	b.n	80047cc <UART_SetConfig+0x1f8>
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b2:	e082      	b.n	80048ba <UART_SetConfig+0x2e6>
 80047b4:	2302      	movs	r3, #2
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ba:	e07e      	b.n	80048ba <UART_SetConfig+0x2e6>
 80047bc:	2304      	movs	r3, #4
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c2:	e07a      	b.n	80048ba <UART_SetConfig+0x2e6>
 80047c4:	2308      	movs	r3, #8
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ca:	e076      	b.n	80048ba <UART_SetConfig+0x2e6>
 80047cc:	2310      	movs	r3, #16
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d2:	e072      	b.n	80048ba <UART_SetConfig+0x2e6>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a35      	ldr	r2, [pc, #212]	; (80048b0 <UART_SetConfig+0x2dc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d12a      	bne.n	8004834 <UART_SetConfig+0x260>
 80047de:	4b30      	ldr	r3, [pc, #192]	; (80048a0 <UART_SetConfig+0x2cc>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ec:	d01a      	beq.n	8004824 <UART_SetConfig+0x250>
 80047ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f2:	d81b      	bhi.n	800482c <UART_SetConfig+0x258>
 80047f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f8:	d00c      	beq.n	8004814 <UART_SetConfig+0x240>
 80047fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fe:	d815      	bhi.n	800482c <UART_SetConfig+0x258>
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <UART_SetConfig+0x238>
 8004804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004808:	d008      	beq.n	800481c <UART_SetConfig+0x248>
 800480a:	e00f      	b.n	800482c <UART_SetConfig+0x258>
 800480c:	2300      	movs	r3, #0
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004812:	e052      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004814:	2302      	movs	r3, #2
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481a:	e04e      	b.n	80048ba <UART_SetConfig+0x2e6>
 800481c:	2304      	movs	r3, #4
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004822:	e04a      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004824:	2308      	movs	r3, #8
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482a:	e046      	b.n	80048ba <UART_SetConfig+0x2e6>
 800482c:	2310      	movs	r3, #16
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e042      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a17      	ldr	r2, [pc, #92]	; (8004898 <UART_SetConfig+0x2c4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d13a      	bne.n	80048b4 <UART_SetConfig+0x2e0>
 800483e:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <UART_SetConfig+0x2cc>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004844:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004848:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800484c:	d01a      	beq.n	8004884 <UART_SetConfig+0x2b0>
 800484e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004852:	d81b      	bhi.n	800488c <UART_SetConfig+0x2b8>
 8004854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004858:	d00c      	beq.n	8004874 <UART_SetConfig+0x2a0>
 800485a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485e:	d815      	bhi.n	800488c <UART_SetConfig+0x2b8>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <UART_SetConfig+0x298>
 8004864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004868:	d008      	beq.n	800487c <UART_SetConfig+0x2a8>
 800486a:	e00f      	b.n	800488c <UART_SetConfig+0x2b8>
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e022      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004874:	2302      	movs	r3, #2
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e01e      	b.n	80048ba <UART_SetConfig+0x2e6>
 800487c:	2304      	movs	r3, #4
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e01a      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004884:	2308      	movs	r3, #8
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e016      	b.n	80048ba <UART_SetConfig+0x2e6>
 800488c:	2310      	movs	r3, #16
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e012      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004894:	efff69f3 	.word	0xefff69f3
 8004898:	40008000 	.word	0x40008000
 800489c:	40013800 	.word	0x40013800
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40004400 	.word	0x40004400
 80048a8:	40004800 	.word	0x40004800
 80048ac:	40004c00 	.word	0x40004c00
 80048b0:	40005000 	.word	0x40005000
 80048b4:	2310      	movs	r3, #16
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a9f      	ldr	r2, [pc, #636]	; (8004b3c <UART_SetConfig+0x568>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d17a      	bne.n	80049ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d824      	bhi.n	8004916 <UART_SetConfig+0x342>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x300>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048f9 	.word	0x080048f9
 80048d8:	08004917 	.word	0x08004917
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004917 	.word	0x08004917
 80048e4:	08004907 	.word	0x08004907
 80048e8:	08004917 	.word	0x08004917
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004917 	.word	0x08004917
 80048f4:	0800490f 	.word	0x0800490f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f8:	f7fe f8ea 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 80048fc:	61f8      	str	r0, [r7, #28]
        break;
 80048fe:	e010      	b.n	8004922 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004900:	4b8f      	ldr	r3, [pc, #572]	; (8004b40 <UART_SetConfig+0x56c>)
 8004902:	61fb      	str	r3, [r7, #28]
        break;
 8004904:	e00d      	b.n	8004922 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004906:	f7fe f84b 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800490a:	61f8      	str	r0, [r7, #28]
        break;
 800490c:	e009      	b.n	8004922 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004912:	61fb      	str	r3, [r7, #28]
        break;
 8004914:	e005      	b.n	8004922 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004920:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80fb 	beq.w	8004b20 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	429a      	cmp	r2, r3
 8004938:	d305      	bcc.n	8004946 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	429a      	cmp	r2, r3
 8004944:	d903      	bls.n	800494e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800494c:	e0e8      	b.n	8004b20 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2200      	movs	r2, #0
 8004952:	461c      	mov	r4, r3
 8004954:	4615      	mov	r5, r2
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	022b      	lsls	r3, r5, #8
 8004960:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004964:	0222      	lsls	r2, r4, #8
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	6849      	ldr	r1, [r1, #4]
 800496a:	0849      	lsrs	r1, r1, #1
 800496c:	2000      	movs	r0, #0
 800496e:	4688      	mov	r8, r1
 8004970:	4681      	mov	r9, r0
 8004972:	eb12 0a08 	adds.w	sl, r2, r8
 8004976:	eb43 0b09 	adc.w	fp, r3, r9
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004988:	4650      	mov	r0, sl
 800498a:	4659      	mov	r1, fp
 800498c:	f7fb fc78 	bl	8000280 <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4613      	mov	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800499e:	d308      	bcc.n	80049b2 <UART_SetConfig+0x3de>
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a6:	d204      	bcs.n	80049b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	e0b6      	b.n	8004b20 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049b8:	e0b2      	b.n	8004b20 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c2:	d15e      	bne.n	8004a82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d828      	bhi.n	8004a1e <UART_SetConfig+0x44a>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0x400>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	08004a01 	.word	0x08004a01
 80049dc:	08004a09 	.word	0x08004a09
 80049e0:	08004a1f 	.word	0x08004a1f
 80049e4:	08004a0f 	.word	0x08004a0f
 80049e8:	08004a1f 	.word	0x08004a1f
 80049ec:	08004a1f 	.word	0x08004a1f
 80049f0:	08004a1f 	.word	0x08004a1f
 80049f4:	08004a17 	.word	0x08004a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f8:	f7fe f86a 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 80049fc:	61f8      	str	r0, [r7, #28]
        break;
 80049fe:	e014      	b.n	8004a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a00:	f7fe f87c 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8004a04:	61f8      	str	r0, [r7, #28]
        break;
 8004a06:	e010      	b.n	8004a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a08:	4b4d      	ldr	r3, [pc, #308]	; (8004b40 <UART_SetConfig+0x56c>)
 8004a0a:	61fb      	str	r3, [r7, #28]
        break;
 8004a0c:	e00d      	b.n	8004a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0e:	f7fd ffc7 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8004a12:	61f8      	str	r0, [r7, #28]
        break;
 8004a14:	e009      	b.n	8004a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1a:	61fb      	str	r3, [r7, #28]
        break;
 8004a1c:	e005      	b.n	8004a2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d077      	beq.n	8004b20 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	005a      	lsls	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b0f      	cmp	r3, #15
 8004a4a:	d916      	bls.n	8004a7a <UART_SetConfig+0x4a6>
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a52:	d212      	bcs.n	8004a7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f023 030f 	bic.w	r3, r3, #15
 8004a5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	8afb      	ldrh	r3, [r7, #22]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	8afa      	ldrh	r2, [r7, #22]
 8004a76:	60da      	str	r2, [r3, #12]
 8004a78:	e052      	b.n	8004b20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a80:	e04e      	b.n	8004b20 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d827      	bhi.n	8004ada <UART_SetConfig+0x506>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <UART_SetConfig+0x4bc>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004abd 	.word	0x08004abd
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	08004adb 	.word	0x08004adb
 8004aa0:	08004acb 	.word	0x08004acb
 8004aa4:	08004adb 	.word	0x08004adb
 8004aa8:	08004adb 	.word	0x08004adb
 8004aac:	08004adb 	.word	0x08004adb
 8004ab0:	08004ad3 	.word	0x08004ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7fe f80c 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8004ab8:	61f8      	str	r0, [r7, #28]
        break;
 8004aba:	e014      	b.n	8004ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004abc:	f7fe f81e 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8004ac0:	61f8      	str	r0, [r7, #28]
        break;
 8004ac2:	e010      	b.n	8004ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac4:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <UART_SetConfig+0x56c>)
 8004ac6:	61fb      	str	r3, [r7, #28]
        break;
 8004ac8:	e00d      	b.n	8004ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aca:	f7fd ff69 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8004ace:	61f8      	str	r0, [r7, #28]
        break;
 8004ad0:	e009      	b.n	8004ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e005      	b.n	8004ae6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d019      	beq.n	8004b20 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	085a      	lsrs	r2, r3, #1
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	441a      	add	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b0f      	cmp	r3, #15
 8004b04:	d909      	bls.n	8004b1a <UART_SetConfig+0x546>
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0c:	d205      	bcs.n	8004b1a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60da      	str	r2, [r3, #12]
 8004b18:	e002      	b.n	8004b20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3728      	adds	r7, #40	; 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40008000 	.word	0x40008000
 8004b40:	00f42400 	.word	0x00f42400

08004b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01a      	beq.n	8004c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c42:	d10a      	bne.n	8004c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b098      	sub	sp, #96	; 0x60
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c98:	f7fc fe52 	bl	8001940 <HAL_GetTick>
 8004c9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d12e      	bne.n	8004d0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f88c 	bl	8004dd8 <UART_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d021      	beq.n	8004d0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cda:	653b      	str	r3, [r7, #80]	; 0x50
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e6      	bne.n	8004cc6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e062      	b.n	8004dd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d149      	bne.n	8004dac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d20:	2200      	movs	r2, #0
 8004d22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f856 	bl	8004dd8 <UART_WaitOnFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d03c      	beq.n	8004dac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	623b      	str	r3, [r7, #32]
   return(result);
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d50:	633b      	str	r3, [r7, #48]	; 0x30
 8004d52:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d84:	61fa      	str	r2, [r7, #28]
 8004d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	69b9      	ldr	r1, [r7, #24]
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	617b      	str	r3, [r7, #20]
   return(result);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e011      	b.n	8004dd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3758      	adds	r7, #88	; 0x58
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	4613      	mov	r3, r2
 8004de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de8:	e049      	b.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df0:	d045      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df2:	f7fc fda5 	bl	8001940 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d302      	bcc.n	8004e08 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e048      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d031      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d110      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f838 	bl	8004ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2208      	movs	r2, #8
 8004e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e029      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e58:	d111      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f81e 	bl	8004ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e00f      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4013      	ands	r3, r2
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d0a6      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b095      	sub	sp, #84	; 0x54
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8004ece:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ed2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e6      	bne.n	8004eae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e5      	bne.n	8004ee0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d118      	bne.n	8004f4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f023 0310 	bic.w	r3, r3, #16
 8004f30:	647b      	str	r3, [r7, #68]	; 0x44
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6979      	ldr	r1, [r7, #20]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	613b      	str	r3, [r7, #16]
   return(result);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e6      	bne.n	8004f1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f62:	bf00      	nop
 8004f64:	3754      	adds	r7, #84	; 0x54
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <sniprintf>:
 8004f70:	b40c      	push	{r2, r3}
 8004f72:	b530      	push	{r4, r5, lr}
 8004f74:	4b17      	ldr	r3, [pc, #92]	; (8004fd4 <sniprintf+0x64>)
 8004f76:	1e0c      	subs	r4, r1, #0
 8004f78:	681d      	ldr	r5, [r3, #0]
 8004f7a:	b09d      	sub	sp, #116	; 0x74
 8004f7c:	da08      	bge.n	8004f90 <sniprintf+0x20>
 8004f7e:	238b      	movs	r3, #139	; 0x8b
 8004f80:	602b      	str	r3, [r5, #0]
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	b01d      	add	sp, #116	; 0x74
 8004f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f8c:	b002      	add	sp, #8
 8004f8e:	4770      	bx	lr
 8004f90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004f94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f98:	bf14      	ite	ne
 8004f9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f9e:	4623      	moveq	r3, r4
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	9307      	str	r3, [sp, #28]
 8004fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fa8:	9002      	str	r0, [sp, #8]
 8004faa:	9006      	str	r0, [sp, #24]
 8004fac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004fb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004fb2:	ab21      	add	r3, sp, #132	; 0x84
 8004fb4:	a902      	add	r1, sp, #8
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	f000 f9b3 	bl	8005324 <_svfiprintf_r>
 8004fbe:	1c43      	adds	r3, r0, #1
 8004fc0:	bfbc      	itt	lt
 8004fc2:	238b      	movlt	r3, #139	; 0x8b
 8004fc4:	602b      	strlt	r3, [r5, #0]
 8004fc6:	2c00      	cmp	r4, #0
 8004fc8:	d0dd      	beq.n	8004f86 <sniprintf+0x16>
 8004fca:	9b02      	ldr	r3, [sp, #8]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	e7d9      	b.n	8004f86 <sniprintf+0x16>
 8004fd2:	bf00      	nop
 8004fd4:	20000058 	.word	0x20000058

08004fd8 <siprintf>:
 8004fd8:	b40e      	push	{r1, r2, r3}
 8004fda:	b500      	push	{lr}
 8004fdc:	b09c      	sub	sp, #112	; 0x70
 8004fde:	ab1d      	add	r3, sp, #116	; 0x74
 8004fe0:	9002      	str	r0, [sp, #8]
 8004fe2:	9006      	str	r0, [sp, #24]
 8004fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fe8:	4809      	ldr	r0, [pc, #36]	; (8005010 <siprintf+0x38>)
 8004fea:	9107      	str	r1, [sp, #28]
 8004fec:	9104      	str	r1, [sp, #16]
 8004fee:	4909      	ldr	r1, [pc, #36]	; (8005014 <siprintf+0x3c>)
 8004ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ff4:	9105      	str	r1, [sp, #20]
 8004ff6:	6800      	ldr	r0, [r0, #0]
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	a902      	add	r1, sp, #8
 8004ffc:	f000 f992 	bl	8005324 <_svfiprintf_r>
 8005000:	9b02      	ldr	r3, [sp, #8]
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	b01c      	add	sp, #112	; 0x70
 8005008:	f85d eb04 	ldr.w	lr, [sp], #4
 800500c:	b003      	add	sp, #12
 800500e:	4770      	bx	lr
 8005010:	20000058 	.word	0x20000058
 8005014:	ffff0208 	.word	0xffff0208

08005018 <memset>:
 8005018:	4402      	add	r2, r0
 800501a:	4603      	mov	r3, r0
 800501c:	4293      	cmp	r3, r2
 800501e:	d100      	bne.n	8005022 <memset+0xa>
 8005020:	4770      	bx	lr
 8005022:	f803 1b01 	strb.w	r1, [r3], #1
 8005026:	e7f9      	b.n	800501c <memset+0x4>

08005028 <__errno>:
 8005028:	4b01      	ldr	r3, [pc, #4]	; (8005030 <__errno+0x8>)
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000058 	.word	0x20000058

08005034 <__libc_init_array>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	4d0d      	ldr	r5, [pc, #52]	; (800506c <__libc_init_array+0x38>)
 8005038:	4c0d      	ldr	r4, [pc, #52]	; (8005070 <__libc_init_array+0x3c>)
 800503a:	1b64      	subs	r4, r4, r5
 800503c:	10a4      	asrs	r4, r4, #2
 800503e:	2600      	movs	r6, #0
 8005040:	42a6      	cmp	r6, r4
 8005042:	d109      	bne.n	8005058 <__libc_init_array+0x24>
 8005044:	4d0b      	ldr	r5, [pc, #44]	; (8005074 <__libc_init_array+0x40>)
 8005046:	4c0c      	ldr	r4, [pc, #48]	; (8005078 <__libc_init_array+0x44>)
 8005048:	f000 fc6a 	bl	8005920 <_init>
 800504c:	1b64      	subs	r4, r4, r5
 800504e:	10a4      	asrs	r4, r4, #2
 8005050:	2600      	movs	r6, #0
 8005052:	42a6      	cmp	r6, r4
 8005054:	d105      	bne.n	8005062 <__libc_init_array+0x2e>
 8005056:	bd70      	pop	{r4, r5, r6, pc}
 8005058:	f855 3b04 	ldr.w	r3, [r5], #4
 800505c:	4798      	blx	r3
 800505e:	3601      	adds	r6, #1
 8005060:	e7ee      	b.n	8005040 <__libc_init_array+0xc>
 8005062:	f855 3b04 	ldr.w	r3, [r5], #4
 8005066:	4798      	blx	r3
 8005068:	3601      	adds	r6, #1
 800506a:	e7f2      	b.n	8005052 <__libc_init_array+0x1e>
 800506c:	08005de8 	.word	0x08005de8
 8005070:	08005de8 	.word	0x08005de8
 8005074:	08005de8 	.word	0x08005de8
 8005078:	08005dec 	.word	0x08005dec

0800507c <__retarget_lock_acquire_recursive>:
 800507c:	4770      	bx	lr

0800507e <__retarget_lock_release_recursive>:
 800507e:	4770      	bx	lr

08005080 <_free_r>:
 8005080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005082:	2900      	cmp	r1, #0
 8005084:	d044      	beq.n	8005110 <_free_r+0x90>
 8005086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508a:	9001      	str	r0, [sp, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f1a1 0404 	sub.w	r4, r1, #4
 8005092:	bfb8      	it	lt
 8005094:	18e4      	addlt	r4, r4, r3
 8005096:	f000 f8df 	bl	8005258 <__malloc_lock>
 800509a:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <_free_r+0x94>)
 800509c:	9801      	ldr	r0, [sp, #4]
 800509e:	6813      	ldr	r3, [r2, #0]
 80050a0:	b933      	cbnz	r3, 80050b0 <_free_r+0x30>
 80050a2:	6063      	str	r3, [r4, #4]
 80050a4:	6014      	str	r4, [r2, #0]
 80050a6:	b003      	add	sp, #12
 80050a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050ac:	f000 b8da 	b.w	8005264 <__malloc_unlock>
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d908      	bls.n	80050c6 <_free_r+0x46>
 80050b4:	6825      	ldr	r5, [r4, #0]
 80050b6:	1961      	adds	r1, r4, r5
 80050b8:	428b      	cmp	r3, r1
 80050ba:	bf01      	itttt	eq
 80050bc:	6819      	ldreq	r1, [r3, #0]
 80050be:	685b      	ldreq	r3, [r3, #4]
 80050c0:	1949      	addeq	r1, r1, r5
 80050c2:	6021      	streq	r1, [r4, #0]
 80050c4:	e7ed      	b.n	80050a2 <_free_r+0x22>
 80050c6:	461a      	mov	r2, r3
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	b10b      	cbz	r3, 80050d0 <_free_r+0x50>
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	d9fa      	bls.n	80050c6 <_free_r+0x46>
 80050d0:	6811      	ldr	r1, [r2, #0]
 80050d2:	1855      	adds	r5, r2, r1
 80050d4:	42a5      	cmp	r5, r4
 80050d6:	d10b      	bne.n	80050f0 <_free_r+0x70>
 80050d8:	6824      	ldr	r4, [r4, #0]
 80050da:	4421      	add	r1, r4
 80050dc:	1854      	adds	r4, r2, r1
 80050de:	42a3      	cmp	r3, r4
 80050e0:	6011      	str	r1, [r2, #0]
 80050e2:	d1e0      	bne.n	80050a6 <_free_r+0x26>
 80050e4:	681c      	ldr	r4, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	6053      	str	r3, [r2, #4]
 80050ea:	440c      	add	r4, r1
 80050ec:	6014      	str	r4, [r2, #0]
 80050ee:	e7da      	b.n	80050a6 <_free_r+0x26>
 80050f0:	d902      	bls.n	80050f8 <_free_r+0x78>
 80050f2:	230c      	movs	r3, #12
 80050f4:	6003      	str	r3, [r0, #0]
 80050f6:	e7d6      	b.n	80050a6 <_free_r+0x26>
 80050f8:	6825      	ldr	r5, [r4, #0]
 80050fa:	1961      	adds	r1, r4, r5
 80050fc:	428b      	cmp	r3, r1
 80050fe:	bf04      	itt	eq
 8005100:	6819      	ldreq	r1, [r3, #0]
 8005102:	685b      	ldreq	r3, [r3, #4]
 8005104:	6063      	str	r3, [r4, #4]
 8005106:	bf04      	itt	eq
 8005108:	1949      	addeq	r1, r1, r5
 800510a:	6021      	streq	r1, [r4, #0]
 800510c:	6054      	str	r4, [r2, #4]
 800510e:	e7ca      	b.n	80050a6 <_free_r+0x26>
 8005110:	b003      	add	sp, #12
 8005112:	bd30      	pop	{r4, r5, pc}
 8005114:	200003cc 	.word	0x200003cc

08005118 <sbrk_aligned>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	4e0e      	ldr	r6, [pc, #56]	; (8005154 <sbrk_aligned+0x3c>)
 800511c:	460c      	mov	r4, r1
 800511e:	6831      	ldr	r1, [r6, #0]
 8005120:	4605      	mov	r5, r0
 8005122:	b911      	cbnz	r1, 800512a <sbrk_aligned+0x12>
 8005124:	f000 fba6 	bl	8005874 <_sbrk_r>
 8005128:	6030      	str	r0, [r6, #0]
 800512a:	4621      	mov	r1, r4
 800512c:	4628      	mov	r0, r5
 800512e:	f000 fba1 	bl	8005874 <_sbrk_r>
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	d00a      	beq.n	800514c <sbrk_aligned+0x34>
 8005136:	1cc4      	adds	r4, r0, #3
 8005138:	f024 0403 	bic.w	r4, r4, #3
 800513c:	42a0      	cmp	r0, r4
 800513e:	d007      	beq.n	8005150 <sbrk_aligned+0x38>
 8005140:	1a21      	subs	r1, r4, r0
 8005142:	4628      	mov	r0, r5
 8005144:	f000 fb96 	bl	8005874 <_sbrk_r>
 8005148:	3001      	adds	r0, #1
 800514a:	d101      	bne.n	8005150 <sbrk_aligned+0x38>
 800514c:	f04f 34ff 	mov.w	r4, #4294967295
 8005150:	4620      	mov	r0, r4
 8005152:	bd70      	pop	{r4, r5, r6, pc}
 8005154:	200003d0 	.word	0x200003d0

08005158 <_malloc_r>:
 8005158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800515c:	1ccd      	adds	r5, r1, #3
 800515e:	f025 0503 	bic.w	r5, r5, #3
 8005162:	3508      	adds	r5, #8
 8005164:	2d0c      	cmp	r5, #12
 8005166:	bf38      	it	cc
 8005168:	250c      	movcc	r5, #12
 800516a:	2d00      	cmp	r5, #0
 800516c:	4607      	mov	r7, r0
 800516e:	db01      	blt.n	8005174 <_malloc_r+0x1c>
 8005170:	42a9      	cmp	r1, r5
 8005172:	d905      	bls.n	8005180 <_malloc_r+0x28>
 8005174:	230c      	movs	r3, #12
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	2600      	movs	r6, #0
 800517a:	4630      	mov	r0, r6
 800517c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005180:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005254 <_malloc_r+0xfc>
 8005184:	f000 f868 	bl	8005258 <__malloc_lock>
 8005188:	f8d8 3000 	ldr.w	r3, [r8]
 800518c:	461c      	mov	r4, r3
 800518e:	bb5c      	cbnz	r4, 80051e8 <_malloc_r+0x90>
 8005190:	4629      	mov	r1, r5
 8005192:	4638      	mov	r0, r7
 8005194:	f7ff ffc0 	bl	8005118 <sbrk_aligned>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	4604      	mov	r4, r0
 800519c:	d155      	bne.n	800524a <_malloc_r+0xf2>
 800519e:	f8d8 4000 	ldr.w	r4, [r8]
 80051a2:	4626      	mov	r6, r4
 80051a4:	2e00      	cmp	r6, #0
 80051a6:	d145      	bne.n	8005234 <_malloc_r+0xdc>
 80051a8:	2c00      	cmp	r4, #0
 80051aa:	d048      	beq.n	800523e <_malloc_r+0xe6>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	4631      	mov	r1, r6
 80051b0:	4638      	mov	r0, r7
 80051b2:	eb04 0903 	add.w	r9, r4, r3
 80051b6:	f000 fb5d 	bl	8005874 <_sbrk_r>
 80051ba:	4581      	cmp	r9, r0
 80051bc:	d13f      	bne.n	800523e <_malloc_r+0xe6>
 80051be:	6821      	ldr	r1, [r4, #0]
 80051c0:	1a6d      	subs	r5, r5, r1
 80051c2:	4629      	mov	r1, r5
 80051c4:	4638      	mov	r0, r7
 80051c6:	f7ff ffa7 	bl	8005118 <sbrk_aligned>
 80051ca:	3001      	adds	r0, #1
 80051cc:	d037      	beq.n	800523e <_malloc_r+0xe6>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	442b      	add	r3, r5
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	f8d8 3000 	ldr.w	r3, [r8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d038      	beq.n	800524e <_malloc_r+0xf6>
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	42a2      	cmp	r2, r4
 80051e0:	d12b      	bne.n	800523a <_malloc_r+0xe2>
 80051e2:	2200      	movs	r2, #0
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	e00f      	b.n	8005208 <_malloc_r+0xb0>
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	1b52      	subs	r2, r2, r5
 80051ec:	d41f      	bmi.n	800522e <_malloc_r+0xd6>
 80051ee:	2a0b      	cmp	r2, #11
 80051f0:	d917      	bls.n	8005222 <_malloc_r+0xca>
 80051f2:	1961      	adds	r1, r4, r5
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	6025      	str	r5, [r4, #0]
 80051f8:	bf18      	it	ne
 80051fa:	6059      	strne	r1, [r3, #4]
 80051fc:	6863      	ldr	r3, [r4, #4]
 80051fe:	bf08      	it	eq
 8005200:	f8c8 1000 	streq.w	r1, [r8]
 8005204:	5162      	str	r2, [r4, r5]
 8005206:	604b      	str	r3, [r1, #4]
 8005208:	4638      	mov	r0, r7
 800520a:	f104 060b 	add.w	r6, r4, #11
 800520e:	f000 f829 	bl	8005264 <__malloc_unlock>
 8005212:	f026 0607 	bic.w	r6, r6, #7
 8005216:	1d23      	adds	r3, r4, #4
 8005218:	1af2      	subs	r2, r6, r3
 800521a:	d0ae      	beq.n	800517a <_malloc_r+0x22>
 800521c:	1b9b      	subs	r3, r3, r6
 800521e:	50a3      	str	r3, [r4, r2]
 8005220:	e7ab      	b.n	800517a <_malloc_r+0x22>
 8005222:	42a3      	cmp	r3, r4
 8005224:	6862      	ldr	r2, [r4, #4]
 8005226:	d1dd      	bne.n	80051e4 <_malloc_r+0x8c>
 8005228:	f8c8 2000 	str.w	r2, [r8]
 800522c:	e7ec      	b.n	8005208 <_malloc_r+0xb0>
 800522e:	4623      	mov	r3, r4
 8005230:	6864      	ldr	r4, [r4, #4]
 8005232:	e7ac      	b.n	800518e <_malloc_r+0x36>
 8005234:	4634      	mov	r4, r6
 8005236:	6876      	ldr	r6, [r6, #4]
 8005238:	e7b4      	b.n	80051a4 <_malloc_r+0x4c>
 800523a:	4613      	mov	r3, r2
 800523c:	e7cc      	b.n	80051d8 <_malloc_r+0x80>
 800523e:	230c      	movs	r3, #12
 8005240:	603b      	str	r3, [r7, #0]
 8005242:	4638      	mov	r0, r7
 8005244:	f000 f80e 	bl	8005264 <__malloc_unlock>
 8005248:	e797      	b.n	800517a <_malloc_r+0x22>
 800524a:	6025      	str	r5, [r4, #0]
 800524c:	e7dc      	b.n	8005208 <_malloc_r+0xb0>
 800524e:	605b      	str	r3, [r3, #4]
 8005250:	deff      	udf	#255	; 0xff
 8005252:	bf00      	nop
 8005254:	200003cc 	.word	0x200003cc

08005258 <__malloc_lock>:
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <__malloc_lock+0x8>)
 800525a:	f7ff bf0f 	b.w	800507c <__retarget_lock_acquire_recursive>
 800525e:	bf00      	nop
 8005260:	200003c8 	.word	0x200003c8

08005264 <__malloc_unlock>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__malloc_unlock+0x8>)
 8005266:	f7ff bf0a 	b.w	800507e <__retarget_lock_release_recursive>
 800526a:	bf00      	nop
 800526c:	200003c8 	.word	0x200003c8

08005270 <__ssputs_r>:
 8005270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005274:	688e      	ldr	r6, [r1, #8]
 8005276:	461f      	mov	r7, r3
 8005278:	42be      	cmp	r6, r7
 800527a:	680b      	ldr	r3, [r1, #0]
 800527c:	4682      	mov	sl, r0
 800527e:	460c      	mov	r4, r1
 8005280:	4690      	mov	r8, r2
 8005282:	d82c      	bhi.n	80052de <__ssputs_r+0x6e>
 8005284:	898a      	ldrh	r2, [r1, #12]
 8005286:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800528a:	d026      	beq.n	80052da <__ssputs_r+0x6a>
 800528c:	6965      	ldr	r5, [r4, #20]
 800528e:	6909      	ldr	r1, [r1, #16]
 8005290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005294:	eba3 0901 	sub.w	r9, r3, r1
 8005298:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800529c:	1c7b      	adds	r3, r7, #1
 800529e:	444b      	add	r3, r9
 80052a0:	106d      	asrs	r5, r5, #1
 80052a2:	429d      	cmp	r5, r3
 80052a4:	bf38      	it	cc
 80052a6:	461d      	movcc	r5, r3
 80052a8:	0553      	lsls	r3, r2, #21
 80052aa:	d527      	bpl.n	80052fc <__ssputs_r+0x8c>
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7ff ff53 	bl	8005158 <_malloc_r>
 80052b2:	4606      	mov	r6, r0
 80052b4:	b360      	cbz	r0, 8005310 <__ssputs_r+0xa0>
 80052b6:	6921      	ldr	r1, [r4, #16]
 80052b8:	464a      	mov	r2, r9
 80052ba:	f000 faeb 	bl	8005894 <memcpy>
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c8:	81a3      	strh	r3, [r4, #12]
 80052ca:	6126      	str	r6, [r4, #16]
 80052cc:	6165      	str	r5, [r4, #20]
 80052ce:	444e      	add	r6, r9
 80052d0:	eba5 0509 	sub.w	r5, r5, r9
 80052d4:	6026      	str	r6, [r4, #0]
 80052d6:	60a5      	str	r5, [r4, #8]
 80052d8:	463e      	mov	r6, r7
 80052da:	42be      	cmp	r6, r7
 80052dc:	d900      	bls.n	80052e0 <__ssputs_r+0x70>
 80052de:	463e      	mov	r6, r7
 80052e0:	6820      	ldr	r0, [r4, #0]
 80052e2:	4632      	mov	r2, r6
 80052e4:	4641      	mov	r1, r8
 80052e6:	f000 faab 	bl	8005840 <memmove>
 80052ea:	68a3      	ldr	r3, [r4, #8]
 80052ec:	1b9b      	subs	r3, r3, r6
 80052ee:	60a3      	str	r3, [r4, #8]
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	4433      	add	r3, r6
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	2000      	movs	r0, #0
 80052f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fc:	462a      	mov	r2, r5
 80052fe:	f000 fad7 	bl	80058b0 <_realloc_r>
 8005302:	4606      	mov	r6, r0
 8005304:	2800      	cmp	r0, #0
 8005306:	d1e0      	bne.n	80052ca <__ssputs_r+0x5a>
 8005308:	6921      	ldr	r1, [r4, #16]
 800530a:	4650      	mov	r0, sl
 800530c:	f7ff feb8 	bl	8005080 <_free_r>
 8005310:	230c      	movs	r3, #12
 8005312:	f8ca 3000 	str.w	r3, [sl]
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800531c:	81a3      	strh	r3, [r4, #12]
 800531e:	f04f 30ff 	mov.w	r0, #4294967295
 8005322:	e7e9      	b.n	80052f8 <__ssputs_r+0x88>

08005324 <_svfiprintf_r>:
 8005324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005328:	4698      	mov	r8, r3
 800532a:	898b      	ldrh	r3, [r1, #12]
 800532c:	061b      	lsls	r3, r3, #24
 800532e:	b09d      	sub	sp, #116	; 0x74
 8005330:	4607      	mov	r7, r0
 8005332:	460d      	mov	r5, r1
 8005334:	4614      	mov	r4, r2
 8005336:	d50e      	bpl.n	8005356 <_svfiprintf_r+0x32>
 8005338:	690b      	ldr	r3, [r1, #16]
 800533a:	b963      	cbnz	r3, 8005356 <_svfiprintf_r+0x32>
 800533c:	2140      	movs	r1, #64	; 0x40
 800533e:	f7ff ff0b 	bl	8005158 <_malloc_r>
 8005342:	6028      	str	r0, [r5, #0]
 8005344:	6128      	str	r0, [r5, #16]
 8005346:	b920      	cbnz	r0, 8005352 <_svfiprintf_r+0x2e>
 8005348:	230c      	movs	r3, #12
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	e0d0      	b.n	80054f4 <_svfiprintf_r+0x1d0>
 8005352:	2340      	movs	r3, #64	; 0x40
 8005354:	616b      	str	r3, [r5, #20]
 8005356:	2300      	movs	r3, #0
 8005358:	9309      	str	r3, [sp, #36]	; 0x24
 800535a:	2320      	movs	r3, #32
 800535c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005360:	f8cd 800c 	str.w	r8, [sp, #12]
 8005364:	2330      	movs	r3, #48	; 0x30
 8005366:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800550c <_svfiprintf_r+0x1e8>
 800536a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800536e:	f04f 0901 	mov.w	r9, #1
 8005372:	4623      	mov	r3, r4
 8005374:	469a      	mov	sl, r3
 8005376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800537a:	b10a      	cbz	r2, 8005380 <_svfiprintf_r+0x5c>
 800537c:	2a25      	cmp	r2, #37	; 0x25
 800537e:	d1f9      	bne.n	8005374 <_svfiprintf_r+0x50>
 8005380:	ebba 0b04 	subs.w	fp, sl, r4
 8005384:	d00b      	beq.n	800539e <_svfiprintf_r+0x7a>
 8005386:	465b      	mov	r3, fp
 8005388:	4622      	mov	r2, r4
 800538a:	4629      	mov	r1, r5
 800538c:	4638      	mov	r0, r7
 800538e:	f7ff ff6f 	bl	8005270 <__ssputs_r>
 8005392:	3001      	adds	r0, #1
 8005394:	f000 80a9 	beq.w	80054ea <_svfiprintf_r+0x1c6>
 8005398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800539a:	445a      	add	r2, fp
 800539c:	9209      	str	r2, [sp, #36]	; 0x24
 800539e:	f89a 3000 	ldrb.w	r3, [sl]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 80a1 	beq.w	80054ea <_svfiprintf_r+0x1c6>
 80053a8:	2300      	movs	r3, #0
 80053aa:	f04f 32ff 	mov.w	r2, #4294967295
 80053ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053b2:	f10a 0a01 	add.w	sl, sl, #1
 80053b6:	9304      	str	r3, [sp, #16]
 80053b8:	9307      	str	r3, [sp, #28]
 80053ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053be:	931a      	str	r3, [sp, #104]	; 0x68
 80053c0:	4654      	mov	r4, sl
 80053c2:	2205      	movs	r2, #5
 80053c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053c8:	4850      	ldr	r0, [pc, #320]	; (800550c <_svfiprintf_r+0x1e8>)
 80053ca:	f7fa ff09 	bl	80001e0 <memchr>
 80053ce:	9a04      	ldr	r2, [sp, #16]
 80053d0:	b9d8      	cbnz	r0, 800540a <_svfiprintf_r+0xe6>
 80053d2:	06d0      	lsls	r0, r2, #27
 80053d4:	bf44      	itt	mi
 80053d6:	2320      	movmi	r3, #32
 80053d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053dc:	0711      	lsls	r1, r2, #28
 80053de:	bf44      	itt	mi
 80053e0:	232b      	movmi	r3, #43	; 0x2b
 80053e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053e6:	f89a 3000 	ldrb.w	r3, [sl]
 80053ea:	2b2a      	cmp	r3, #42	; 0x2a
 80053ec:	d015      	beq.n	800541a <_svfiprintf_r+0xf6>
 80053ee:	9a07      	ldr	r2, [sp, #28]
 80053f0:	4654      	mov	r4, sl
 80053f2:	2000      	movs	r0, #0
 80053f4:	f04f 0c0a 	mov.w	ip, #10
 80053f8:	4621      	mov	r1, r4
 80053fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053fe:	3b30      	subs	r3, #48	; 0x30
 8005400:	2b09      	cmp	r3, #9
 8005402:	d94d      	bls.n	80054a0 <_svfiprintf_r+0x17c>
 8005404:	b1b0      	cbz	r0, 8005434 <_svfiprintf_r+0x110>
 8005406:	9207      	str	r2, [sp, #28]
 8005408:	e014      	b.n	8005434 <_svfiprintf_r+0x110>
 800540a:	eba0 0308 	sub.w	r3, r0, r8
 800540e:	fa09 f303 	lsl.w	r3, r9, r3
 8005412:	4313      	orrs	r3, r2
 8005414:	9304      	str	r3, [sp, #16]
 8005416:	46a2      	mov	sl, r4
 8005418:	e7d2      	b.n	80053c0 <_svfiprintf_r+0x9c>
 800541a:	9b03      	ldr	r3, [sp, #12]
 800541c:	1d19      	adds	r1, r3, #4
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	9103      	str	r1, [sp, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	bfbb      	ittet	lt
 8005426:	425b      	neglt	r3, r3
 8005428:	f042 0202 	orrlt.w	r2, r2, #2
 800542c:	9307      	strge	r3, [sp, #28]
 800542e:	9307      	strlt	r3, [sp, #28]
 8005430:	bfb8      	it	lt
 8005432:	9204      	strlt	r2, [sp, #16]
 8005434:	7823      	ldrb	r3, [r4, #0]
 8005436:	2b2e      	cmp	r3, #46	; 0x2e
 8005438:	d10c      	bne.n	8005454 <_svfiprintf_r+0x130>
 800543a:	7863      	ldrb	r3, [r4, #1]
 800543c:	2b2a      	cmp	r3, #42	; 0x2a
 800543e:	d134      	bne.n	80054aa <_svfiprintf_r+0x186>
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	1d1a      	adds	r2, r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	9203      	str	r2, [sp, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	bfb8      	it	lt
 800544c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005450:	3402      	adds	r4, #2
 8005452:	9305      	str	r3, [sp, #20]
 8005454:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800551c <_svfiprintf_r+0x1f8>
 8005458:	7821      	ldrb	r1, [r4, #0]
 800545a:	2203      	movs	r2, #3
 800545c:	4650      	mov	r0, sl
 800545e:	f7fa febf 	bl	80001e0 <memchr>
 8005462:	b138      	cbz	r0, 8005474 <_svfiprintf_r+0x150>
 8005464:	9b04      	ldr	r3, [sp, #16]
 8005466:	eba0 000a 	sub.w	r0, r0, sl
 800546a:	2240      	movs	r2, #64	; 0x40
 800546c:	4082      	lsls	r2, r0
 800546e:	4313      	orrs	r3, r2
 8005470:	3401      	adds	r4, #1
 8005472:	9304      	str	r3, [sp, #16]
 8005474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005478:	4825      	ldr	r0, [pc, #148]	; (8005510 <_svfiprintf_r+0x1ec>)
 800547a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800547e:	2206      	movs	r2, #6
 8005480:	f7fa feae 	bl	80001e0 <memchr>
 8005484:	2800      	cmp	r0, #0
 8005486:	d038      	beq.n	80054fa <_svfiprintf_r+0x1d6>
 8005488:	4b22      	ldr	r3, [pc, #136]	; (8005514 <_svfiprintf_r+0x1f0>)
 800548a:	bb1b      	cbnz	r3, 80054d4 <_svfiprintf_r+0x1b0>
 800548c:	9b03      	ldr	r3, [sp, #12]
 800548e:	3307      	adds	r3, #7
 8005490:	f023 0307 	bic.w	r3, r3, #7
 8005494:	3308      	adds	r3, #8
 8005496:	9303      	str	r3, [sp, #12]
 8005498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549a:	4433      	add	r3, r6
 800549c:	9309      	str	r3, [sp, #36]	; 0x24
 800549e:	e768      	b.n	8005372 <_svfiprintf_r+0x4e>
 80054a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054a4:	460c      	mov	r4, r1
 80054a6:	2001      	movs	r0, #1
 80054a8:	e7a6      	b.n	80053f8 <_svfiprintf_r+0xd4>
 80054aa:	2300      	movs	r3, #0
 80054ac:	3401      	adds	r4, #1
 80054ae:	9305      	str	r3, [sp, #20]
 80054b0:	4619      	mov	r1, r3
 80054b2:	f04f 0c0a 	mov.w	ip, #10
 80054b6:	4620      	mov	r0, r4
 80054b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054bc:	3a30      	subs	r2, #48	; 0x30
 80054be:	2a09      	cmp	r2, #9
 80054c0:	d903      	bls.n	80054ca <_svfiprintf_r+0x1a6>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0c6      	beq.n	8005454 <_svfiprintf_r+0x130>
 80054c6:	9105      	str	r1, [sp, #20]
 80054c8:	e7c4      	b.n	8005454 <_svfiprintf_r+0x130>
 80054ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80054ce:	4604      	mov	r4, r0
 80054d0:	2301      	movs	r3, #1
 80054d2:	e7f0      	b.n	80054b6 <_svfiprintf_r+0x192>
 80054d4:	ab03      	add	r3, sp, #12
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	462a      	mov	r2, r5
 80054da:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <_svfiprintf_r+0x1f4>)
 80054dc:	a904      	add	r1, sp, #16
 80054de:	4638      	mov	r0, r7
 80054e0:	f3af 8000 	nop.w
 80054e4:	1c42      	adds	r2, r0, #1
 80054e6:	4606      	mov	r6, r0
 80054e8:	d1d6      	bne.n	8005498 <_svfiprintf_r+0x174>
 80054ea:	89ab      	ldrh	r3, [r5, #12]
 80054ec:	065b      	lsls	r3, r3, #25
 80054ee:	f53f af2d 	bmi.w	800534c <_svfiprintf_r+0x28>
 80054f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054f4:	b01d      	add	sp, #116	; 0x74
 80054f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fa:	ab03      	add	r3, sp, #12
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	462a      	mov	r2, r5
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <_svfiprintf_r+0x1f4>)
 8005502:	a904      	add	r1, sp, #16
 8005504:	4638      	mov	r0, r7
 8005506:	f000 f879 	bl	80055fc <_printf_i>
 800550a:	e7eb      	b.n	80054e4 <_svfiprintf_r+0x1c0>
 800550c:	08005dac 	.word	0x08005dac
 8005510:	08005db6 	.word	0x08005db6
 8005514:	00000000 	.word	0x00000000
 8005518:	08005271 	.word	0x08005271
 800551c:	08005db2 	.word	0x08005db2

08005520 <_printf_common>:
 8005520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	4616      	mov	r6, r2
 8005526:	4699      	mov	r9, r3
 8005528:	688a      	ldr	r2, [r1, #8]
 800552a:	690b      	ldr	r3, [r1, #16]
 800552c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005530:	4293      	cmp	r3, r2
 8005532:	bfb8      	it	lt
 8005534:	4613      	movlt	r3, r2
 8005536:	6033      	str	r3, [r6, #0]
 8005538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800553c:	4607      	mov	r7, r0
 800553e:	460c      	mov	r4, r1
 8005540:	b10a      	cbz	r2, 8005546 <_printf_common+0x26>
 8005542:	3301      	adds	r3, #1
 8005544:	6033      	str	r3, [r6, #0]
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	0699      	lsls	r1, r3, #26
 800554a:	bf42      	ittt	mi
 800554c:	6833      	ldrmi	r3, [r6, #0]
 800554e:	3302      	addmi	r3, #2
 8005550:	6033      	strmi	r3, [r6, #0]
 8005552:	6825      	ldr	r5, [r4, #0]
 8005554:	f015 0506 	ands.w	r5, r5, #6
 8005558:	d106      	bne.n	8005568 <_printf_common+0x48>
 800555a:	f104 0a19 	add.w	sl, r4, #25
 800555e:	68e3      	ldr	r3, [r4, #12]
 8005560:	6832      	ldr	r2, [r6, #0]
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	42ab      	cmp	r3, r5
 8005566:	dc26      	bgt.n	80055b6 <_printf_common+0x96>
 8005568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800556c:	1e13      	subs	r3, r2, #0
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	bf18      	it	ne
 8005572:	2301      	movne	r3, #1
 8005574:	0692      	lsls	r2, r2, #26
 8005576:	d42b      	bmi.n	80055d0 <_printf_common+0xb0>
 8005578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800557c:	4649      	mov	r1, r9
 800557e:	4638      	mov	r0, r7
 8005580:	47c0      	blx	r8
 8005582:	3001      	adds	r0, #1
 8005584:	d01e      	beq.n	80055c4 <_printf_common+0xa4>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	6922      	ldr	r2, [r4, #16]
 800558a:	f003 0306 	and.w	r3, r3, #6
 800558e:	2b04      	cmp	r3, #4
 8005590:	bf02      	ittt	eq
 8005592:	68e5      	ldreq	r5, [r4, #12]
 8005594:	6833      	ldreq	r3, [r6, #0]
 8005596:	1aed      	subeq	r5, r5, r3
 8005598:	68a3      	ldr	r3, [r4, #8]
 800559a:	bf0c      	ite	eq
 800559c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055a0:	2500      	movne	r5, #0
 80055a2:	4293      	cmp	r3, r2
 80055a4:	bfc4      	itt	gt
 80055a6:	1a9b      	subgt	r3, r3, r2
 80055a8:	18ed      	addgt	r5, r5, r3
 80055aa:	2600      	movs	r6, #0
 80055ac:	341a      	adds	r4, #26
 80055ae:	42b5      	cmp	r5, r6
 80055b0:	d11a      	bne.n	80055e8 <_printf_common+0xc8>
 80055b2:	2000      	movs	r0, #0
 80055b4:	e008      	b.n	80055c8 <_printf_common+0xa8>
 80055b6:	2301      	movs	r3, #1
 80055b8:	4652      	mov	r2, sl
 80055ba:	4649      	mov	r1, r9
 80055bc:	4638      	mov	r0, r7
 80055be:	47c0      	blx	r8
 80055c0:	3001      	adds	r0, #1
 80055c2:	d103      	bne.n	80055cc <_printf_common+0xac>
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055cc:	3501      	adds	r5, #1
 80055ce:	e7c6      	b.n	800555e <_printf_common+0x3e>
 80055d0:	18e1      	adds	r1, r4, r3
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	2030      	movs	r0, #48	; 0x30
 80055d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055da:	4422      	add	r2, r4
 80055dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055e4:	3302      	adds	r3, #2
 80055e6:	e7c7      	b.n	8005578 <_printf_common+0x58>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4622      	mov	r2, r4
 80055ec:	4649      	mov	r1, r9
 80055ee:	4638      	mov	r0, r7
 80055f0:	47c0      	blx	r8
 80055f2:	3001      	adds	r0, #1
 80055f4:	d0e6      	beq.n	80055c4 <_printf_common+0xa4>
 80055f6:	3601      	adds	r6, #1
 80055f8:	e7d9      	b.n	80055ae <_printf_common+0x8e>
	...

080055fc <_printf_i>:
 80055fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005600:	7e0f      	ldrb	r7, [r1, #24]
 8005602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005604:	2f78      	cmp	r7, #120	; 0x78
 8005606:	4691      	mov	r9, r2
 8005608:	4680      	mov	r8, r0
 800560a:	460c      	mov	r4, r1
 800560c:	469a      	mov	sl, r3
 800560e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005612:	d807      	bhi.n	8005624 <_printf_i+0x28>
 8005614:	2f62      	cmp	r7, #98	; 0x62
 8005616:	d80a      	bhi.n	800562e <_printf_i+0x32>
 8005618:	2f00      	cmp	r7, #0
 800561a:	f000 80d4 	beq.w	80057c6 <_printf_i+0x1ca>
 800561e:	2f58      	cmp	r7, #88	; 0x58
 8005620:	f000 80c0 	beq.w	80057a4 <_printf_i+0x1a8>
 8005624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800562c:	e03a      	b.n	80056a4 <_printf_i+0xa8>
 800562e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005632:	2b15      	cmp	r3, #21
 8005634:	d8f6      	bhi.n	8005624 <_printf_i+0x28>
 8005636:	a101      	add	r1, pc, #4	; (adr r1, 800563c <_printf_i+0x40>)
 8005638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800563c:	08005695 	.word	0x08005695
 8005640:	080056a9 	.word	0x080056a9
 8005644:	08005625 	.word	0x08005625
 8005648:	08005625 	.word	0x08005625
 800564c:	08005625 	.word	0x08005625
 8005650:	08005625 	.word	0x08005625
 8005654:	080056a9 	.word	0x080056a9
 8005658:	08005625 	.word	0x08005625
 800565c:	08005625 	.word	0x08005625
 8005660:	08005625 	.word	0x08005625
 8005664:	08005625 	.word	0x08005625
 8005668:	080057ad 	.word	0x080057ad
 800566c:	080056d5 	.word	0x080056d5
 8005670:	08005767 	.word	0x08005767
 8005674:	08005625 	.word	0x08005625
 8005678:	08005625 	.word	0x08005625
 800567c:	080057cf 	.word	0x080057cf
 8005680:	08005625 	.word	0x08005625
 8005684:	080056d5 	.word	0x080056d5
 8005688:	08005625 	.word	0x08005625
 800568c:	08005625 	.word	0x08005625
 8005690:	0800576f 	.word	0x0800576f
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	1d1a      	adds	r2, r3, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	602a      	str	r2, [r5, #0]
 800569c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056a4:	2301      	movs	r3, #1
 80056a6:	e09f      	b.n	80057e8 <_printf_i+0x1ec>
 80056a8:	6820      	ldr	r0, [r4, #0]
 80056aa:	682b      	ldr	r3, [r5, #0]
 80056ac:	0607      	lsls	r7, r0, #24
 80056ae:	f103 0104 	add.w	r1, r3, #4
 80056b2:	6029      	str	r1, [r5, #0]
 80056b4:	d501      	bpl.n	80056ba <_printf_i+0xbe>
 80056b6:	681e      	ldr	r6, [r3, #0]
 80056b8:	e003      	b.n	80056c2 <_printf_i+0xc6>
 80056ba:	0646      	lsls	r6, r0, #25
 80056bc:	d5fb      	bpl.n	80056b6 <_printf_i+0xba>
 80056be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056c2:	2e00      	cmp	r6, #0
 80056c4:	da03      	bge.n	80056ce <_printf_i+0xd2>
 80056c6:	232d      	movs	r3, #45	; 0x2d
 80056c8:	4276      	negs	r6, r6
 80056ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ce:	485a      	ldr	r0, [pc, #360]	; (8005838 <_printf_i+0x23c>)
 80056d0:	230a      	movs	r3, #10
 80056d2:	e012      	b.n	80056fa <_printf_i+0xfe>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	6820      	ldr	r0, [r4, #0]
 80056d8:	1d19      	adds	r1, r3, #4
 80056da:	6029      	str	r1, [r5, #0]
 80056dc:	0605      	lsls	r5, r0, #24
 80056de:	d501      	bpl.n	80056e4 <_printf_i+0xe8>
 80056e0:	681e      	ldr	r6, [r3, #0]
 80056e2:	e002      	b.n	80056ea <_printf_i+0xee>
 80056e4:	0641      	lsls	r1, r0, #25
 80056e6:	d5fb      	bpl.n	80056e0 <_printf_i+0xe4>
 80056e8:	881e      	ldrh	r6, [r3, #0]
 80056ea:	4853      	ldr	r0, [pc, #332]	; (8005838 <_printf_i+0x23c>)
 80056ec:	2f6f      	cmp	r7, #111	; 0x6f
 80056ee:	bf0c      	ite	eq
 80056f0:	2308      	moveq	r3, #8
 80056f2:	230a      	movne	r3, #10
 80056f4:	2100      	movs	r1, #0
 80056f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056fa:	6865      	ldr	r5, [r4, #4]
 80056fc:	60a5      	str	r5, [r4, #8]
 80056fe:	2d00      	cmp	r5, #0
 8005700:	bfa2      	ittt	ge
 8005702:	6821      	ldrge	r1, [r4, #0]
 8005704:	f021 0104 	bicge.w	r1, r1, #4
 8005708:	6021      	strge	r1, [r4, #0]
 800570a:	b90e      	cbnz	r6, 8005710 <_printf_i+0x114>
 800570c:	2d00      	cmp	r5, #0
 800570e:	d04b      	beq.n	80057a8 <_printf_i+0x1ac>
 8005710:	4615      	mov	r5, r2
 8005712:	fbb6 f1f3 	udiv	r1, r6, r3
 8005716:	fb03 6711 	mls	r7, r3, r1, r6
 800571a:	5dc7      	ldrb	r7, [r0, r7]
 800571c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005720:	4637      	mov	r7, r6
 8005722:	42bb      	cmp	r3, r7
 8005724:	460e      	mov	r6, r1
 8005726:	d9f4      	bls.n	8005712 <_printf_i+0x116>
 8005728:	2b08      	cmp	r3, #8
 800572a:	d10b      	bne.n	8005744 <_printf_i+0x148>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	07de      	lsls	r6, r3, #31
 8005730:	d508      	bpl.n	8005744 <_printf_i+0x148>
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	6861      	ldr	r1, [r4, #4]
 8005736:	4299      	cmp	r1, r3
 8005738:	bfde      	ittt	le
 800573a:	2330      	movle	r3, #48	; 0x30
 800573c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005740:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005744:	1b52      	subs	r2, r2, r5
 8005746:	6122      	str	r2, [r4, #16]
 8005748:	f8cd a000 	str.w	sl, [sp]
 800574c:	464b      	mov	r3, r9
 800574e:	aa03      	add	r2, sp, #12
 8005750:	4621      	mov	r1, r4
 8005752:	4640      	mov	r0, r8
 8005754:	f7ff fee4 	bl	8005520 <_printf_common>
 8005758:	3001      	adds	r0, #1
 800575a:	d14a      	bne.n	80057f2 <_printf_i+0x1f6>
 800575c:	f04f 30ff 	mov.w	r0, #4294967295
 8005760:	b004      	add	sp, #16
 8005762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	f043 0320 	orr.w	r3, r3, #32
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	4833      	ldr	r0, [pc, #204]	; (800583c <_printf_i+0x240>)
 8005770:	2778      	movs	r7, #120	; 0x78
 8005772:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	6829      	ldr	r1, [r5, #0]
 800577a:	061f      	lsls	r7, r3, #24
 800577c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005780:	d402      	bmi.n	8005788 <_printf_i+0x18c>
 8005782:	065f      	lsls	r7, r3, #25
 8005784:	bf48      	it	mi
 8005786:	b2b6      	uxthmi	r6, r6
 8005788:	07df      	lsls	r7, r3, #31
 800578a:	bf48      	it	mi
 800578c:	f043 0320 	orrmi.w	r3, r3, #32
 8005790:	6029      	str	r1, [r5, #0]
 8005792:	bf48      	it	mi
 8005794:	6023      	strmi	r3, [r4, #0]
 8005796:	b91e      	cbnz	r6, 80057a0 <_printf_i+0x1a4>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	f023 0320 	bic.w	r3, r3, #32
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	2310      	movs	r3, #16
 80057a2:	e7a7      	b.n	80056f4 <_printf_i+0xf8>
 80057a4:	4824      	ldr	r0, [pc, #144]	; (8005838 <_printf_i+0x23c>)
 80057a6:	e7e4      	b.n	8005772 <_printf_i+0x176>
 80057a8:	4615      	mov	r5, r2
 80057aa:	e7bd      	b.n	8005728 <_printf_i+0x12c>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	6826      	ldr	r6, [r4, #0]
 80057b0:	6961      	ldr	r1, [r4, #20]
 80057b2:	1d18      	adds	r0, r3, #4
 80057b4:	6028      	str	r0, [r5, #0]
 80057b6:	0635      	lsls	r5, r6, #24
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	d501      	bpl.n	80057c0 <_printf_i+0x1c4>
 80057bc:	6019      	str	r1, [r3, #0]
 80057be:	e002      	b.n	80057c6 <_printf_i+0x1ca>
 80057c0:	0670      	lsls	r0, r6, #25
 80057c2:	d5fb      	bpl.n	80057bc <_printf_i+0x1c0>
 80057c4:	8019      	strh	r1, [r3, #0]
 80057c6:	2300      	movs	r3, #0
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	4615      	mov	r5, r2
 80057cc:	e7bc      	b.n	8005748 <_printf_i+0x14c>
 80057ce:	682b      	ldr	r3, [r5, #0]
 80057d0:	1d1a      	adds	r2, r3, #4
 80057d2:	602a      	str	r2, [r5, #0]
 80057d4:	681d      	ldr	r5, [r3, #0]
 80057d6:	6862      	ldr	r2, [r4, #4]
 80057d8:	2100      	movs	r1, #0
 80057da:	4628      	mov	r0, r5
 80057dc:	f7fa fd00 	bl	80001e0 <memchr>
 80057e0:	b108      	cbz	r0, 80057e6 <_printf_i+0x1ea>
 80057e2:	1b40      	subs	r0, r0, r5
 80057e4:	6060      	str	r0, [r4, #4]
 80057e6:	6863      	ldr	r3, [r4, #4]
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	2300      	movs	r3, #0
 80057ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f0:	e7aa      	b.n	8005748 <_printf_i+0x14c>
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	462a      	mov	r2, r5
 80057f6:	4649      	mov	r1, r9
 80057f8:	4640      	mov	r0, r8
 80057fa:	47d0      	blx	sl
 80057fc:	3001      	adds	r0, #1
 80057fe:	d0ad      	beq.n	800575c <_printf_i+0x160>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	079b      	lsls	r3, r3, #30
 8005804:	d413      	bmi.n	800582e <_printf_i+0x232>
 8005806:	68e0      	ldr	r0, [r4, #12]
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	4298      	cmp	r0, r3
 800580c:	bfb8      	it	lt
 800580e:	4618      	movlt	r0, r3
 8005810:	e7a6      	b.n	8005760 <_printf_i+0x164>
 8005812:	2301      	movs	r3, #1
 8005814:	4632      	mov	r2, r6
 8005816:	4649      	mov	r1, r9
 8005818:	4640      	mov	r0, r8
 800581a:	47d0      	blx	sl
 800581c:	3001      	adds	r0, #1
 800581e:	d09d      	beq.n	800575c <_printf_i+0x160>
 8005820:	3501      	adds	r5, #1
 8005822:	68e3      	ldr	r3, [r4, #12]
 8005824:	9903      	ldr	r1, [sp, #12]
 8005826:	1a5b      	subs	r3, r3, r1
 8005828:	42ab      	cmp	r3, r5
 800582a:	dcf2      	bgt.n	8005812 <_printf_i+0x216>
 800582c:	e7eb      	b.n	8005806 <_printf_i+0x20a>
 800582e:	2500      	movs	r5, #0
 8005830:	f104 0619 	add.w	r6, r4, #25
 8005834:	e7f5      	b.n	8005822 <_printf_i+0x226>
 8005836:	bf00      	nop
 8005838:	08005dbd 	.word	0x08005dbd
 800583c:	08005dce 	.word	0x08005dce

08005840 <memmove>:
 8005840:	4288      	cmp	r0, r1
 8005842:	b510      	push	{r4, lr}
 8005844:	eb01 0402 	add.w	r4, r1, r2
 8005848:	d902      	bls.n	8005850 <memmove+0x10>
 800584a:	4284      	cmp	r4, r0
 800584c:	4623      	mov	r3, r4
 800584e:	d807      	bhi.n	8005860 <memmove+0x20>
 8005850:	1e43      	subs	r3, r0, #1
 8005852:	42a1      	cmp	r1, r4
 8005854:	d008      	beq.n	8005868 <memmove+0x28>
 8005856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800585a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800585e:	e7f8      	b.n	8005852 <memmove+0x12>
 8005860:	4402      	add	r2, r0
 8005862:	4601      	mov	r1, r0
 8005864:	428a      	cmp	r2, r1
 8005866:	d100      	bne.n	800586a <memmove+0x2a>
 8005868:	bd10      	pop	{r4, pc}
 800586a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800586e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005872:	e7f7      	b.n	8005864 <memmove+0x24>

08005874 <_sbrk_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4d06      	ldr	r5, [pc, #24]	; (8005890 <_sbrk_r+0x1c>)
 8005878:	2300      	movs	r3, #0
 800587a:	4604      	mov	r4, r0
 800587c:	4608      	mov	r0, r1
 800587e:	602b      	str	r3, [r5, #0]
 8005880:	f7fb fd74 	bl	800136c <_sbrk>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d102      	bne.n	800588e <_sbrk_r+0x1a>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	b103      	cbz	r3, 800588e <_sbrk_r+0x1a>
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	200003c4 	.word	0x200003c4

08005894 <memcpy>:
 8005894:	440a      	add	r2, r1
 8005896:	4291      	cmp	r1, r2
 8005898:	f100 33ff 	add.w	r3, r0, #4294967295
 800589c:	d100      	bne.n	80058a0 <memcpy+0xc>
 800589e:	4770      	bx	lr
 80058a0:	b510      	push	{r4, lr}
 80058a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058aa:	4291      	cmp	r1, r2
 80058ac:	d1f9      	bne.n	80058a2 <memcpy+0xe>
 80058ae:	bd10      	pop	{r4, pc}

080058b0 <_realloc_r>:
 80058b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b4:	4680      	mov	r8, r0
 80058b6:	4614      	mov	r4, r2
 80058b8:	460e      	mov	r6, r1
 80058ba:	b921      	cbnz	r1, 80058c6 <_realloc_r+0x16>
 80058bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	4611      	mov	r1, r2
 80058c2:	f7ff bc49 	b.w	8005158 <_malloc_r>
 80058c6:	b92a      	cbnz	r2, 80058d4 <_realloc_r+0x24>
 80058c8:	f7ff fbda 	bl	8005080 <_free_r>
 80058cc:	4625      	mov	r5, r4
 80058ce:	4628      	mov	r0, r5
 80058d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d4:	f000 f81b 	bl	800590e <_malloc_usable_size_r>
 80058d8:	4284      	cmp	r4, r0
 80058da:	4607      	mov	r7, r0
 80058dc:	d802      	bhi.n	80058e4 <_realloc_r+0x34>
 80058de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058e2:	d812      	bhi.n	800590a <_realloc_r+0x5a>
 80058e4:	4621      	mov	r1, r4
 80058e6:	4640      	mov	r0, r8
 80058e8:	f7ff fc36 	bl	8005158 <_malloc_r>
 80058ec:	4605      	mov	r5, r0
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d0ed      	beq.n	80058ce <_realloc_r+0x1e>
 80058f2:	42bc      	cmp	r4, r7
 80058f4:	4622      	mov	r2, r4
 80058f6:	4631      	mov	r1, r6
 80058f8:	bf28      	it	cs
 80058fa:	463a      	movcs	r2, r7
 80058fc:	f7ff ffca 	bl	8005894 <memcpy>
 8005900:	4631      	mov	r1, r6
 8005902:	4640      	mov	r0, r8
 8005904:	f7ff fbbc 	bl	8005080 <_free_r>
 8005908:	e7e1      	b.n	80058ce <_realloc_r+0x1e>
 800590a:	4635      	mov	r5, r6
 800590c:	e7df      	b.n	80058ce <_realloc_r+0x1e>

0800590e <_malloc_usable_size_r>:
 800590e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005912:	1f18      	subs	r0, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	bfbc      	itt	lt
 8005918:	580b      	ldrlt	r3, [r1, r0]
 800591a:	18c0      	addlt	r0, r0, r3
 800591c:	4770      	bx	lr
	...

08005920 <_init>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	bf00      	nop
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr

0800592c <_fini>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr
